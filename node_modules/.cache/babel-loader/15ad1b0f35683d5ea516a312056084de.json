{"ast":null,"code":"/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/build/pdf\", [], factory);else if (typeof exports === 'object') exports[\"pdfjs-dist/build/pdf\"] = factory();else root[\"pdfjs-dist/build/pdf\"] = root.pdfjsLib = factory();\n})(this, function () {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = [\n        /* 0 */\n      ,\n      /* 1 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.addLinkAttributes = addLinkAttributes;\n        exports.deprecated = deprecated;\n        exports.getFilenameFromUrl = getFilenameFromUrl;\n        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;\n        exports.getXfaPageViewport = getXfaPageViewport;\n        exports.isDataScheme = isDataScheme;\n        exports.isPdfFile = isPdfFile;\n        exports.isValidFetchUrl = isValidFetchUrl;\n        exports.loadScript = loadScript;\n        exports.StatTimer = exports.RenderingCancelledException = exports.PixelsPerInch = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMStandardFontDataFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        const DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\n        const SVG_NS = \"http://www.w3.org/2000/svg\";\n        const PixelsPerInch = {\n          CSS: 96.0,\n          PDF: 72.0,\n\n          get PDF_TO_CSS_UNITS() {\n            return (0, _util.shadow)(this, \"PDF_TO_CSS_UNITS\", this.CSS / this.PDF);\n          }\n\n        };\n        exports.PixelsPerInch = PixelsPerInch;\n\n        class DOMCanvasFactory extends _base_factory.BaseCanvasFactory {\n          constructor() {\n            let {\n              ownerDocument = globalThis.document\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            super();\n            this._document = ownerDocument;\n          }\n\n          _createCanvas(width, height) {\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n          }\n\n        }\n\n        exports.DOMCanvasFactory = DOMCanvasFactory;\n\n        async function fetchData(url) {\n          let asTypedArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (isValidFetchUrl(url, document.baseURI)) {\n            const response = await fetch(url);\n\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return asTypedArray ? new Uint8Array(await response.arrayBuffer()) : (0, _util.stringToBytes)(await response.text());\n          }\n\n          return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n            request.open(\"GET\", url, true);\n\n            if (asTypedArray) {\n              request.responseType = \"arraybuffer\";\n            }\n\n            request.onreadystatechange = () => {\n              if (request.readyState !== XMLHttpRequest.DONE) {\n                return;\n              }\n\n              if (request.status === 200 || request.status === 0) {\n                let data;\n\n                if (asTypedArray && request.response) {\n                  data = new Uint8Array(request.response);\n                } else if (!asTypedArray && request.responseText) {\n                  data = (0, _util.stringToBytes)(request.responseText);\n                }\n\n                if (data) {\n                  resolve(data);\n                  return;\n                }\n              }\n\n              reject(new Error(request.statusText));\n            };\n\n            request.send(null);\n          });\n        }\n\n        class DOMCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            return fetchData(url, this.isCompressed).then(data => {\n              return {\n                cMapData: data,\n                compressionType\n              };\n            });\n          }\n\n        }\n\n        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n        class DOMStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {\n          _fetchData(url) {\n            return fetchData(url, true);\n          }\n\n        }\n\n        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;\n\n        class DOMSVGFactory extends _base_factory.BaseSVGFactory {\n          _createSVG(type) {\n            return document.createElementNS(SVG_NS, type);\n          }\n\n        }\n\n        exports.DOMSVGFactory = DOMSVGFactory;\n\n        class PageViewport {\n          constructor(_ref) {\n            let {\n              viewBox,\n              scale,\n              rotation,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = _ref;\n            this.viewBox = viewBox;\n            this.scale = scale;\n            this.rotation = rotation;\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            const centerX = (viewBox[2] + viewBox[0]) / 2;\n            const centerY = (viewBox[3] + viewBox[1]) / 2;\n            let rotateA, rotateB, rotateC, rotateD;\n            rotation %= 360;\n\n            if (rotation < 0) {\n              rotation += 360;\n            }\n\n            switch (rotation) {\n              case 180:\n                rotateA = -1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = 1;\n                break;\n\n              case 90:\n                rotateA = 0;\n                rotateB = 1;\n                rotateC = 1;\n                rotateD = 0;\n                break;\n\n              case 270:\n                rotateA = 0;\n                rotateB = -1;\n                rotateC = -1;\n                rotateD = 0;\n                break;\n\n              case 0:\n                rotateA = 1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = -1;\n                break;\n\n              default:\n                throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n            }\n\n            if (dontFlip) {\n              rotateC = -rotateC;\n              rotateD = -rotateD;\n            }\n\n            let offsetCanvasX, offsetCanvasY;\n            let width, height;\n\n            if (rotateA === 0) {\n              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n              width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n              height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n            } else {\n              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n              width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n              height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n            }\n\n            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n            this.width = width;\n            this.height = height;\n          }\n\n          clone() {\n            let {\n              scale = this.scale,\n              rotation = this.rotation,\n              offsetX = this.offsetX,\n              offsetY = this.offsetY,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new PageViewport({\n              viewBox: this.viewBox.slice(),\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          convertToViewportPoint(x, y) {\n            return _util.Util.applyTransform([x, y], this.transform);\n          }\n\n          convertToViewportRectangle(rect) {\n            const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n            const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n            return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n          }\n\n          convertToPdfPoint(x, y) {\n            return _util.Util.applyInverseTransform([x, y], this.transform);\n          }\n\n        }\n\n        exports.PageViewport = PageViewport;\n\n        class RenderingCancelledException extends _util.BaseException {\n          constructor(msg, type) {\n            super(msg, \"RenderingCancelledException\");\n            this.type = type;\n          }\n\n        }\n\n        exports.RenderingCancelledException = RenderingCancelledException;\n        const LinkTarget = {\n          NONE: 0,\n          SELF: 1,\n          BLANK: 2,\n          PARENT: 3,\n          TOP: 4\n        };\n        exports.LinkTarget = LinkTarget;\n\n        function addLinkAttributes(link) {\n          let {\n            url,\n            target,\n            rel,\n            enabled = true\n          } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n          const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n          if (enabled) {\n            link.href = link.title = urlNullRemoved;\n          } else {\n            link.href = \"\";\n            link.title = `Disabled: ${urlNullRemoved}`;\n\n            link.onclick = () => {\n              return false;\n            };\n          }\n\n          let targetStr = \"\";\n\n          switch (target) {\n            case LinkTarget.NONE:\n              break;\n\n            case LinkTarget.SELF:\n              targetStr = \"_self\";\n              break;\n\n            case LinkTarget.BLANK:\n              targetStr = \"_blank\";\n              break;\n\n            case LinkTarget.PARENT:\n              targetStr = \"_parent\";\n              break;\n\n            case LinkTarget.TOP:\n              targetStr = \"_top\";\n              break;\n          }\n\n          link.target = targetStr;\n          link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n        }\n\n        function isDataScheme(url) {\n          const ii = url.length;\n          let i = 0;\n\n          while (i < ii && url[i].trim() === \"\") {\n            i++;\n          }\n\n          return url.substring(i, i + 5).toLowerCase() === \"data:\";\n        }\n\n        function isPdfFile(filename) {\n          return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n        }\n\n        function getFilenameFromUrl(url) {\n          const anchor = url.indexOf(\"#\");\n          const query = url.indexOf(\"?\");\n          const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n          return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n        }\n\n        function getPdfFilenameFromUrl(url) {\n          let defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"document.pdf\";\n\n          if (typeof url !== \"string\") {\n            return defaultFilename;\n          }\n\n          if (isDataScheme(url)) {\n            (0, _util.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n            return defaultFilename;\n          }\n\n          const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n          const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n          const splitURI = reURI.exec(url);\n          let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n\n          if (suggestedFilename) {\n            suggestedFilename = suggestedFilename[0];\n\n            if (suggestedFilename.includes(\"%\")) {\n              try {\n                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n              } catch (ex) {}\n            }\n          }\n\n          return suggestedFilename || defaultFilename;\n        }\n\n        class StatTimer {\n          constructor() {\n            this.started = Object.create(null);\n            this.times = [];\n          }\n\n          time(name) {\n            if (name in this.started) {\n              (0, _util.warn)(`Timer is already running for ${name}`);\n            }\n\n            this.started[name] = Date.now();\n          }\n\n          timeEnd(name) {\n            if (!(name in this.started)) {\n              (0, _util.warn)(`Timer has not been started for ${name}`);\n            }\n\n            this.times.push({\n              name,\n              start: this.started[name],\n              end: Date.now()\n            });\n            delete this.started[name];\n          }\n\n          toString() {\n            const outBuf = [];\n            let longest = 0;\n\n            for (const time of this.times) {\n              const name = time.name;\n\n              if (name.length > longest) {\n                longest = name.length;\n              }\n            }\n\n            for (const time of this.times) {\n              const duration = time.end - time.start;\n              outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n            }\n\n            return outBuf.join(\"\");\n          }\n\n        }\n\n        exports.StatTimer = StatTimer;\n\n        function isValidFetchUrl(url, baseUrl) {\n          try {\n            const {\n              protocol\n            } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n            return protocol === \"http:\" || protocol === \"https:\";\n          } catch (ex) {\n            return false;\n          }\n        }\n\n        function loadScript(src) {\n          let removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          return new Promise((resolve, reject) => {\n            const script = document.createElement(\"script\");\n            script.src = src;\n\n            script.onload = function (evt) {\n              if (removeScriptElement) {\n                script.remove();\n              }\n\n              resolve(evt);\n            };\n\n            script.onerror = function () {\n              reject(new Error(`Cannot load script at: ${script.src}`));\n            };\n\n            (document.head || document.documentElement).appendChild(script);\n          });\n        }\n\n        function deprecated(details) {\n          console.log(\"Deprecated API usage: \" + details);\n        }\n\n        let pdfDateStringRegex;\n\n        class PDFDateString {\n          static toDateObject(input) {\n            if (!input || !(0, _util.isString)(input)) {\n              return null;\n            }\n\n            if (!pdfDateStringRegex) {\n              pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n            }\n\n            const matches = pdfDateStringRegex.exec(input);\n\n            if (!matches) {\n              return null;\n            }\n\n            const year = parseInt(matches[1], 10);\n            let month = parseInt(matches[2], 10);\n            month = month >= 1 && month <= 12 ? month - 1 : 0;\n            let day = parseInt(matches[3], 10);\n            day = day >= 1 && day <= 31 ? day : 1;\n            let hour = parseInt(matches[4], 10);\n            hour = hour >= 0 && hour <= 23 ? hour : 0;\n            let minute = parseInt(matches[5], 10);\n            minute = minute >= 0 && minute <= 59 ? minute : 0;\n            let second = parseInt(matches[6], 10);\n            second = second >= 0 && second <= 59 ? second : 0;\n            const universalTimeRelation = matches[7] || \"Z\";\n            let offsetHour = parseInt(matches[8], 10);\n            offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n            let offsetMinute = parseInt(matches[9], 10) || 0;\n            offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n            if (universalTimeRelation === \"-\") {\n              hour += offsetHour;\n              minute += offsetMinute;\n            } else if (universalTimeRelation === \"+\") {\n              hour -= offsetHour;\n              minute -= offsetMinute;\n            }\n\n            return new Date(Date.UTC(year, month, day, hour, minute, second));\n          }\n\n        }\n\n        exports.PDFDateString = PDFDateString;\n\n        function getXfaPageViewport(xfaPage, _ref2) {\n          let {\n            scale = 1,\n            rotation = 0\n          } = _ref2;\n          const {\n            width,\n            height\n          } = xfaPage.attributes.style;\n          const viewBox = [0, 0, parseInt(width), parseInt(height)];\n          return new PageViewport({\n            viewBox,\n            scale,\n            rotation\n          });\n        }\n        /***/\n\n      },\n      /* 2 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.arrayByteLength = arrayByteLength;\n        exports.arraysToBytes = arraysToBytes;\n        exports.assert = assert;\n        exports.bytesToString = bytesToString;\n        exports.createObjectURL = createObjectURL;\n        exports.createPromiseCapability = createPromiseCapability;\n        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n        exports.escapeString = escapeString;\n        exports.getModificationDate = getModificationDate;\n        exports.getVerbosityLevel = getVerbosityLevel;\n        exports.info = info;\n        exports.isArrayBuffer = isArrayBuffer;\n        exports.isArrayEqual = isArrayEqual;\n        exports.isAscii = isAscii;\n        exports.isBool = isBool;\n        exports.isNum = isNum;\n        exports.isSameOrigin = isSameOrigin;\n        exports.isString = isString;\n        exports.objectFromMap = objectFromMap;\n        exports.objectSize = objectSize;\n        exports.removeNullCharacters = removeNullCharacters;\n        exports.setVerbosityLevel = setVerbosityLevel;\n        exports.shadow = shadow;\n        exports.string32 = string32;\n        exports.stringToBytes = stringToBytes;\n        exports.stringToPDFString = stringToPDFString;\n        exports.stringToUTF16BEString = stringToUTF16BEString;\n        exports.stringToUTF8String = stringToUTF8String;\n        exports.unreachable = unreachable;\n        exports.utf8StringToString = utf8StringToString;\n        exports.warn = warn;\n        exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.RenderingIntentFlag = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMode = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n        __w_pdfjs_require__(3);\n\n        const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n        const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n        const RenderingIntentFlag = {\n          ANY: 0x01,\n          DISPLAY: 0x02,\n          PRINT: 0x04,\n          ANNOTATIONS_FORMS: 0x10,\n          ANNOTATIONS_STORAGE: 0x20,\n          ANNOTATIONS_DISABLE: 0x40,\n          OPLIST: 0x100\n        };\n        exports.RenderingIntentFlag = RenderingIntentFlag;\n        const AnnotationMode = {\n          DISABLE: 0,\n          ENABLE: 1,\n          ENABLE_FORMS: 2,\n          ENABLE_STORAGE: 3\n        };\n        exports.AnnotationMode = AnnotationMode;\n        const PermissionFlag = {\n          PRINT: 0x04,\n          MODIFY_CONTENTS: 0x08,\n          COPY: 0x10,\n          MODIFY_ANNOTATIONS: 0x20,\n          FILL_INTERACTIVE_FORMS: 0x100,\n          COPY_FOR_ACCESSIBILITY: 0x200,\n          ASSEMBLE: 0x400,\n          PRINT_HIGH_QUALITY: 0x800\n        };\n        exports.PermissionFlag = PermissionFlag;\n        const TextRenderingMode = {\n          FILL: 0,\n          STROKE: 1,\n          FILL_STROKE: 2,\n          INVISIBLE: 3,\n          FILL_ADD_TO_PATH: 4,\n          STROKE_ADD_TO_PATH: 5,\n          FILL_STROKE_ADD_TO_PATH: 6,\n          ADD_TO_PATH: 7,\n          FILL_STROKE_MASK: 3,\n          ADD_TO_PATH_FLAG: 4\n        };\n        exports.TextRenderingMode = TextRenderingMode;\n        const ImageKind = {\n          GRAYSCALE_1BPP: 1,\n          RGB_24BPP: 2,\n          RGBA_32BPP: 3\n        };\n        exports.ImageKind = ImageKind;\n        const AnnotationType = {\n          TEXT: 1,\n          LINK: 2,\n          FREETEXT: 3,\n          LINE: 4,\n          SQUARE: 5,\n          CIRCLE: 6,\n          POLYGON: 7,\n          POLYLINE: 8,\n          HIGHLIGHT: 9,\n          UNDERLINE: 10,\n          SQUIGGLY: 11,\n          STRIKEOUT: 12,\n          STAMP: 13,\n          CARET: 14,\n          INK: 15,\n          POPUP: 16,\n          FILEATTACHMENT: 17,\n          SOUND: 18,\n          MOVIE: 19,\n          WIDGET: 20,\n          SCREEN: 21,\n          PRINTERMARK: 22,\n          TRAPNET: 23,\n          WATERMARK: 24,\n          THREED: 25,\n          REDACT: 26\n        };\n        exports.AnnotationType = AnnotationType;\n        const AnnotationStateModelType = {\n          MARKED: \"Marked\",\n          REVIEW: \"Review\"\n        };\n        exports.AnnotationStateModelType = AnnotationStateModelType;\n        const AnnotationMarkedState = {\n          MARKED: \"Marked\",\n          UNMARKED: \"Unmarked\"\n        };\n        exports.AnnotationMarkedState = AnnotationMarkedState;\n        const AnnotationReviewState = {\n          ACCEPTED: \"Accepted\",\n          REJECTED: \"Rejected\",\n          CANCELLED: \"Cancelled\",\n          COMPLETED: \"Completed\",\n          NONE: \"None\"\n        };\n        exports.AnnotationReviewState = AnnotationReviewState;\n        const AnnotationReplyType = {\n          GROUP: \"Group\",\n          REPLY: \"R\"\n        };\n        exports.AnnotationReplyType = AnnotationReplyType;\n        const AnnotationFlag = {\n          INVISIBLE: 0x01,\n          HIDDEN: 0x02,\n          PRINT: 0x04,\n          NOZOOM: 0x08,\n          NOROTATE: 0x10,\n          NOVIEW: 0x20,\n          READONLY: 0x40,\n          LOCKED: 0x80,\n          TOGGLENOVIEW: 0x100,\n          LOCKEDCONTENTS: 0x200\n        };\n        exports.AnnotationFlag = AnnotationFlag;\n        const AnnotationFieldFlag = {\n          READONLY: 0x0000001,\n          REQUIRED: 0x0000002,\n          NOEXPORT: 0x0000004,\n          MULTILINE: 0x0001000,\n          PASSWORD: 0x0002000,\n          NOTOGGLETOOFF: 0x0004000,\n          RADIO: 0x0008000,\n          PUSHBUTTON: 0x0010000,\n          COMBO: 0x0020000,\n          EDIT: 0x0040000,\n          SORT: 0x0080000,\n          FILESELECT: 0x0100000,\n          MULTISELECT: 0x0200000,\n          DONOTSPELLCHECK: 0x0400000,\n          DONOTSCROLL: 0x0800000,\n          COMB: 0x1000000,\n          RICHTEXT: 0x2000000,\n          RADIOSINUNISON: 0x2000000,\n          COMMITONSELCHANGE: 0x4000000\n        };\n        exports.AnnotationFieldFlag = AnnotationFieldFlag;\n        const AnnotationBorderStyleType = {\n          SOLID: 1,\n          DASHED: 2,\n          BEVELED: 3,\n          INSET: 4,\n          UNDERLINE: 5\n        };\n        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n        const AnnotationActionEventType = {\n          E: \"Mouse Enter\",\n          X: \"Mouse Exit\",\n          D: \"Mouse Down\",\n          U: \"Mouse Up\",\n          Fo: \"Focus\",\n          Bl: \"Blur\",\n          PO: \"PageOpen\",\n          PC: \"PageClose\",\n          PV: \"PageVisible\",\n          PI: \"PageInvisible\",\n          K: \"Keystroke\",\n          F: \"Format\",\n          V: \"Validate\",\n          C: \"Calculate\"\n        };\n        exports.AnnotationActionEventType = AnnotationActionEventType;\n        const DocumentActionEventType = {\n          WC: \"WillClose\",\n          WS: \"WillSave\",\n          DS: \"DidSave\",\n          WP: \"WillPrint\",\n          DP: \"DidPrint\"\n        };\n        exports.DocumentActionEventType = DocumentActionEventType;\n        const PageActionEventType = {\n          O: \"PageOpen\",\n          C: \"PageClose\"\n        };\n        exports.PageActionEventType = PageActionEventType;\n        const StreamType = {\n          UNKNOWN: \"UNKNOWN\",\n          FLATE: \"FLATE\",\n          LZW: \"LZW\",\n          DCT: \"DCT\",\n          JPX: \"JPX\",\n          JBIG: \"JBIG\",\n          A85: \"A85\",\n          AHX: \"AHX\",\n          CCF: \"CCF\",\n          RLX: \"RLX\"\n        };\n        exports.StreamType = StreamType;\n        const FontType = {\n          UNKNOWN: \"UNKNOWN\",\n          TYPE1: \"TYPE1\",\n          TYPE1STANDARD: \"TYPE1STANDARD\",\n          TYPE1C: \"TYPE1C\",\n          CIDFONTTYPE0: \"CIDFONTTYPE0\",\n          CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n          TRUETYPE: \"TRUETYPE\",\n          CIDFONTTYPE2: \"CIDFONTTYPE2\",\n          TYPE3: \"TYPE3\",\n          OPENTYPE: \"OPENTYPE\",\n          TYPE0: \"TYPE0\",\n          MMTYPE1: \"MMTYPE1\"\n        };\n        exports.FontType = FontType;\n        const VerbosityLevel = {\n          ERRORS: 0,\n          WARNINGS: 1,\n          INFOS: 5\n        };\n        exports.VerbosityLevel = VerbosityLevel;\n        const CMapCompressionType = {\n          NONE: 0,\n          BINARY: 1,\n          STREAM: 2\n        };\n        exports.CMapCompressionType = CMapCompressionType;\n        const OPS = {\n          dependency: 1,\n          setLineWidth: 2,\n          setLineCap: 3,\n          setLineJoin: 4,\n          setMiterLimit: 5,\n          setDash: 6,\n          setRenderingIntent: 7,\n          setFlatness: 8,\n          setGState: 9,\n          save: 10,\n          restore: 11,\n          transform: 12,\n          moveTo: 13,\n          lineTo: 14,\n          curveTo: 15,\n          curveTo2: 16,\n          curveTo3: 17,\n          closePath: 18,\n          rectangle: 19,\n          stroke: 20,\n          closeStroke: 21,\n          fill: 22,\n          eoFill: 23,\n          fillStroke: 24,\n          eoFillStroke: 25,\n          closeFillStroke: 26,\n          closeEOFillStroke: 27,\n          endPath: 28,\n          clip: 29,\n          eoClip: 30,\n          beginText: 31,\n          endText: 32,\n          setCharSpacing: 33,\n          setWordSpacing: 34,\n          setHScale: 35,\n          setLeading: 36,\n          setFont: 37,\n          setTextRenderingMode: 38,\n          setTextRise: 39,\n          moveText: 40,\n          setLeadingMoveText: 41,\n          setTextMatrix: 42,\n          nextLine: 43,\n          showText: 44,\n          showSpacedText: 45,\n          nextLineShowText: 46,\n          nextLineSetSpacingShowText: 47,\n          setCharWidth: 48,\n          setCharWidthAndBounds: 49,\n          setStrokeColorSpace: 50,\n          setFillColorSpace: 51,\n          setStrokeColor: 52,\n          setStrokeColorN: 53,\n          setFillColor: 54,\n          setFillColorN: 55,\n          setStrokeGray: 56,\n          setFillGray: 57,\n          setStrokeRGBColor: 58,\n          setFillRGBColor: 59,\n          setStrokeCMYKColor: 60,\n          setFillCMYKColor: 61,\n          shadingFill: 62,\n          beginInlineImage: 63,\n          beginImageData: 64,\n          endInlineImage: 65,\n          paintXObject: 66,\n          markPoint: 67,\n          markPointProps: 68,\n          beginMarkedContent: 69,\n          beginMarkedContentProps: 70,\n          endMarkedContent: 71,\n          beginCompat: 72,\n          endCompat: 73,\n          paintFormXObjectBegin: 74,\n          paintFormXObjectEnd: 75,\n          beginGroup: 76,\n          endGroup: 77,\n          beginAnnotations: 78,\n          endAnnotations: 79,\n          beginAnnotation: 80,\n          endAnnotation: 81,\n          paintJpegXObject: 82,\n          paintImageMaskXObject: 83,\n          paintImageMaskXObjectGroup: 84,\n          paintImageXObject: 85,\n          paintInlineImageXObject: 86,\n          paintInlineImageXObjectGroup: 87,\n          paintImageXObjectRepeat: 88,\n          paintImageMaskXObjectRepeat: 89,\n          paintSolidColorImageMask: 90,\n          constructPath: 91\n        };\n        exports.OPS = OPS;\n        const UNSUPPORTED_FEATURES = {\n          unknown: \"unknown\",\n          forms: \"forms\",\n          javaScript: \"javaScript\",\n          signatures: \"signatures\",\n          smask: \"smask\",\n          shadingPattern: \"shadingPattern\",\n          font: \"font\",\n          errorTilingPattern: \"errorTilingPattern\",\n          errorExtGState: \"errorExtGState\",\n          errorXObject: \"errorXObject\",\n          errorFontLoadType3: \"errorFontLoadType3\",\n          errorFontState: \"errorFontState\",\n          errorFontMissing: \"errorFontMissing\",\n          errorFontTranslate: \"errorFontTranslate\",\n          errorColorSpace: \"errorColorSpace\",\n          errorOperatorList: \"errorOperatorList\",\n          errorFontToUnicode: \"errorFontToUnicode\",\n          errorFontLoadNative: \"errorFontLoadNative\",\n          errorFontBuildPath: \"errorFontBuildPath\",\n          errorFontGetPath: \"errorFontGetPath\",\n          errorMarkedContent: \"errorMarkedContent\",\n          errorContentSubStream: \"errorContentSubStream\"\n        };\n        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n        const PasswordResponses = {\n          NEED_PASSWORD: 1,\n          INCORRECT_PASSWORD: 2\n        };\n        exports.PasswordResponses = PasswordResponses;\n        let verbosity = VerbosityLevel.WARNINGS;\n\n        function setVerbosityLevel(level) {\n          if (Number.isInteger(level)) {\n            verbosity = level;\n          }\n        }\n\n        function getVerbosityLevel() {\n          return verbosity;\n        }\n\n        function info(msg) {\n          if (verbosity >= VerbosityLevel.INFOS) {\n            console.log(`Info: ${msg}`);\n          }\n        }\n\n        function warn(msg) {\n          if (verbosity >= VerbosityLevel.WARNINGS) {\n            console.log(`Warning: ${msg}`);\n          }\n        }\n\n        function unreachable(msg) {\n          throw new Error(msg);\n        }\n\n        function assert(cond, msg) {\n          if (!cond) {\n            unreachable(msg);\n          }\n        }\n\n        function isSameOrigin(baseUrl, otherUrl) {\n          let base;\n\n          try {\n            base = new URL(baseUrl);\n\n            if (!base.origin || base.origin === \"null\") {\n              return false;\n            }\n          } catch (e) {\n            return false;\n          }\n\n          const other = new URL(otherUrl, base);\n          return base.origin === other.origin;\n        }\n\n        function _isValidProtocol(url) {\n          if (!url) {\n            return false;\n          }\n\n          switch (url.protocol) {\n            case \"http:\":\n            case \"https:\":\n            case \"ftp:\":\n            case \"mailto:\":\n            case \"tel:\":\n              return true;\n\n            default:\n              return false;\n          }\n        }\n\n        function createValidAbsoluteUrl(url) {\n          let baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n          if (!url) {\n            return null;\n          }\n\n          try {\n            if (options && typeof url === \"string\") {\n              if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n                const dots = url.match(/\\./g);\n\n                if (dots && dots.length >= 2) {\n                  url = `http://${url}`;\n                }\n              }\n\n              if (options.tryConvertEncoding) {\n                try {\n                  url = stringToUTF8String(url);\n                } catch (ex) {}\n              }\n            }\n\n            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n            if (_isValidProtocol(absoluteUrl)) {\n              return absoluteUrl;\n            }\n          } catch (ex) {}\n\n          return null;\n        }\n\n        function shadow(obj, prop, value) {\n          Object.defineProperty(obj, prop, {\n            value,\n            enumerable: true,\n            configurable: true,\n            writable: false\n          });\n          return value;\n        }\n\n        const BaseException = function BaseExceptionClosure() {\n          function BaseException(message, name) {\n            if (this.constructor === BaseException) {\n              unreachable(\"Cannot initialize BaseException.\");\n            }\n\n            this.message = message;\n            this.name = name;\n          }\n\n          BaseException.prototype = new Error();\n          BaseException.constructor = BaseException;\n          return BaseException;\n        }();\n\n        exports.BaseException = BaseException;\n\n        class PasswordException extends BaseException {\n          constructor(msg, code) {\n            super(msg, \"PasswordException\");\n            this.code = code;\n          }\n\n        }\n\n        exports.PasswordException = PasswordException;\n\n        class UnknownErrorException extends BaseException {\n          constructor(msg, details) {\n            super(msg, \"UnknownErrorException\");\n            this.details = details;\n          }\n\n        }\n\n        exports.UnknownErrorException = UnknownErrorException;\n\n        class InvalidPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"InvalidPDFException\");\n          }\n\n        }\n\n        exports.InvalidPDFException = InvalidPDFException;\n\n        class MissingPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"MissingPDFException\");\n          }\n\n        }\n\n        exports.MissingPDFException = MissingPDFException;\n\n        class UnexpectedResponseException extends BaseException {\n          constructor(msg, status) {\n            super(msg, \"UnexpectedResponseException\");\n            this.status = status;\n          }\n\n        }\n\n        exports.UnexpectedResponseException = UnexpectedResponseException;\n\n        class FormatError extends BaseException {\n          constructor(msg) {\n            super(msg, \"FormatError\");\n          }\n\n        }\n\n        exports.FormatError = FormatError;\n\n        class AbortException extends BaseException {\n          constructor(msg) {\n            super(msg, \"AbortException\");\n          }\n\n        }\n\n        exports.AbortException = AbortException;\n        const NullCharactersRegExp = /\\x00/g;\n\n        function removeNullCharacters(str) {\n          if (typeof str !== \"string\") {\n            warn(\"The argument for removeNullCharacters must be a string.\");\n            return str;\n          }\n\n          return str.replace(NullCharactersRegExp, \"\");\n        }\n\n        function bytesToString(bytes) {\n          assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n          const length = bytes.length;\n          const MAX_ARGUMENT_COUNT = 8192;\n\n          if (length < MAX_ARGUMENT_COUNT) {\n            return String.fromCharCode.apply(null, bytes);\n          }\n\n          const strBuf = [];\n\n          for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n            const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n            const chunk = bytes.subarray(i, chunkEnd);\n            strBuf.push(String.fromCharCode.apply(null, chunk));\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function stringToBytes(str) {\n          assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n          const length = str.length;\n          const bytes = new Uint8Array(length);\n\n          for (let i = 0; i < length; ++i) {\n            bytes[i] = str.charCodeAt(i) & 0xff;\n          }\n\n          return bytes;\n        }\n\n        function arrayByteLength(arr) {\n          if (arr.length !== undefined) {\n            return arr.length;\n          }\n\n          assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n          return arr.byteLength;\n        }\n\n        function arraysToBytes(arr) {\n          const length = arr.length;\n\n          if (length === 1 && arr[0] instanceof Uint8Array) {\n            return arr[0];\n          }\n\n          let resultLength = 0;\n\n          for (let i = 0; i < length; i++) {\n            resultLength += arrayByteLength(arr[i]);\n          }\n\n          let pos = 0;\n          const data = new Uint8Array(resultLength);\n\n          for (let i = 0; i < length; i++) {\n            let item = arr[i];\n\n            if (!(item instanceof Uint8Array)) {\n              if (typeof item === \"string\") {\n                item = stringToBytes(item);\n              } else {\n                item = new Uint8Array(item);\n              }\n            }\n\n            const itemLength = item.byteLength;\n            data.set(item, pos);\n            pos += itemLength;\n          }\n\n          return data;\n        }\n\n        function string32(value) {\n          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n\n        function objectSize(obj) {\n          return Object.keys(obj).length;\n        }\n\n        function objectFromMap(map) {\n          const obj = Object.create(null);\n\n          for (const [key, value] of map) {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function isLittleEndian() {\n          const buffer8 = new Uint8Array(4);\n          buffer8[0] = 1;\n          const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n          return view32[0] === 1;\n        }\n\n        const IsLittleEndianCached = {\n          get value() {\n            return shadow(this, \"value\", isLittleEndian());\n          }\n\n        };\n        exports.IsLittleEndianCached = IsLittleEndianCached;\n\n        function isEvalSupported() {\n          try {\n            new Function(\"\");\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        const IsEvalSupportedCached = {\n          get value() {\n            return shadow(this, \"value\", isEvalSupported());\n          }\n\n        };\n        exports.IsEvalSupportedCached = IsEvalSupportedCached;\n        const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n        class Util {\n          static makeHexColor(r, g, b) {\n            return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n          }\n\n          static transform(m1, m2) {\n            return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n          }\n\n          static applyTransform(p, m) {\n            const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n            const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n            return [xt, yt];\n          }\n\n          static applyInverseTransform(p, m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n            const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n            return [xt, yt];\n          }\n\n          static getAxialAlignedBoundingBox(r, m) {\n            const p1 = Util.applyTransform(r, m);\n            const p2 = Util.applyTransform(r.slice(2, 4), m);\n            const p3 = Util.applyTransform([r[0], r[3]], m);\n            const p4 = Util.applyTransform([r[2], r[1]], m);\n            return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n          }\n\n          static inverseTransform(m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n          }\n\n          static apply3dTransform(m, v) {\n            return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n          }\n\n          static singularValueDecompose2dScale(m) {\n            const transpose = [m[0], m[2], m[1], m[3]];\n            const a = m[0] * transpose[0] + m[1] * transpose[2];\n            const b = m[0] * transpose[1] + m[1] * transpose[3];\n            const c = m[2] * transpose[0] + m[3] * transpose[2];\n            const d = m[2] * transpose[1] + m[3] * transpose[3];\n            const first = (a + d) / 2;\n            const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n            const sx = first + second || 1;\n            const sy = first - second || 1;\n            return [Math.sqrt(sx), Math.sqrt(sy)];\n          }\n\n          static normalizeRect(rect) {\n            const r = rect.slice(0);\n\n            if (rect[0] > rect[2]) {\n              r[0] = rect[2];\n              r[2] = rect[0];\n            }\n\n            if (rect[1] > rect[3]) {\n              r[1] = rect[3];\n              r[3] = rect[1];\n            }\n\n            return r;\n          }\n\n          static intersect(rect1, rect2) {\n            function compare(a, b) {\n              return a - b;\n            }\n\n            const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n            const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n            const result = [];\n            rect1 = Util.normalizeRect(rect1);\n            rect2 = Util.normalizeRect(rect2);\n\n            if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n              result[0] = orderedX[1];\n              result[2] = orderedX[2];\n            } else {\n              return null;\n            }\n\n            if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n              result[1] = orderedY[1];\n              result[3] = orderedY[2];\n            } else {\n              return null;\n            }\n\n            return result;\n          }\n\n        }\n\n        exports.Util = Util;\n        const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];\n\n        function stringToPDFString(str) {\n          const length = str.length,\n                strBuf = [];\n\n          if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n            }\n          } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n            }\n          } else {\n            for (let i = 0; i < length; ++i) {\n              const code = PDFStringTranslateTable[str.charCodeAt(i)];\n              strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n            }\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function escapeString(str) {\n          return str.replace(/([()\\\\\\n\\r])/g, match => {\n            if (match === \"\\n\") {\n              return \"\\\\n\";\n            } else if (match === \"\\r\") {\n              return \"\\\\r\";\n            }\n\n            return `\\\\${match}`;\n          });\n        }\n\n        function isAscii(str) {\n          return /^[\\x00-\\x7F]*$/.test(str);\n        }\n\n        function stringToUTF16BEString(str) {\n          const buf = [\"\\xFE\\xFF\"];\n\n          for (let i = 0, ii = str.length; i < ii; i++) {\n            const char = str.charCodeAt(i);\n            buf.push(String.fromCharCode(char >> 8 & 0xff), String.fromCharCode(char & 0xff));\n          }\n\n          return buf.join(\"\");\n        }\n\n        function stringToUTF8String(str) {\n          return decodeURIComponent(escape(str));\n        }\n\n        function utf8StringToString(str) {\n          return unescape(encodeURIComponent(str));\n        }\n\n        function isBool(v) {\n          return typeof v === \"boolean\";\n        }\n\n        function isNum(v) {\n          return typeof v === \"number\";\n        }\n\n        function isString(v) {\n          return typeof v === \"string\";\n        }\n\n        function isArrayBuffer(v) {\n          return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n        }\n\n        function isArrayEqual(arr1, arr2) {\n          if (arr1.length !== arr2.length) {\n            return false;\n          }\n\n          for (let i = 0, ii = arr1.length; i < ii; i++) {\n            if (arr1[i] !== arr2[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        function getModificationDate() {\n          let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n          const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n          return buffer.join(\"\");\n        }\n\n        function createPromiseCapability() {\n          const capability = Object.create(null);\n          let isSettled = false;\n          Object.defineProperty(capability, \"settled\", {\n            get() {\n              return isSettled;\n            }\n\n          });\n          capability.promise = new Promise(function (resolve, reject) {\n            capability.resolve = function (data) {\n              isSettled = true;\n              resolve(data);\n            };\n\n            capability.reject = function (reason) {\n              isSettled = true;\n              reject(reason);\n            };\n          });\n          return capability;\n        }\n\n        function createObjectURL(data) {\n          let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n          let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (URL.createObjectURL && !forceDataSchema) {\n            return URL.createObjectURL(new Blob([data], {\n              type: contentType\n            }));\n          }\n\n          const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n          let buffer = `data:${contentType};base64,`;\n\n          for (let i = 0, ii = data.length; i < ii; i += 3) {\n            const b1 = data[i] & 0xff;\n            const b2 = data[i + 1] & 0xff;\n            const b3 = data[i + 2] & 0xff;\n            const d1 = b1 >> 2,\n                  d2 = (b1 & 3) << 4 | b2 >> 4;\n            const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n            const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n          }\n\n          return buffer;\n        }\n        /***/\n\n      },\n      /* 3 */\n\n      /***/\n      (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n        var _is_node = __w_pdfjs_require__(4);\n\n        ;\n        /***/\n      },\n      /* 4 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.isNodeJS = void 0;\n        const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        exports.isNodeJS = isNodeJS;\n        /***/\n      },\n      /* 5 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.BaseSVGFactory = exports.BaseStandardFontDataFactory = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseCanvasFactory {\n          constructor() {\n            if (this.constructor === BaseCanvasFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            const canvas = this._createCanvas(width, height);\n\n            return {\n              canvas,\n              context: canvas.getContext(\"2d\")\n            };\n          }\n\n          reset(canvasAndContext, width, height) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            canvasAndContext.canvas.width = width;\n            canvasAndContext.canvas.height = height;\n          }\n\n          destroy(canvasAndContext) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            canvasAndContext.canvas.width = 0;\n            canvasAndContext.canvas.height = 0;\n            canvasAndContext.canvas = null;\n            canvasAndContext.context = null;\n          }\n\n          _createCanvas(width, height) {\n            (0, _util.unreachable)(\"Abstract method `_createCanvas` called.\");\n          }\n\n        }\n\n        exports.BaseCanvasFactory = BaseCanvasFactory;\n\n        class BaseCMapReaderFactory {\n          constructor(_ref3) {\n            let {\n              baseUrl = null,\n              isCompressed = false\n            } = _ref3;\n\n            if (this.constructor === BaseCMapReaderFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n            this.isCompressed = isCompressed;\n          }\n\n          async fetch(_ref4) {\n            let {\n              name\n            } = _ref4;\n\n            if (!this.baseUrl) {\n              throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n            }\n\n            if (!name) {\n              throw new Error(\"CMap name must be specified.\");\n            }\n\n            const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n            const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n            return this._fetchData(url, compressionType).catch(reason => {\n              throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n            });\n          }\n\n          _fetchData(url, compressionType) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n        class BaseStandardFontDataFactory {\n          constructor(_ref5) {\n            let {\n              baseUrl = null\n            } = _ref5;\n\n            if (this.constructor === BaseStandardFontDataFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n          }\n\n          async fetch(_ref6) {\n            let {\n              filename\n            } = _ref6;\n\n            if (!this.baseUrl) {\n              throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\n            }\n\n            if (!filename) {\n              throw new Error(\"Font filename must be specified.\");\n            }\n\n            const url = `${this.baseUrl}${filename}`;\n            return this._fetchData(url).catch(reason => {\n              throw new Error(`Unable to load font data at: ${url}`);\n            });\n          }\n\n          _fetchData(url) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;\n\n        class BaseSVGFactory {\n          constructor() {\n            if (this.constructor === BaseSVGFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseSVGFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid SVG dimensions\");\n            }\n\n            const svg = this._createSVG(\"svg:svg\");\n\n            svg.setAttribute(\"version\", \"1.1\");\n            svg.setAttribute(\"width\", `${width}px`);\n            svg.setAttribute(\"height\", `${height}px`);\n            svg.setAttribute(\"preserveAspectRatio\", \"none\");\n            svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n            return svg;\n          }\n\n          createElement(type) {\n            if (typeof type !== \"string\") {\n              throw new Error(\"Invalid SVG element type\");\n            }\n\n            return this._createSVG(type);\n          }\n\n          _createSVG(type) {\n            (0, _util.unreachable)(\"Abstract method `_createSVG` called.\");\n          }\n\n        }\n\n        exports.BaseSVGFactory = BaseSVGFactory;\n        /***/\n      },\n      /* 6 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getDocument = getDocument;\n        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n        exports.version = exports.RenderTask = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _font_loader = __w_pdfjs_require__(7);\n\n        var _node_utils = __w_pdfjs_require__(8);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _canvas = __w_pdfjs_require__(10);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _message_handler = __w_pdfjs_require__(13);\n\n        var _metadata = __w_pdfjs_require__(14);\n\n        var _optional_content_config = __w_pdfjs_require__(15);\n\n        var _transport_stream = __w_pdfjs_require__(16);\n\n        var _xfa_text = __w_pdfjs_require__(17);\n\n        const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n        const RENDERING_CANCELLED_TIMEOUT = 100;\n        const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n        exports.DefaultCanvasFactory = DefaultCanvasFactory;\n        const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n        const DefaultStandardFontDataFactory = _is_node.isNodeJS ? _node_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;\n        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;\n        let createPDFNetworkStream;\n\n        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n          createPDFNetworkStream = pdfNetworkStreamFactory;\n        }\n\n        function getDocument(src) {\n          const task = new PDFDocumentLoadingTask();\n          let source;\n\n          if (typeof src === \"string\" || src instanceof URL) {\n            source = {\n              url: src\n            };\n          } else if ((0, _util.isArrayBuffer)(src)) {\n            source = {\n              data: src\n            };\n          } else if (src instanceof PDFDataRangeTransport) {\n            source = {\n              range: src\n            };\n          } else {\n            if (typeof src !== \"object\") {\n              throw new Error(\"Invalid parameter in getDocument, \" + \"need either string, URL, Uint8Array, or parameter object.\");\n            }\n\n            if (!src.url && !src.data && !src.range) {\n              throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n            }\n\n            source = src;\n          }\n\n          const params = Object.create(null);\n          let rangeTransport = null,\n              worker = null;\n\n          for (const key in source) {\n            const value = source[key];\n\n            switch (key) {\n              case \"url\":\n                if (typeof window !== \"undefined\") {\n                  try {\n                    params[key] = new URL(value, window.location).href;\n                    continue;\n                  } catch (ex) {\n                    (0, _util.warn)(`Cannot create valid URL: \"${ex}\".`);\n                  }\n                } else if (typeof value === \"string\" || value instanceof URL) {\n                  params[key] = value.toString();\n                  continue;\n                }\n\n                throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n\n              case \"range\":\n                rangeTransport = value;\n                continue;\n\n              case \"worker\":\n                worker = value;\n                continue;\n\n              case \"data\":\n                if (_is_node.isNodeJS && typeof Buffer !== \"undefined\" && value instanceof Buffer) {\n                  params[key] = new Uint8Array(value);\n                } else if (value instanceof Uint8Array) {\n                  break;\n                } else if (typeof value === \"string\") {\n                  params[key] = (0, _util.stringToBytes)(value);\n                } else if (typeof value === \"object\" && value !== null && !isNaN(value.length)) {\n                  params[key] = new Uint8Array(value);\n                } else if ((0, _util.isArrayBuffer)(value)) {\n                  params[key] = new Uint8Array(value);\n                } else {\n                  throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string, or array-like object is expected in the data property.\");\n                }\n\n                continue;\n            }\n\n            params[key] = value;\n          }\n\n          params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n          params.StandardFontDataFactory = params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n          params.ignoreErrors = params.stopAtErrors !== true;\n          params.fontExtraProperties = params.fontExtraProperties === true;\n          params.pdfBug = params.pdfBug === true;\n          params.enableXfa = params.enableXfa === true;\n\n          if (typeof params.docBaseUrl !== \"string\" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {\n            params.docBaseUrl = null;\n          }\n\n          if (!Number.isInteger(params.maxImageSize)) {\n            params.maxImageSize = -1;\n          }\n\n          if (typeof params.useWorkerFetch !== \"boolean\") {\n            params.useWorkerFetch = params.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && params.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory;\n          }\n\n          if (typeof params.isEvalSupported !== \"boolean\") {\n            params.isEvalSupported = true;\n          }\n\n          if (typeof params.disableFontFace !== \"boolean\") {\n            params.disableFontFace = _is_node.isNodeJS;\n          }\n\n          if (typeof params.useSystemFonts !== \"boolean\") {\n            params.useSystemFonts = !_is_node.isNodeJS && !params.disableFontFace;\n          }\n\n          if (typeof params.ownerDocument === \"undefined\") {\n            params.ownerDocument = globalThis.document;\n          }\n\n          if (typeof params.disableRange !== \"boolean\") {\n            params.disableRange = false;\n          }\n\n          if (typeof params.disableStream !== \"boolean\") {\n            params.disableStream = false;\n          }\n\n          if (typeof params.disableAutoFetch !== \"boolean\") {\n            params.disableAutoFetch = false;\n          }\n\n          (0, _util.setVerbosityLevel)(params.verbosity);\n\n          if (!worker) {\n            const workerParams = {\n              verbosity: params.verbosity,\n              port: _worker_options.GlobalWorkerOptions.workerPort\n            };\n            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n            task._worker = worker;\n          }\n\n          const docId = task.docId;\n          worker.promise.then(function () {\n            if (task.destroyed) {\n              throw new Error(\"Loading aborted\");\n            }\n\n            const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n            const networkStreamPromise = new Promise(function (resolve) {\n              let networkStream;\n\n              if (rangeTransport) {\n                networkStream = new _transport_stream.PDFDataTransportStream({\n                  length: params.length,\n                  initialData: params.initialData,\n                  progressiveDone: params.progressiveDone,\n                  contentDispositionFilename: params.contentDispositionFilename,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                }, rangeTransport);\n              } else if (!params.data) {\n                networkStream = createPDFNetworkStream({\n                  url: params.url,\n                  length: params.length,\n                  httpHeaders: params.httpHeaders,\n                  withCredentials: params.withCredentials,\n                  rangeChunkSize: params.rangeChunkSize,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                });\n              }\n\n              resolve(networkStream);\n            });\n            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref7) {\n              let [workerId, networkStream] = _ref7;\n\n              if (task.destroyed) {\n                throw new Error(\"Loading aborted\");\n              }\n\n              const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n              messageHandler.postMessageTransfers = worker.postMessageTransfers;\n              const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n              task._transport = transport;\n              messageHandler.send(\"Ready\", null);\n            });\n          }).catch(task._capability.reject);\n          return task;\n        }\n\n        async function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          if (pdfDataRangeTransport) {\n            source.length = pdfDataRangeTransport.length;\n            source.initialData = pdfDataRangeTransport.initialData;\n            source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n            source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;\n          }\n\n          const workerId = await worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n            docId,\n            apiVersion: '2.11.338',\n            source: {\n              data: source.data,\n              url: source.url,\n              password: source.password,\n              disableAutoFetch: source.disableAutoFetch,\n              rangeChunkSize: source.rangeChunkSize,\n              length: source.length\n            },\n            maxImageSize: source.maxImageSize,\n            disableFontFace: source.disableFontFace,\n            postMessageTransfers: worker.postMessageTransfers,\n            docBaseUrl: source.docBaseUrl,\n            ignoreErrors: source.ignoreErrors,\n            isEvalSupported: source.isEvalSupported,\n            fontExtraProperties: source.fontExtraProperties,\n            enableXfa: source.enableXfa,\n            useSystemFonts: source.useSystemFonts,\n            cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n            standardFontDataUrl: source.useWorkerFetch ? source.standardFontDataUrl : null\n          });\n\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          return workerId;\n        }\n\n        class PDFDocumentLoadingTask {\n          static get idCounters() {\n            return (0, _util.shadow)(this, \"idCounters\", {\n              doc: 0\n            });\n          }\n\n          constructor() {\n            this._capability = (0, _util.createPromiseCapability)();\n            this._transport = null;\n            this._worker = null;\n            this.docId = `d${PDFDocumentLoadingTask.idCounters.doc++}`;\n            this.destroyed = false;\n            this.onPassword = null;\n            this.onProgress = null;\n            this.onUnsupportedFeature = null;\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          async destroy() {\n            this.destroyed = true;\n            await this._transport?.destroy();\n            this._transport = null;\n\n            if (this._worker) {\n              this._worker.destroy();\n\n              this._worker = null;\n            }\n          }\n\n        }\n\n        exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;\n\n        class PDFDataRangeTransport {\n          constructor(length, initialData) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this.length = length;\n            this.initialData = initialData;\n            this.progressiveDone = progressiveDone;\n            this.contentDispositionFilename = contentDispositionFilename;\n            this._rangeListeners = [];\n            this._progressListeners = [];\n            this._progressiveReadListeners = [];\n            this._progressiveDoneListeners = [];\n            this._readyCapability = (0, _util.createPromiseCapability)();\n          }\n\n          addRangeListener(listener) {\n            this._rangeListeners.push(listener);\n          }\n\n          addProgressListener(listener) {\n            this._progressListeners.push(listener);\n          }\n\n          addProgressiveReadListener(listener) {\n            this._progressiveReadListeners.push(listener);\n          }\n\n          addProgressiveDoneListener(listener) {\n            this._progressiveDoneListeners.push(listener);\n          }\n\n          onDataRange(begin, chunk) {\n            for (const listener of this._rangeListeners) {\n              listener(begin, chunk);\n            }\n          }\n\n          onDataProgress(loaded, total) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressListeners) {\n                listener(loaded, total);\n              }\n            });\n          }\n\n          onDataProgressiveRead(chunk) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveReadListeners) {\n                listener(chunk);\n              }\n            });\n          }\n\n          onDataProgressiveDone() {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveDoneListeners) {\n                listener();\n              }\n            });\n          }\n\n          transportReady() {\n            this._readyCapability.resolve();\n          }\n\n          requestDataRange(begin, end) {\n            (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n          }\n\n          abort() {}\n\n        }\n\n        exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n        class PDFDocumentProxy {\n          constructor(pdfInfo, transport) {\n            this._pdfInfo = pdfInfo;\n            this._transport = transport;\n            Object.defineProperty(this, \"fingerprint\", {\n              get() {\n                (0, _display_utils.deprecated)(\"`PDFDocumentProxy.fingerprint`, \" + \"please use `PDFDocumentProxy.fingerprints` instead.\");\n                return this.fingerprints[0];\n              }\n\n            });\n          }\n\n          get annotationStorage() {\n            return this._transport.annotationStorage;\n          }\n\n          get numPages() {\n            return this._pdfInfo.numPages;\n          }\n\n          get fingerprints() {\n            return this._pdfInfo.fingerprints;\n          }\n\n          get isPureXfa() {\n            return !!this._transport._htmlForXfa;\n          }\n\n          get allXfaHtml() {\n            return this._transport._htmlForXfa;\n          }\n\n          getPage(pageNumber) {\n            return this._transport.getPage(pageNumber);\n          }\n\n          getPageIndex(ref) {\n            return this._transport.getPageIndex(ref);\n          }\n\n          getDestinations() {\n            return this._transport.getDestinations();\n          }\n\n          getDestination(id) {\n            return this._transport.getDestination(id);\n          }\n\n          getPageLabels() {\n            return this._transport.getPageLabels();\n          }\n\n          getPageLayout() {\n            return this._transport.getPageLayout();\n          }\n\n          getPageMode() {\n            return this._transport.getPageMode();\n          }\n\n          getViewerPreferences() {\n            return this._transport.getViewerPreferences();\n          }\n\n          getOpenAction() {\n            return this._transport.getOpenAction();\n          }\n\n          getAttachments() {\n            return this._transport.getAttachments();\n          }\n\n          getJavaScript() {\n            return this._transport.getJavaScript();\n          }\n\n          getJSActions() {\n            return this._transport.getDocJSActions();\n          }\n\n          getOutline() {\n            return this._transport.getOutline();\n          }\n\n          getOptionalContentConfig() {\n            return this._transport.getOptionalContentConfig();\n          }\n\n          getPermissions() {\n            return this._transport.getPermissions();\n          }\n\n          getMetadata() {\n            return this._transport.getMetadata();\n          }\n\n          getMarkInfo() {\n            return this._transport.getMarkInfo();\n          }\n\n          getData() {\n            return this._transport.getData();\n          }\n\n          getDownloadInfo() {\n            return this._transport.downloadInfoCapability.promise;\n          }\n\n          getStats() {\n            return this._transport.getStats();\n          }\n\n          cleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n          }\n\n          destroy() {\n            return this.loadingTask.destroy();\n          }\n\n          get loadingParams() {\n            return this._transport.loadingParams;\n          }\n\n          get loadingTask() {\n            return this._transport.loadingTask;\n          }\n\n          saveDocument() {\n            if (this._transport.annotationStorage.size <= 0) {\n              (0, _display_utils.deprecated)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n            }\n\n            return this._transport.saveDocument();\n          }\n\n          getFieldObjects() {\n            return this._transport.getFieldObjects();\n          }\n\n          hasJSActions() {\n            return this._transport.hasJSActions();\n          }\n\n          getCalculationOrderIds() {\n            return this._transport.getCalculationOrderIds();\n          }\n\n        }\n\n        exports.PDFDocumentProxy = PDFDocumentProxy;\n\n        class PDFPageProxy {\n          constructor(pageIndex, pageInfo, transport, ownerDocument) {\n            let pdfBug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n            this._pageIndex = pageIndex;\n            this._pageInfo = pageInfo;\n            this._ownerDocument = ownerDocument;\n            this._transport = transport;\n            this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n            this._pdfBug = pdfBug;\n            this.commonObjs = transport.commonObjs;\n            this.objs = new PDFObjects();\n            this.cleanupAfterRender = false;\n            this.pendingCleanup = false;\n            this._intentStates = new Map();\n            this._annotationPromises = new Map();\n            this.destroyed = false;\n          }\n\n          get pageNumber() {\n            return this._pageIndex + 1;\n          }\n\n          get rotate() {\n            return this._pageInfo.rotate;\n          }\n\n          get ref() {\n            return this._pageInfo.ref;\n          }\n\n          get userUnit() {\n            return this._pageInfo.userUnit;\n          }\n\n          get view() {\n            return this._pageInfo.view;\n          }\n\n          getViewport() {\n            let {\n              scale,\n              rotation = this.rotate,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new _display_utils.PageViewport({\n              viewBox: this.view,\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          getAnnotations() {\n            let {\n              intent = \"display\"\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            const intentArgs = this._transport.getRenderingIntent(intent);\n\n            let promise = this._annotationPromises.get(intentArgs.cacheKey);\n\n            if (!promise) {\n              promise = this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);\n\n              this._annotationPromises.set(intentArgs.cacheKey, promise);\n\n              promise = promise.then(annotations => {\n                for (const annotation of annotations) {\n                  if (annotation.titleObj !== undefined) {\n                    Object.defineProperty(annotation, \"title\", {\n                      get() {\n                        (0, _display_utils.deprecated)(\"`title`-property on annotation, please use `titleObj` instead.\");\n                        return annotation.titleObj.str;\n                      }\n\n                    });\n                  }\n\n                  if (annotation.contentsObj !== undefined) {\n                    Object.defineProperty(annotation, \"contents\", {\n                      get() {\n                        (0, _display_utils.deprecated)(\"`contents`-property on annotation, please use `contentsObj` instead.\");\n                        return annotation.contentsObj.str;\n                      }\n\n                    });\n                  }\n                }\n\n                return annotations;\n              });\n            }\n\n            return promise;\n          }\n\n          getJSActions() {\n            return this._jsActionsPromise ||= this._transport.getPageJSActions(this._pageIndex);\n          }\n\n          async getXfa() {\n            return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n          }\n\n          render(_ref8) {\n            let {\n              canvasContext,\n              viewport,\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE,\n              transform = null,\n              imageLayer = null,\n              canvasFactory = null,\n              background = null,\n              optionalContentConfigPromise = null\n            } = _ref8;\n\n            if (arguments[0]?.renderInteractiveForms !== undefined) {\n              (0, _display_utils.deprecated)(\"render no longer accepts the `renderInteractiveForms`-option, \" + \"please use the `annotationMode`-option instead.\");\n\n              if (arguments[0].renderInteractiveForms === true && annotationMode === _util.AnnotationMode.ENABLE) {\n                annotationMode = _util.AnnotationMode.ENABLE_FORMS;\n              }\n            }\n\n            if (arguments[0]?.includeAnnotationStorage !== undefined) {\n              (0, _display_utils.deprecated)(\"render no longer accepts the `includeAnnotationStorage`-option, \" + \"please use the `annotationMode`-option instead.\");\n\n              if (arguments[0].includeAnnotationStorage === true && annotationMode === _util.AnnotationMode.ENABLE) {\n                annotationMode = _util.AnnotationMode.ENABLE_STORAGE;\n              }\n            }\n\n            if (this._stats) {\n              this._stats.time(\"Overall\");\n            }\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode);\n\n            this.pendingCleanup = false;\n\n            if (!optionalContentConfigPromise) {\n              optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n            }\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            if (intentState.streamReaderCancelTimeout) {\n              clearTimeout(intentState.streamReaderCancelTimeout);\n              intentState.streamReaderCancelTimeout = null;\n            }\n\n            const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n              ownerDocument: this._ownerDocument\n            });\n            const intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);\n\n            if (!intentState.displayReadyCapability) {\n              intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            const complete = error => {\n              intentState.renderTasks.delete(internalRenderTask);\n\n              if (this.cleanupAfterRender || intentPrint) {\n                this.pendingCleanup = true;\n              }\n\n              this._tryCleanup();\n\n              if (error) {\n                internalRenderTask.capability.reject(error);\n\n                this._abortOperatorList({\n                  intentState,\n                  reason: error instanceof Error ? error : new Error(error)\n                });\n              } else {\n                internalRenderTask.capability.resolve();\n              }\n\n              if (this._stats) {\n                this._stats.timeEnd(\"Rendering\");\n\n                this._stats.timeEnd(\"Overall\");\n              }\n            };\n\n            const internalRenderTask = new InternalRenderTask({\n              callback: complete,\n              params: {\n                canvasContext,\n                viewport,\n                transform,\n                imageLayer,\n                background\n              },\n              objs: this.objs,\n              commonObjs: this.commonObjs,\n              operatorList: intentState.operatorList,\n              pageIndex: this._pageIndex,\n              canvasFactory: canvasFactoryInstance,\n              useRequestAnimationFrame: !intentPrint,\n              pdfBug: this._pdfBug\n            });\n            (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n            const renderTask = internalRenderTask.task;\n            Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(_ref9 => {\n              let [transparency, optionalContentConfig] = _ref9;\n\n              if (this.pendingCleanup) {\n                complete();\n                return;\n              }\n\n              if (this._stats) {\n                this._stats.time(\"Rendering\");\n              }\n\n              internalRenderTask.initializeGraphics({\n                transparency,\n                optionalContentConfig\n              });\n              internalRenderTask.operatorListChanged();\n            }).catch(complete);\n            return renderTask;\n          }\n\n          getOperatorList() {\n            let {\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            function operatorListChanged() {\n              if (intentState.operatorList.lastChunk) {\n                intentState.opListReadCapability.resolve(intentState.operatorList);\n                intentState.renderTasks.delete(opListTask);\n              }\n            }\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, true);\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            let opListTask;\n\n            if (!intentState.opListReadCapability) {\n              opListTask = Object.create(null);\n              opListTask.operatorListChanged = operatorListChanged;\n              intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n              (intentState.renderTasks ||= new Set()).add(opListTask);\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            return intentState.opListReadCapability.promise;\n          }\n\n          streamTextContent() {\n            let {\n              normalizeWhitespace = false,\n              disableCombineTextItems = false,\n              includeMarkedContent = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            const TEXT_CONTENT_CHUNK_SIZE = 100;\n            return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n              pageIndex: this._pageIndex,\n              normalizeWhitespace: normalizeWhitespace === true,\n              combineTextItems: disableCombineTextItems !== true,\n              includeMarkedContent: includeMarkedContent === true\n            }, {\n              highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n              size(textContent) {\n                return textContent.items.length;\n              }\n\n            });\n          }\n\n          getTextContent() {\n            let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this._transport._htmlForXfa) {\n              return this.getXfa().then(xfa => {\n                return _xfa_text.XfaText.textContent(xfa);\n              });\n            }\n\n            const readableStream = this.streamTextContent(params);\n            return new Promise(function (resolve, reject) {\n              function pump() {\n                reader.read().then(function (_ref10) {\n                  let {\n                    value,\n                    done\n                  } = _ref10;\n\n                  if (done) {\n                    resolve(textContent);\n                    return;\n                  }\n\n                  Object.assign(textContent.styles, value.styles);\n                  textContent.items.push(...value.items);\n                  pump();\n                }, reject);\n              }\n\n              const reader = readableStream.getReader();\n              const textContent = {\n                items: [],\n                styles: Object.create(null)\n              };\n              pump();\n            });\n          }\n\n          getStructTree() {\n            return this._structTreePromise ||= this._transport.getStructTree(this._pageIndex);\n          }\n\n          _destroy() {\n            this.destroyed = true;\n            this._transport.pageCache[this._pageIndex] = null;\n            const waitOn = [];\n\n            for (const intentState of this._intentStates.values()) {\n              this._abortOperatorList({\n                intentState,\n                reason: new Error(\"Page was destroyed.\"),\n                force: true\n              });\n\n              if (intentState.opListReadCapability) {\n                continue;\n              }\n\n              for (const internalRenderTask of intentState.renderTasks) {\n                waitOn.push(internalRenderTask.completed);\n                internalRenderTask.cancel();\n              }\n            }\n\n            this.objs.clear();\n\n            this._annotationPromises.clear();\n\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n            this.pendingCleanup = false;\n            return Promise.all(waitOn);\n          }\n\n          cleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            this.pendingCleanup = true;\n            return this._tryCleanup(resetStats);\n          }\n\n          _tryCleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.pendingCleanup) {\n              return false;\n            }\n\n            for (const {\n              renderTasks,\n              operatorList\n            } of this._intentStates.values()) {\n              if (renderTasks.size > 0 || !operatorList.lastChunk) {\n                return false;\n              }\n            }\n\n            this._intentStates.clear();\n\n            this.objs.clear();\n\n            this._annotationPromises.clear();\n\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n\n            if (resetStats && this._stats) {\n              this._stats = new _display_utils.StatTimer();\n            }\n\n            this.pendingCleanup = false;\n            return true;\n          }\n\n          _startRenderPage(transparency, cacheKey) {\n            const intentState = this._intentStates.get(cacheKey);\n\n            if (!intentState) {\n              return;\n            }\n\n            if (this._stats) {\n              this._stats.timeEnd(\"Page Request\");\n            }\n\n            if (intentState.displayReadyCapability) {\n              intentState.displayReadyCapability.resolve(transparency);\n            }\n          }\n\n          _renderPageChunk(operatorListChunk, intentState) {\n            for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n              intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n              intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n            }\n\n            intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n\n            if (operatorListChunk.lastChunk) {\n              this._tryCleanup();\n            }\n          }\n\n          _pumpOperatorList(_ref11) {\n            let {\n              renderingIntent,\n              cacheKey\n            } = _ref11;\n\n            const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n              pageIndex: this._pageIndex,\n              intent: renderingIntent,\n              cacheKey,\n              annotationStorage: renderingIntent & _util.RenderingIntentFlag.ANNOTATIONS_STORAGE ? this._transport.annotationStorage.serializable : null\n            });\n\n            const reader = readableStream.getReader();\n\n            const intentState = this._intentStates.get(cacheKey);\n\n            intentState.streamReader = reader;\n\n            const pump = () => {\n              reader.read().then(_ref12 => {\n                let {\n                  value,\n                  done\n                } = _ref12;\n\n                if (done) {\n                  intentState.streamReader = null;\n                  return;\n                }\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                this._renderPageChunk(value, intentState);\n\n                pump();\n              }, reason => {\n                intentState.streamReader = null;\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                if (intentState.operatorList) {\n                  intentState.operatorList.lastChunk = true;\n\n                  for (const internalRenderTask of intentState.renderTasks) {\n                    internalRenderTask.operatorListChanged();\n                  }\n\n                  this._tryCleanup();\n                }\n\n                if (intentState.displayReadyCapability) {\n                  intentState.displayReadyCapability.reject(reason);\n                } else if (intentState.opListReadCapability) {\n                  intentState.opListReadCapability.reject(reason);\n                } else {\n                  throw reason;\n                }\n              });\n            };\n\n            pump();\n          }\n\n          _abortOperatorList(_ref13) {\n            let {\n              intentState,\n              reason,\n              force = false\n            } = _ref13;\n\n            if (!intentState.streamReader) {\n              return;\n            }\n\n            if (!force) {\n              if (intentState.renderTasks.size > 0) {\n                return;\n              }\n\n              if (reason instanceof _display_utils.RenderingCancelledException) {\n                intentState.streamReaderCancelTimeout = setTimeout(() => {\n                  this._abortOperatorList({\n                    intentState,\n                    reason,\n                    force: true\n                  });\n\n                  intentState.streamReaderCancelTimeout = null;\n                }, RENDERING_CANCELLED_TIMEOUT);\n                return;\n              }\n            }\n\n            intentState.streamReader.cancel(new _util.AbortException(reason.message)).catch(() => {});\n            intentState.streamReader = null;\n\n            if (this._transport.destroyed) {\n              return;\n            }\n\n            for (const [curCacheKey, curIntentState] of this._intentStates) {\n              if (curIntentState === intentState) {\n                this._intentStates.delete(curCacheKey);\n\n                break;\n              }\n            }\n\n            this.cleanup();\n          }\n\n          get stats() {\n            return this._stats;\n          }\n\n        }\n\n        exports.PDFPageProxy = PDFPageProxy;\n\n        class LoopbackPort {\n          constructor() {\n            this._listeners = [];\n            this._deferred = Promise.resolve(undefined);\n          }\n\n          postMessage(obj, transfers) {\n            function cloneValue(value) {\n              if (typeof value === \"function\" || typeof value === \"symbol\" || value instanceof URL) {\n                throw new Error(`LoopbackPort.postMessage - cannot clone: ${value?.toString()}`);\n              }\n\n              if (typeof value !== \"object\" || value === null) {\n                return value;\n              }\n\n              if (cloned.has(value)) {\n                return cloned.get(value);\n              }\n\n              let buffer, result;\n\n              if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n                if (transfers?.includes(buffer)) {\n                  result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n                } else {\n                  result = new value.constructor(value);\n                }\n\n                cloned.set(value, result);\n                return result;\n              }\n\n              if (value instanceof Map) {\n                result = new Map();\n                cloned.set(value, result);\n\n                for (const [key, val] of value) {\n                  result.set(key, cloneValue(val));\n                }\n\n                return result;\n              }\n\n              if (value instanceof Set) {\n                result = new Set();\n                cloned.set(value, result);\n\n                for (const val of value) {\n                  result.add(cloneValue(val));\n                }\n\n                return result;\n              }\n\n              result = Array.isArray(value) ? [] : Object.create(null);\n              cloned.set(value, result);\n\n              for (const i in value) {\n                let desc,\n                    p = value;\n\n                while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n                  p = Object.getPrototypeOf(p);\n                }\n\n                if (typeof desc.value === \"undefined\") {\n                  continue;\n                }\n\n                if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n                  continue;\n                }\n\n                result[i] = cloneValue(desc.value);\n              }\n\n              return result;\n            }\n\n            const cloned = new WeakMap();\n            const event = {\n              data: cloneValue(obj)\n            };\n\n            this._deferred.then(() => {\n              for (const listener of this._listeners) {\n                listener.call(this, event);\n              }\n            });\n          }\n\n          addEventListener(name, listener) {\n            this._listeners.push(listener);\n          }\n\n          removeEventListener(name, listener) {\n            const i = this._listeners.indexOf(listener);\n\n            this._listeners.splice(i, 1);\n          }\n\n          terminate() {\n            this._listeners.length = 0;\n          }\n\n        }\n\n        exports.LoopbackPort = LoopbackPort;\n        const PDFWorkerUtil = {\n          isWorkerDisabled: false,\n          fallbackWorkerSrc: null,\n          fakeWorkerId: 0\n        };\n        {\n          if (_is_node.isNodeJS && typeof require === \"function\") {\n            PDFWorkerUtil.isWorkerDisabled = true;\n            PDFWorkerUtil.fallbackWorkerSrc = \"./pdf.worker.js\";\n          } else if (typeof document === \"object\") {\n            const pdfjsFilePath = document?.currentScript?.src;\n\n            if (pdfjsFilePath) {\n              PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n            }\n          }\n\n          PDFWorkerUtil.createCDNWrapper = function (url) {\n            const wrapper = `importScripts(\"${url}\");`;\n            return URL.createObjectURL(new Blob([wrapper]));\n          };\n        }\n\n        class PDFWorker {\n          static get _workerPorts() {\n            return (0, _util.shadow)(this, \"_workerPorts\", new WeakMap());\n          }\n\n          constructor() {\n            let {\n              name = null,\n              port = null,\n              verbosity = (0, _util.getVerbosityLevel)()\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (port && PDFWorker._workerPorts.has(port)) {\n              throw new Error(\"Cannot use more than one PDFWorker per port.\");\n            }\n\n            this.name = name;\n            this.destroyed = false;\n            this.postMessageTransfers = true;\n            this.verbosity = verbosity;\n            this._readyCapability = (0, _util.createPromiseCapability)();\n            this._port = null;\n            this._webWorker = null;\n            this._messageHandler = null;\n\n            if (port) {\n              PDFWorker._workerPorts.set(port, this);\n\n              this._initializeFromPort(port);\n\n              return;\n            }\n\n            this._initialize();\n          }\n\n          get promise() {\n            return this._readyCapability.promise;\n          }\n\n          get port() {\n            return this._port;\n          }\n\n          get messageHandler() {\n            return this._messageHandler;\n          }\n\n          _initializeFromPort(port) {\n            this._port = port;\n            this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n            this._messageHandler.on(\"ready\", function () {});\n\n            this._readyCapability.resolve();\n          }\n\n          _initialize() {\n            if (typeof Worker !== \"undefined\" && !PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {\n              let workerSrc = PDFWorker.workerSrc;\n\n              try {\n                if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n                  workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);\n                }\n\n                const worker = new Worker(workerSrc);\n                const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n                const terminateEarly = () => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n                  messageHandler.destroy();\n                  worker.terminate();\n\n                  if (this.destroyed) {\n                    this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                  } else {\n                    this._setupFakeWorker();\n                  }\n                };\n\n                const onWorkerError = () => {\n                  if (!this._webWorker) {\n                    terminateEarly();\n                  }\n                };\n\n                worker.addEventListener(\"error\", onWorkerError);\n                messageHandler.on(\"test\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  if (data) {\n                    this._messageHandler = messageHandler;\n                    this._port = worker;\n                    this._webWorker = worker;\n\n                    if (!data.supportTransfers) {\n                      this.postMessageTransfers = false;\n                    }\n\n                    this._readyCapability.resolve();\n\n                    messageHandler.send(\"configure\", {\n                      verbosity: this.verbosity\n                    });\n                  } else {\n                    this._setupFakeWorker();\n\n                    messageHandler.destroy();\n                    worker.terminate();\n                  }\n                });\n                messageHandler.on(\"ready\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  try {\n                    sendTest();\n                  } catch (e) {\n                    this._setupFakeWorker();\n                  }\n                });\n\n                const sendTest = () => {\n                  const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n\n                  try {\n                    messageHandler.send(\"test\", testObj, [testObj.buffer]);\n                  } catch (ex) {\n                    (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                    testObj[0] = 0;\n                    messageHandler.send(\"test\", testObj);\n                  }\n                };\n\n                sendTest();\n                return;\n              } catch (e) {\n                (0, _util.info)(\"The worker has been disabled.\");\n              }\n            }\n\n            this._setupFakeWorker();\n          }\n\n          _setupFakeWorker() {\n            if (!PDFWorkerUtil.isWorkerDisabled) {\n              (0, _util.warn)(\"Setting up fake worker.\");\n              PDFWorkerUtil.isWorkerDisabled = true;\n            }\n\n            PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {\n              if (this.destroyed) {\n                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n                return;\n              }\n\n              const port = new LoopbackPort();\n              this._port = port;\n              const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n              const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n              WorkerMessageHandler.setup(workerHandler, port);\n              const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n              this._messageHandler = messageHandler;\n\n              this._readyCapability.resolve();\n\n              messageHandler.send(\"configure\", {\n                verbosity: this.verbosity\n              });\n            }).catch(reason => {\n              this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n            });\n          }\n\n          destroy() {\n            this.destroyed = true;\n\n            if (this._webWorker) {\n              this._webWorker.terminate();\n\n              this._webWorker = null;\n            }\n\n            PDFWorker._workerPorts.delete(this._port);\n\n            this._port = null;\n\n            if (this._messageHandler) {\n              this._messageHandler.destroy();\n\n              this._messageHandler = null;\n            }\n          }\n\n          static fromPort(params) {\n            if (!params?.port) {\n              throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n            }\n\n            if (this._workerPorts.has(params.port)) {\n              return this._workerPorts.get(params.port);\n            }\n\n            return new PDFWorker(params);\n          }\n\n          static get workerSrc() {\n            if (_worker_options.GlobalWorkerOptions.workerSrc) {\n              return _worker_options.GlobalWorkerOptions.workerSrc;\n            }\n\n            if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n              if (!_is_node.isNodeJS) {\n                (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n              }\n\n              return PDFWorkerUtil.fallbackWorkerSrc;\n            }\n\n            throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n          }\n\n          static get _mainThreadWorkerMessageHandler() {\n            try {\n              return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n            } catch (ex) {\n              return null;\n            }\n          }\n\n          static get _setupFakeWorkerGlobal() {\n            const loader = async () => {\n              const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n              if (mainWorkerMessageHandler) {\n                return mainWorkerMessageHandler;\n              }\n\n              if (_is_node.isNodeJS && typeof require === \"function\") {\n                const worker = eval(\"require\")(this.workerSrc);\n                return worker.WorkerMessageHandler;\n              }\n\n              await (0, _display_utils.loadScript)(this.workerSrc);\n              return window.pdfjsWorker.WorkerMessageHandler;\n            };\n\n            return (0, _util.shadow)(this, \"_setupFakeWorkerGlobal\", loader());\n          }\n\n        }\n\n        exports.PDFWorker = PDFWorker;\n        {\n          PDFWorker.getWorkerSrc = function () {\n            (0, _display_utils.deprecated)(\"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\");\n            return this.workerSrc;\n          };\n        }\n\n        class WorkerTransport {\n          constructor(messageHandler, loadingTask, networkStream, params) {\n            this.messageHandler = messageHandler;\n            this.loadingTask = loadingTask;\n            this.commonObjs = new PDFObjects();\n            this.fontLoader = new _font_loader.FontLoader({\n              docId: loadingTask.docId,\n              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n              ownerDocument: params.ownerDocument,\n              styleElement: params.styleElement\n            });\n            this._params = params;\n\n            if (!params.useWorkerFetch) {\n              this.CMapReaderFactory = new params.CMapReaderFactory({\n                baseUrl: params.cMapUrl,\n                isCompressed: params.cMapPacked\n              });\n              this.StandardFontDataFactory = new params.StandardFontDataFactory({\n                baseUrl: params.standardFontDataUrl\n              });\n            }\n\n            this.destroyed = false;\n            this.destroyCapability = null;\n            this._passwordCapability = null;\n            this._networkStream = networkStream;\n            this._fullReader = null;\n            this._lastProgress = null;\n            this.pageCache = [];\n            this.pagePromises = [];\n            this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n            this.setupMessageHandler();\n          }\n\n          get annotationStorage() {\n            return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n          }\n\n          getRenderingIntent(intent) {\n            let annotationMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _util.AnnotationMode.ENABLE;\n            let isOpList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let renderingIntent = _util.RenderingIntentFlag.DISPLAY;\n            let lastModified = \"\";\n\n            switch (intent) {\n              case \"any\":\n                renderingIntent = _util.RenderingIntentFlag.ANY;\n                break;\n\n              case \"display\":\n                break;\n\n              case \"print\":\n                renderingIntent = _util.RenderingIntentFlag.PRINT;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid intent: ${intent}`);\n            }\n\n            switch (annotationMode) {\n              case _util.AnnotationMode.DISABLE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;\n                break;\n\n              case _util.AnnotationMode.ENABLE:\n                break;\n\n              case _util.AnnotationMode.ENABLE_FORMS:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;\n                break;\n\n              case _util.AnnotationMode.ENABLE_STORAGE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;\n                lastModified = this.annotationStorage.lastModified;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n            }\n\n            if (isOpList) {\n              renderingIntent += _util.RenderingIntentFlag.OPLIST;\n            }\n\n            return {\n              renderingIntent,\n              cacheKey: `${renderingIntent}_${lastModified}`\n            };\n          }\n\n          destroy() {\n            if (this.destroyCapability) {\n              return this.destroyCapability.promise;\n            }\n\n            this.destroyed = true;\n            this.destroyCapability = (0, _util.createPromiseCapability)();\n\n            if (this._passwordCapability) {\n              this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n            }\n\n            const waitOn = [];\n\n            for (const page of this.pageCache) {\n              if (page) {\n                waitOn.push(page._destroy());\n              }\n            }\n\n            this.pageCache.length = 0;\n            this.pagePromises.length = 0;\n\n            if (this.hasOwnProperty(\"annotationStorage\")) {\n              this.annotationStorage.resetModified();\n            }\n\n            const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n            waitOn.push(terminated);\n            Promise.all(waitOn).then(() => {\n              this.commonObjs.clear();\n              this.fontLoader.clear();\n              this._getFieldObjectsPromise = null;\n              this._hasJSActionsPromise = null;\n\n              if (this._networkStream) {\n                this._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n              }\n\n              if (this.messageHandler) {\n                this.messageHandler.destroy();\n                this.messageHandler = null;\n              }\n\n              this.destroyCapability.resolve();\n            }, this.destroyCapability.reject);\n            return this.destroyCapability.promise;\n          }\n\n          setupMessageHandler() {\n            const {\n              messageHandler,\n              loadingTask\n            } = this;\n            messageHandler.on(\"GetReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n              this._fullReader = this._networkStream.getFullReader();\n\n              this._fullReader.onProgress = evt => {\n                this._lastProgress = {\n                  loaded: evt.loaded,\n                  total: evt.total\n                };\n              };\n\n              sink.onPull = () => {\n                this._fullReader.read().then(function (_ref14) {\n                  let {\n                    value,\n                    done\n                  } = _ref14;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                this._fullReader.cancel(reason);\n\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"ReaderHeadersReady\", data => {\n              const headersCapability = (0, _util.createPromiseCapability)();\n              const fullReader = this._fullReader;\n              fullReader.headersReady.then(() => {\n                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                  if (this._lastProgress && loadingTask.onProgress) {\n                    loadingTask.onProgress(this._lastProgress);\n                  }\n\n                  fullReader.onProgress = evt => {\n                    if (loadingTask.onProgress) {\n                      loadingTask.onProgress({\n                        loaded: evt.loaded,\n                        total: evt.total\n                      });\n                    }\n                  };\n                }\n\n                headersCapability.resolve({\n                  isStreamingSupported: fullReader.isStreamingSupported,\n                  isRangeSupported: fullReader.isRangeSupported,\n                  contentLength: fullReader.contentLength\n                });\n              }, headersCapability.reject);\n              return headersCapability.promise;\n            });\n            messageHandler.on(\"GetRangeReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n              const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n              if (!rangeReader) {\n                sink.close();\n                return;\n              }\n\n              sink.onPull = () => {\n                rangeReader.read().then(function (_ref15) {\n                  let {\n                    value,\n                    done\n                  } = _ref15;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                rangeReader.cancel(reason);\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"GetDoc\", _ref16 => {\n              let {\n                pdfInfo\n              } = _ref16;\n              this._numPages = pdfInfo.numPages;\n              this._htmlForXfa = pdfInfo.htmlForXfa;\n              delete pdfInfo.htmlForXfa;\n\n              loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n            });\n            messageHandler.on(\"DocException\", function (ex) {\n              let reason;\n\n              switch (ex.name) {\n                case \"PasswordException\":\n                  reason = new _util.PasswordException(ex.message, ex.code);\n                  break;\n\n                case \"InvalidPDFException\":\n                  reason = new _util.InvalidPDFException(ex.message);\n                  break;\n\n                case \"MissingPDFException\":\n                  reason = new _util.MissingPDFException(ex.message);\n                  break;\n\n                case \"UnexpectedResponseException\":\n                  reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n                  break;\n\n                case \"UnknownErrorException\":\n                  reason = new _util.UnknownErrorException(ex.message, ex.details);\n                  break;\n\n                default:\n                  (0, _util.unreachable)(\"DocException - expected a valid Error.\");\n              }\n\n              loadingTask._capability.reject(reason);\n            });\n            messageHandler.on(\"PasswordRequest\", exception => {\n              this._passwordCapability = (0, _util.createPromiseCapability)();\n\n              if (loadingTask.onPassword) {\n                const updatePassword = password => {\n                  this._passwordCapability.resolve({\n                    password\n                  });\n                };\n\n                try {\n                  loadingTask.onPassword(updatePassword, exception.code);\n                } catch (ex) {\n                  this._passwordCapability.reject(ex);\n                }\n              } else {\n                this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n              }\n\n              return this._passwordCapability.promise;\n            });\n            messageHandler.on(\"DataLoaded\", data => {\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.length,\n                  total: data.length\n                });\n              }\n\n              this.downloadInfoCapability.resolve(data);\n            });\n            messageHandler.on(\"StartRenderPage\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const page = this.pageCache[data.pageIndex];\n\n              page._startRenderPage(data.transparency, data.cacheKey);\n            });\n            messageHandler.on(\"commonobj\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const [id, type, exportedData] = data;\n\n              if (this.commonObjs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Font\":\n                  const params = this._params;\n\n                  if (\"error\" in exportedData) {\n                    const exportedError = exportedData.error;\n                    (0, _util.warn)(`Error during font loading: ${exportedError}`);\n                    this.commonObjs.resolve(id, exportedError);\n                    break;\n                  }\n\n                  let fontRegistry = null;\n\n                  if (params.pdfBug && globalThis.FontInspector?.enabled) {\n                    fontRegistry = {\n                      registerFont(font, url) {\n                        globalThis.FontInspector.fontAdded(font, url);\n                      }\n\n                    };\n                  }\n\n                  const font = new _font_loader.FontFaceObject(exportedData, {\n                    isEvalSupported: params.isEvalSupported,\n                    disableFontFace: params.disableFontFace,\n                    ignoreErrors: params.ignoreErrors,\n                    onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n                    fontRegistry\n                  });\n                  this.fontLoader.bind(font).catch(reason => {\n                    return messageHandler.sendWithPromise(\"FontFallback\", {\n                      id\n                    });\n                  }).finally(() => {\n                    if (!params.fontExtraProperties && font.data) {\n                      font.data = null;\n                    }\n\n                    this.commonObjs.resolve(id, font);\n                  });\n                  break;\n\n                case \"FontPath\":\n                case \"Image\":\n                  this.commonObjs.resolve(id, exportedData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown common object type ${type}`);\n              }\n            });\n            messageHandler.on(\"obj\", data => {\n              if (this.destroyed) {\n                return undefined;\n              }\n\n              const [id, pageIndex, type, imageData] = data;\n              const pageProxy = this.pageCache[pageIndex];\n\n              if (pageProxy.objs.has(id)) {\n                return undefined;\n              }\n\n              switch (type) {\n                case \"Image\":\n                  pageProxy.objs.resolve(id, imageData);\n                  const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n                  if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n                    pageProxy.cleanupAfterRender = true;\n                  }\n\n                  break;\n\n                case \"Pattern\":\n                  pageProxy.objs.resolve(id, imageData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown object type ${type}`);\n              }\n\n              return undefined;\n            });\n            messageHandler.on(\"DocProgress\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.loaded,\n                  total: data.total\n                });\n              }\n            });\n            messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n            messageHandler.on(\"FetchBuiltInCMap\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.CMapReaderFactory) {\n                return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.CMapReaderFactory.fetch(data);\n            });\n            messageHandler.on(\"FetchStandardFontData\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.StandardFontDataFactory) {\n                return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.StandardFontDataFactory.fetch(data);\n            });\n          }\n\n          _onUnsupportedFeature(_ref17) {\n            let {\n              featureId\n            } = _ref17;\n\n            if (this.destroyed) {\n              return;\n            }\n\n            if (this.loadingTask.onUnsupportedFeature) {\n              this.loadingTask.onUnsupportedFeature(featureId);\n            }\n          }\n\n          getData() {\n            return this.messageHandler.sendWithPromise(\"GetData\", null);\n          }\n\n          getPage(pageNumber) {\n            if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n              return Promise.reject(new Error(\"Invalid page request\"));\n            }\n\n            const pageIndex = pageNumber - 1;\n\n            if (pageIndex in this.pagePromises) {\n              return this.pagePromises[pageIndex];\n            }\n\n            const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n              pageIndex\n            }).then(pageInfo => {\n              if (this.destroyed) {\n                throw new Error(\"Transport destroyed\");\n              }\n\n              const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n              this.pageCache[pageIndex] = page;\n              return page;\n            });\n            this.pagePromises[pageIndex] = promise;\n            return promise;\n          }\n\n          getPageIndex(ref) {\n            return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n              ref\n            });\n          }\n\n          getAnnotations(pageIndex, intent) {\n            return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n              pageIndex,\n              intent\n            });\n          }\n\n          saveDocument() {\n            return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n              isPureXfa: !!this._htmlForXfa,\n              numPages: this._numPages,\n              annotationStorage: this.annotationStorage.serializable,\n              filename: this._fullReader?.filename ?? null\n            }).finally(() => {\n              this.annotationStorage.resetModified();\n            });\n          }\n\n          getFieldObjects() {\n            return this._getFieldObjectsPromise ||= this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n          }\n\n          hasJSActions() {\n            return this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\"HasJSActions\", null);\n          }\n\n          getCalculationOrderIds() {\n            return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n          }\n\n          getDestinations() {\n            return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n          }\n\n          getDestination(id) {\n            if (typeof id !== \"string\") {\n              return Promise.reject(new Error(\"Invalid destination request.\"));\n            }\n\n            return this.messageHandler.sendWithPromise(\"GetDestination\", {\n              id\n            });\n          }\n\n          getPageLabels() {\n            return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n          }\n\n          getPageLayout() {\n            return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n          }\n\n          getPageMode() {\n            return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n          }\n\n          getViewerPreferences() {\n            return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n          }\n\n          getOpenAction() {\n            return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n          }\n\n          getAttachments() {\n            return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n          }\n\n          getJavaScript() {\n            return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n          }\n\n          getDocJSActions() {\n            return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n          }\n\n          getPageJSActions(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n              pageIndex\n            });\n          }\n\n          getStructTree(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n              pageIndex\n            });\n          }\n\n          getOutline() {\n            return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n          }\n\n          getOptionalContentConfig() {\n            return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n              return new _optional_content_config.OptionalContentConfig(results);\n            });\n          }\n\n          getPermissions() {\n            return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n          }\n\n          getMetadata() {\n            return this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(results => {\n              return {\n                info: results[0],\n                metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n                contentDispositionFilename: this._fullReader?.filename ?? null,\n                contentLength: this._fullReader?.contentLength ?? null\n              };\n            });\n          }\n\n          getMarkInfo() {\n            return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n          }\n\n          getStats() {\n            return this.messageHandler.sendWithPromise(\"GetStats\", null);\n          }\n\n          async startCleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n            if (this.destroyed) {\n              return;\n            }\n\n            for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n              const page = this.pageCache[i];\n\n              if (!page) {\n                continue;\n              }\n\n              const cleanupSuccessful = page.cleanup();\n\n              if (!cleanupSuccessful) {\n                throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n              }\n            }\n\n            this.commonObjs.clear();\n\n            if (!keepLoadedFonts) {\n              this.fontLoader.clear();\n            }\n\n            this._getFieldObjectsPromise = null;\n            this._hasJSActionsPromise = null;\n          }\n\n          get loadingParams() {\n            const params = this._params;\n            return (0, _util.shadow)(this, \"loadingParams\", {\n              disableAutoFetch: params.disableAutoFetch,\n              enableXfa: params.enableXfa\n            });\n          }\n\n        }\n\n        class PDFObjects {\n          constructor() {\n            this._objs = Object.create(null);\n          }\n\n          _ensureObj(objId) {\n            if (this._objs[objId]) {\n              return this._objs[objId];\n            }\n\n            return this._objs[objId] = {\n              capability: (0, _util.createPromiseCapability)(),\n              data: null,\n              resolved: false\n            };\n          }\n\n          get(objId) {\n            let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (callback) {\n              this._ensureObj(objId).capability.promise.then(callback);\n\n              return null;\n            }\n\n            const obj = this._objs[objId];\n\n            if (!obj || !obj.resolved) {\n              throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n            }\n\n            return obj.data;\n          }\n\n          has(objId) {\n            const obj = this._objs[objId];\n            return obj?.resolved || false;\n          }\n\n          resolve(objId, data) {\n            const obj = this._ensureObj(objId);\n\n            obj.resolved = true;\n            obj.data = data;\n            obj.capability.resolve(data);\n          }\n\n          clear() {\n            this._objs = Object.create(null);\n          }\n\n        }\n\n        class RenderTask {\n          constructor(internalRenderTask) {\n            this._internalRenderTask = internalRenderTask;\n            this.onContinue = null;\n          }\n\n          get promise() {\n            return this._internalRenderTask.capability.promise;\n          }\n\n          cancel() {\n            this._internalRenderTask.cancel();\n          }\n\n        }\n\n        exports.RenderTask = RenderTask;\n\n        class InternalRenderTask {\n          static get canvasInUse() {\n            return (0, _util.shadow)(this, \"canvasInUse\", new WeakSet());\n          }\n\n          constructor(_ref18) {\n            let {\n              callback,\n              params,\n              objs,\n              commonObjs,\n              operatorList,\n              pageIndex,\n              canvasFactory,\n              useRequestAnimationFrame = false,\n              pdfBug = false\n            } = _ref18;\n            this.callback = callback;\n            this.params = params;\n            this.objs = objs;\n            this.commonObjs = commonObjs;\n            this.operatorListIdx = null;\n            this.operatorList = operatorList;\n            this._pageIndex = pageIndex;\n            this.canvasFactory = canvasFactory;\n            this._pdfBug = pdfBug;\n            this.running = false;\n            this.graphicsReadyCallback = null;\n            this.graphicsReady = false;\n            this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n            this.cancelled = false;\n            this.capability = (0, _util.createPromiseCapability)();\n            this.task = new RenderTask(this);\n            this._cancelBound = this.cancel.bind(this);\n            this._continueBound = this._continue.bind(this);\n            this._scheduleNextBound = this._scheduleNext.bind(this);\n            this._nextBound = this._next.bind(this);\n            this._canvas = params.canvasContext.canvas;\n          }\n\n          get completed() {\n            return this.capability.promise.catch(function () {});\n          }\n\n          initializeGraphics(_ref19) {\n            let {\n              transparency = false,\n              optionalContentConfig\n            } = _ref19;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this._canvas) {\n              if (InternalRenderTask.canvasInUse.has(this._canvas)) {\n                throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n              }\n\n              InternalRenderTask.canvasInUse.add(this._canvas);\n            }\n\n            if (this._pdfBug && globalThis.StepperManager?.enabled) {\n              this.stepper = globalThis.StepperManager.create(this._pageIndex);\n              this.stepper.init(this.operatorList);\n              this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n            }\n\n            const {\n              canvasContext,\n              viewport,\n              transform,\n              imageLayer,\n              background\n            } = this.params;\n            this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, imageLayer, optionalContentConfig);\n            this.gfx.beginDrawing({\n              transform,\n              viewport,\n              transparency,\n              background\n            });\n            this.operatorListIdx = 0;\n            this.graphicsReady = true;\n\n            if (this.graphicsReadyCallback) {\n              this.graphicsReadyCallback();\n            }\n          }\n\n          cancel() {\n            let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            this.running = false;\n            this.cancelled = true;\n\n            if (this.gfx) {\n              this.gfx.endDrawing();\n            }\n\n            if (this._canvas) {\n              InternalRenderTask.canvasInUse.delete(this._canvas);\n            }\n\n            this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, \"canvas\"));\n          }\n\n          operatorListChanged() {\n            if (!this.graphicsReady) {\n              if (!this.graphicsReadyCallback) {\n                this.graphicsReadyCallback = this._continueBound;\n              }\n\n              return;\n            }\n\n            if (this.stepper) {\n              this.stepper.updateOperatorList(this.operatorList);\n            }\n\n            if (this.running) {\n              return;\n            }\n\n            this._continue();\n          }\n\n          _continue() {\n            this.running = true;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this.task.onContinue) {\n              this.task.onContinue(this._scheduleNextBound);\n            } else {\n              this._scheduleNext();\n            }\n          }\n\n          _scheduleNext() {\n            if (this._useRequestAnimationFrame) {\n              window.requestAnimationFrame(() => {\n                this._nextBound().catch(this._cancelBound);\n              });\n            } else {\n              Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n            }\n          }\n\n          async _next() {\n            if (this.cancelled) {\n              return;\n            }\n\n            this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n            if (this.operatorListIdx === this.operatorList.argsArray.length) {\n              this.running = false;\n\n              if (this.operatorList.lastChunk) {\n                this.gfx.endDrawing();\n\n                if (this._canvas) {\n                  InternalRenderTask.canvasInUse.delete(this._canvas);\n                }\n\n                this.callback();\n              }\n            }\n          }\n\n        }\n\n        const version = '2.11.338';\n        exports.version = version;\n        const build = 'dedff3c98';\n        exports.build = build;\n        /***/\n      },\n      /* 7 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontLoader = exports.FontFaceObject = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseFontLoader {\n          constructor(_ref20) {\n            let {\n              docId,\n              onUnsupportedFeature,\n              ownerDocument = globalThis.document,\n              styleElement = null\n            } = _ref20;\n\n            if (this.constructor === BaseFontLoader) {\n              (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n            }\n\n            this.docId = docId;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this._document = ownerDocument;\n            this.nativeFontFaces = [];\n            this.styleElement = null;\n          }\n\n          addNativeFontFace(nativeFontFace) {\n            this.nativeFontFaces.push(nativeFontFace);\n\n            this._document.fonts.add(nativeFontFace);\n          }\n\n          insertRule(rule) {\n            let styleElement = this.styleElement;\n\n            if (!styleElement) {\n              styleElement = this.styleElement = this._document.createElement(\"style\");\n              styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n              this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n            }\n\n            const styleSheet = styleElement.sheet;\n            styleSheet.insertRule(rule, styleSheet.cssRules.length);\n          }\n\n          clear() {\n            for (const nativeFontFace of this.nativeFontFaces) {\n              this._document.fonts.delete(nativeFontFace);\n            }\n\n            this.nativeFontFaces.length = 0;\n\n            if (this.styleElement) {\n              this.styleElement.remove();\n              this.styleElement = null;\n            }\n          }\n\n          async bind(font) {\n            if (font.attached || font.missingFile) {\n              return;\n            }\n\n            font.attached = true;\n\n            if (this.isFontLoadingAPISupported) {\n              const nativeFontFace = font.createNativeFontFace();\n\n              if (nativeFontFace) {\n                this.addNativeFontFace(nativeFontFace);\n\n                try {\n                  await nativeFontFace.loaded;\n                } catch (ex) {\n                  this._onUnsupportedFeature({\n                    featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n                  });\n\n                  (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n                  font.disableFontFace = true;\n                  throw ex;\n                }\n              }\n\n              return;\n            }\n\n            const rule = font.createFontFaceRule();\n\n            if (rule) {\n              this.insertRule(rule);\n\n              if (this.isSyncFontLoadingSupported) {\n                return;\n              }\n\n              await new Promise(resolve => {\n                const request = this._queueLoadingCallback(resolve);\n\n                this._prepareFontLoadEvent([rule], [font], request);\n              });\n            }\n          }\n\n          _queueLoadingCallback(callback) {\n            (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n          }\n\n          get isFontLoadingAPISupported() {\n            const hasFonts = !!this._document?.fonts;\n            return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", hasFonts);\n          }\n\n          get isSyncFontLoadingSupported() {\n            (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n          }\n\n          get _loadTestFont() {\n            (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n          }\n\n          _prepareFontLoadEvent(rules, fontsToLoad, request) {\n            (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n          }\n\n        }\n\n        let FontLoader;\n        exports.FontLoader = FontLoader;\n        {\n          exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n            constructor(params) {\n              super(params);\n              this.loadingContext = {\n                requests: [],\n                nextRequestId: 0\n              };\n              this.loadTestFontId = 0;\n            }\n\n            get isSyncFontLoadingSupported() {\n              let supported = false;\n\n              if (typeof navigator === \"undefined\") {\n                supported = true;\n              } else {\n                const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n                if (m?.[1] >= 14) {\n                  supported = true;\n                }\n              }\n\n              return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n            }\n\n            _queueLoadingCallback(callback) {\n              function completeRequest() {\n                (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n                request.done = true;\n\n                while (context.requests.length > 0 && context.requests[0].done) {\n                  const otherRequest = context.requests.shift();\n                  setTimeout(otherRequest.callback, 0);\n                }\n              }\n\n              const context = this.loadingContext;\n              const request = {\n                id: `pdfjs-font-loading-${context.nextRequestId++}`,\n                done: false,\n                complete: completeRequest,\n                callback\n              };\n              context.requests.push(request);\n              return request;\n            }\n\n            get _loadTestFont() {\n              const getLoadTestFont = function () {\n                return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n              };\n\n              return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n            }\n\n            _prepareFontLoadEvent(rules, fonts, request) {\n              function int32(data, offset) {\n                return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n              }\n\n              function spliceString(s, offset, remove, insert) {\n                const chunk1 = s.substring(0, offset);\n                const chunk2 = s.substring(offset + remove);\n                return chunk1 + insert + chunk2;\n              }\n\n              let i, ii;\n\n              const canvas = this._document.createElement(\"canvas\");\n\n              canvas.width = 1;\n              canvas.height = 1;\n              const ctx = canvas.getContext(\"2d\");\n              let called = 0;\n\n              function isFontReady(name, callback) {\n                called++;\n\n                if (called > 30) {\n                  (0, _util.warn)(\"Load test font never loaded.\");\n                  callback();\n                  return;\n                }\n\n                ctx.font = \"30px \" + name;\n                ctx.fillText(\".\", 0, 20);\n                const imageData = ctx.getImageData(0, 0, 1, 1);\n\n                if (imageData.data[3] > 0) {\n                  callback();\n                  return;\n                }\n\n                setTimeout(isFontReady.bind(null, name, callback));\n              }\n\n              const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n              let data = this._loadTestFont;\n              const COMMENT_OFFSET = 976;\n              data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n              const CFF_CHECKSUM_OFFSET = 16;\n              const XXXX_VALUE = 0x58585858;\n              let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n              for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n              }\n\n              if (i < loadTestFontId.length) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n              }\n\n              data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n              const url = `url(data:font/opentype;base64,${btoa(data)});`;\n              const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n              this.insertRule(rule);\n              const names = [];\n\n              for (const font of fonts) {\n                names.push(font.loadedName);\n              }\n\n              names.push(loadTestFontId);\n\n              const div = this._document.createElement(\"div\");\n\n              div.style.visibility = \"hidden\";\n              div.style.width = div.style.height = \"10px\";\n              div.style.position = \"absolute\";\n              div.style.top = div.style.left = \"0px\";\n\n              for (const name of names) {\n                const span = this._document.createElement(\"span\");\n\n                span.textContent = \"Hi\";\n                span.style.fontFamily = name;\n                div.appendChild(span);\n              }\n\n              this._document.body.appendChild(div);\n\n              isFontReady(loadTestFontId, () => {\n                this._document.body.removeChild(div);\n\n                request.complete();\n              });\n            }\n\n          };\n        }\n\n        class FontFaceObject {\n          constructor(translatedData, _ref21) {\n            let {\n              isEvalSupported = true,\n              disableFontFace = false,\n              ignoreErrors = false,\n              onUnsupportedFeature,\n              fontRegistry = null\n            } = _ref21;\n            this.compiledGlyphs = Object.create(null);\n\n            for (const i in translatedData) {\n              this[i] = translatedData[i];\n            }\n\n            this.isEvalSupported = isEvalSupported !== false;\n            this.disableFontFace = disableFontFace === true;\n            this.ignoreErrors = ignoreErrors === true;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this.fontRegistry = fontRegistry;\n          }\n\n          createNativeFontFace() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            let nativeFontFace;\n\n            if (!this.cssFontInfo) {\n              nativeFontFace = new FontFace(this.loadedName, this.data, {});\n            } else {\n              const css = {\n                weight: this.cssFontInfo.fontWeight\n              };\n\n              if (this.cssFontInfo.italicAngle) {\n                css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n              }\n\n              nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this);\n            }\n\n            return nativeFontFace;\n          }\n\n          createFontFaceRule() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            const data = (0, _util.bytesToString)(this.data);\n            const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n            let rule;\n\n            if (!this.cssFontInfo) {\n              rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n            } else {\n              let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n\n              if (this.cssFontInfo.italicAngle) {\n                css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n              }\n\n              rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this, url);\n            }\n\n            return rule;\n          }\n\n          getPathGenerator(objs, character) {\n            if (this.compiledGlyphs[character] !== undefined) {\n              return this.compiledGlyphs[character];\n            }\n\n            let cmds;\n\n            try {\n              cmds = objs.get(this.loadedName + \"_path_\" + character);\n            } catch (ex) {\n              if (!this.ignoreErrors) {\n                throw ex;\n              }\n\n              this._onUnsupportedFeature({\n                featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n              });\n\n              (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n              return this.compiledGlyphs[character] = function (c, size) {};\n            }\n\n            if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n              const jsBuf = [];\n\n              for (const current of cmds) {\n                const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n                jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n              }\n\n              return this.compiledGlyphs[character] = new Function(\"c\", \"size\", jsBuf.join(\"\"));\n            }\n\n            return this.compiledGlyphs[character] = function (c, size) {\n              for (const current of cmds) {\n                if (current.cmd === \"scale\") {\n                  current.args = [size, -size];\n                }\n\n                c[current.cmd].apply(c, current.args);\n              }\n            };\n          }\n\n        }\n\n        exports.FontFaceObject = FontFaceObject;\n        /***/\n      },\n      /* 8 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NodeStandardFontDataFactory = exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _util = __w_pdfjs_require__(2);\n\n        let NodeCanvasFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n          }\n\n        };\n        exports.NodeCanvasFactory = NodeCanvasFactory;\n        let NodeCMapReaderFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n          }\n\n        };\n        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n        let NodeStandardFontDataFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeStandardFontDataFactory\");\n          }\n\n        };\n        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;\n\n        if (_is_node.isNodeJS) {\n          const fetchData = function (url) {\n            return new Promise((resolve, reject) => {\n              const fs = require(\"fs\");\n\n              fs.readFile(url, (error, data) => {\n                if (error || !data) {\n                  reject(new Error(error));\n                  return;\n                }\n\n                resolve(new Uint8Array(data));\n              });\n            });\n          };\n\n          exports.NodeCanvasFactory = NodeCanvasFactory = class extends _base_factory.BaseCanvasFactory {\n            _createCanvas(width, height) {\n              const Canvas = require(\"canvas\");\n\n              return Canvas.createCanvas(width, height);\n            }\n\n          };\n          exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _base_factory.BaseCMapReaderFactory {\n            _fetchData(url, compressionType) {\n              return fetchData(url).then(data => {\n                return {\n                  cMapData: data,\n                  compressionType\n                };\n              });\n            }\n\n          };\n          exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory = class extends _base_factory.BaseStandardFontDataFactory {\n            _fetchData(url) {\n              return fetchData(url);\n            }\n\n          };\n        }\n        /***/\n\n      },\n      /* 9 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationStorage = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class AnnotationStorage {\n          constructor() {\n            this._storage = new Map();\n            this._timeStamp = Date.now();\n            this._modified = false;\n            this.onSetModified = null;\n            this.onResetModified = null;\n          }\n\n          getValue(key, defaultValue) {\n            const value = this._storage.get(key);\n\n            if (value === undefined) {\n              return defaultValue;\n            }\n\n            return Object.assign(defaultValue, value);\n          }\n\n          setValue(key, value) {\n            const obj = this._storage.get(key);\n\n            let modified = false;\n\n            if (obj !== undefined) {\n              for (const [entry, val] of Object.entries(value)) {\n                if (obj[entry] !== val) {\n                  modified = true;\n                  obj[entry] = val;\n                }\n              }\n            } else {\n              modified = true;\n\n              this._storage.set(key, value);\n            }\n\n            if (modified) {\n              this._timeStamp = Date.now();\n\n              this._setModified();\n            }\n          }\n\n          getAll() {\n            return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;\n          }\n\n          get size() {\n            return this._storage.size;\n          }\n\n          _setModified() {\n            if (!this._modified) {\n              this._modified = true;\n\n              if (typeof this.onSetModified === \"function\") {\n                this.onSetModified();\n              }\n            }\n          }\n\n          resetModified() {\n            if (this._modified) {\n              this._modified = false;\n\n              if (typeof this.onResetModified === \"function\") {\n                this.onResetModified();\n              }\n            }\n          }\n\n          get serializable() {\n            return this._storage.size > 0 ? this._storage : null;\n          }\n\n          get lastModified() {\n            return this._timeStamp.toString();\n          }\n\n        }\n\n        exports.AnnotationStorage = AnnotationStorage;\n        /***/\n      },\n      /* 10 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CanvasGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _pattern_helper = __w_pdfjs_require__(11);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        const MIN_FONT_SIZE = 16;\n        const MAX_FONT_SIZE = 100;\n        const MAX_GROUP_SIZE = 4096;\n        const MAX_CACHED_CANVAS_PATTERNS = 2;\n        const EXECUTION_TIME = 15;\n        const EXECUTION_STEPS = 10;\n        const COMPILE_TYPE3_GLYPHS = true;\n        const MAX_SIZE_TO_COMPILE = 1000;\n        const FULL_CHUNK_HEIGHT = 16;\n        const LINEWIDTH_SCALE_FACTOR = 1.000001;\n\n        function addContextCurrentTransform(ctx) {\n          if (ctx.mozCurrentTransform) {\n            return;\n          }\n\n          ctx._originalSave = ctx.save;\n          ctx._originalRestore = ctx.restore;\n          ctx._originalRotate = ctx.rotate;\n          ctx._originalScale = ctx.scale;\n          ctx._originalTranslate = ctx.translate;\n          ctx._originalTransform = ctx.transform;\n          ctx._originalSetTransform = ctx.setTransform;\n          ctx._originalResetTransform = ctx.resetTransform;\n          ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n          ctx._transformStack = [];\n\n          try {\n            const desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), \"lineWidth\");\n            ctx._setLineWidth = desc.set;\n            ctx._getLineWidth = desc.get;\n            Object.defineProperty(ctx, \"lineWidth\", {\n              set: function setLineWidth(width) {\n                this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n              },\n              get: function getLineWidth() {\n                return this._getLineWidth();\n              }\n            });\n          } catch (_) {}\n\n          Object.defineProperty(ctx, \"mozCurrentTransform\", {\n            get: function getCurrentTransform() {\n              return this._transformMatrix;\n            }\n          });\n          Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n            get: function getCurrentTransformInverse() {\n              const [a, b, c, d, e, f] = this._transformMatrix;\n              const ad_bc = a * d - b * c;\n              const bc_ad = b * c - a * d;\n              return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n            }\n          });\n\n          ctx.save = function ctxSave() {\n            const old = this._transformMatrix;\n\n            this._transformStack.push(old);\n\n            this._transformMatrix = old.slice(0, 6);\n\n            this._originalSave();\n          };\n\n          ctx.restore = function ctxRestore() {\n            const prev = this._transformStack.pop();\n\n            if (prev) {\n              this._transformMatrix = prev;\n\n              this._originalRestore();\n            }\n          };\n\n          ctx.translate = function ctxTranslate(x, y) {\n            const m = this._transformMatrix;\n            m[4] = m[0] * x + m[2] * y + m[4];\n            m[5] = m[1] * x + m[3] * y + m[5];\n\n            this._originalTranslate(x, y);\n          };\n\n          ctx.scale = function ctxScale(x, y) {\n            const m = this._transformMatrix;\n            m[0] *= x;\n            m[1] *= x;\n            m[2] *= y;\n            m[3] *= y;\n\n            this._originalScale(x, y);\n          };\n\n          ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n            ctx._originalTransform(a, b, c, d, e, f);\n          };\n\n          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n            this._transformMatrix = [a, b, c, d, e, f];\n\n            ctx._originalSetTransform(a, b, c, d, e, f);\n          };\n\n          ctx.resetTransform = function ctxResetTransform() {\n            this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n            ctx._originalResetTransform();\n          };\n\n          ctx.rotate = function ctxRotate(angle) {\n            const cosValue = Math.cos(angle);\n            const sinValue = Math.sin(angle);\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n            this._originalRotate(angle);\n          };\n        }\n\n        class CachedCanvases {\n          constructor(canvasFactory) {\n            this.canvasFactory = canvasFactory;\n            this.cache = Object.create(null);\n          }\n\n          getCanvas(id, width, height, trackTransform) {\n            let canvasEntry;\n\n            if (this.cache[id] !== undefined) {\n              canvasEntry = this.cache[id];\n              this.canvasFactory.reset(canvasEntry, width, height);\n              canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n            } else {\n              canvasEntry = this.canvasFactory.create(width, height);\n              this.cache[id] = canvasEntry;\n            }\n\n            if (trackTransform) {\n              addContextCurrentTransform(canvasEntry.context);\n            }\n\n            return canvasEntry;\n          }\n\n          clear() {\n            for (const id in this.cache) {\n              const canvasEntry = this.cache[id];\n              this.canvasFactory.destroy(canvasEntry);\n              delete this.cache[id];\n            }\n          }\n\n        }\n\n        class LRUCache {\n          constructor() {\n            let maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this._cache = new Map();\n            this._maxSize = maxSize;\n          }\n\n          has(key) {\n            return this._cache.has(key);\n          }\n\n          get(key) {\n            if (this._cache.has(key)) {\n              const value = this._cache.get(key);\n\n              this._cache.delete(key);\n\n              this._cache.set(key, value);\n            }\n\n            return this._cache.get(key);\n          }\n\n          set(key, value) {\n            if (this._maxSize <= 0) {\n              return;\n            }\n\n            if (this._cache.size + 1 > this._maxSize) {\n              this._cache.delete(this._cache.keys().next().value);\n            }\n\n            this._cache.set(key, value);\n          }\n\n          clear() {\n            this._cache.clear();\n          }\n\n        }\n\n        function compileType3Glyph(imgData) {\n          const POINT_TO_PROCESS_LIMIT = 1000;\n          const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n          const width = imgData.width,\n                height = imgData.height,\n                width1 = width + 1;\n          let i, ii, j, j0;\n          const points = new Uint8Array(width1 * (height + 1));\n          const lineSize = width + 7 & ~7,\n                data0 = imgData.data;\n          const data = new Uint8Array(lineSize * height);\n          let pos = 0;\n\n          for (i = 0, ii = data0.length; i < ii; i++) {\n            const elem = data0[i];\n            let mask = 128;\n\n            while (mask > 0) {\n              data[pos++] = elem & mask ? 0 : 255;\n              mask >>= 1;\n            }\n          }\n\n          let count = 0;\n          pos = 0;\n\n          if (data[pos] !== 0) {\n            points[0] = 1;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j] = data[pos] ? 2 : 1;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j] = 2;\n            ++count;\n          }\n\n          for (i = 1; i < height; i++) {\n            pos = i * lineSize;\n            j0 = i * width1;\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0] = data[pos] ? 1 : 8;\n              ++count;\n            }\n\n            let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n            for (j = 1; j < width; j++) {\n              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n              if (POINT_TYPES[sum]) {\n                points[j0 + j] = POINT_TYPES[sum];\n                ++count;\n              }\n\n              pos++;\n            }\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0 + j] = data[pos] ? 2 : 4;\n              ++count;\n            }\n\n            if (count > POINT_TO_PROCESS_LIMIT) {\n              return null;\n            }\n          }\n\n          pos = lineSize * (height - 1);\n          j0 = i * width1;\n\n          if (data[pos] !== 0) {\n            points[j0] = 8;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j0 + j] = data[pos] ? 4 : 8;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j0 + j] = 4;\n            ++count;\n          }\n\n          if (count > POINT_TO_PROCESS_LIMIT) {\n            return null;\n          }\n\n          const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n          const outlines = [];\n\n          for (i = 0; count && i <= height; i++) {\n            let p = i * width1;\n            const end = p + width;\n\n            while (p < end && !points[p]) {\n              p++;\n            }\n\n            if (p === end) {\n              continue;\n            }\n\n            const coords = [p % width1, i];\n            const p0 = p;\n            let type = points[p];\n\n            do {\n              const step = steps[type];\n\n              do {\n                p += step;\n              } while (!points[p]);\n\n              const pp = points[p];\n\n              if (pp !== 5 && pp !== 10) {\n                type = pp;\n                points[p] = 0;\n              } else {\n                type = pp & 0x33 * type >> 4;\n                points[p] &= type >> 2 | type << 2;\n              }\n\n              coords.push(p % width1, p / width1 | 0);\n\n              if (!points[p]) {\n                --count;\n              }\n            } while (p0 !== p);\n\n            outlines.push(coords);\n            --i;\n          }\n\n          const drawOutline = function (c) {\n            c.save();\n            c.scale(1 / width, -1 / height);\n            c.translate(0, -height);\n            c.beginPath();\n\n            for (let k = 0, kk = outlines.length; k < kk; k++) {\n              const o = outlines[k];\n              c.moveTo(o[0], o[1]);\n\n              for (let l = 2, ll = o.length; l < ll; l += 2) {\n                c.lineTo(o[l], o[l + 1]);\n              }\n            }\n\n            c.fill();\n            c.beginPath();\n            c.restore();\n          };\n\n          return drawOutline;\n        }\n\n        class CanvasExtraState {\n          constructor() {\n            this.alphaIsShape = false;\n            this.fontSize = 0;\n            this.fontSizeScale = 1;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.textMatrixScale = 1;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textRise = 0;\n            this.fillColor = \"#000000\";\n            this.strokeColor = \"#000000\";\n            this.patternFill = false;\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.activeSMask = null;\n            this.resumeSMaskCtx = null;\n            this.transferMaps = null;\n          }\n\n          clone() {\n            return Object.create(this);\n          }\n\n          setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n\n        }\n\n        function putBinaryImageData(ctx, imgData) {\n          let transferMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n          if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n            ctx.putImageData(imgData, 0, 0);\n            return;\n          }\n\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0,\n              destPos;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n          let i, j, thisChunkHeight, elemsInThisChunk;\n          let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n          if (transferMaps) {\n            switch (transferMaps.length) {\n              case 1:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[0];\n                transferMapBlue = transferMaps[0];\n                transferMapGray = transferMaps[0];\n                break;\n\n              case 4:\n                transferMapRed = transferMaps[0];\n                transferMapGreen = transferMaps[1];\n                transferMapBlue = transferMaps[2];\n                transferMapGray = transferMaps[3];\n                break;\n            }\n          }\n\n          if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n            const srcLength = src.byteLength;\n            const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n            const dest32DataLength = dest32.length;\n            const fullSrcDiff = width + 7 >> 3;\n            let white = 0xffffffff;\n            let black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n            if (transferMapGray) {\n              if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n                [white, black] = [black, white];\n              }\n            }\n\n            for (i = 0; i < totalChunks; i++) {\n              thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n              destPos = 0;\n\n              for (j = 0; j < thisChunkHeight; j++) {\n                const srcDiff = srcLength - srcPos;\n                let k = 0;\n                const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                const kEndUnrolled = kEnd & ~7;\n                let mask = 0;\n                let srcByte = 0;\n\n                for (; k < kEndUnrolled; k += 8) {\n                  srcByte = src[srcPos++];\n                  dest32[destPos++] = srcByte & 128 ? white : black;\n                  dest32[destPos++] = srcByte & 64 ? white : black;\n                  dest32[destPos++] = srcByte & 32 ? white : black;\n                  dest32[destPos++] = srcByte & 16 ? white : black;\n                  dest32[destPos++] = srcByte & 8 ? white : black;\n                  dest32[destPos++] = srcByte & 4 ? white : black;\n                  dest32[destPos++] = srcByte & 2 ? white : black;\n                  dest32[destPos++] = srcByte & 1 ? white : black;\n                }\n\n                for (; k < kEnd; k++) {\n                  if (mask === 0) {\n                    srcByte = src[srcPos++];\n                    mask = 128;\n                  }\n\n                  dest32[destPos++] = srcByte & mask ? white : black;\n                  mask >>= 1;\n                }\n              }\n\n              while (destPos < dest32DataLength) {\n                dest32[destPos++] = 0;\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            j = 0;\n            elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n            for (i = 0; i < fullChunks; i++) {\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n              srcPos += elemsInThisChunk;\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n              j += FULL_CHUNK_HEIGHT;\n            }\n\n            if (i < totalChunks) {\n              elemsInThisChunk = width * partialChunkHeight * 4;\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < elemsInThisChunk; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, j);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n            const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n            thisChunkHeight = FULL_CHUNK_HEIGHT;\n            elemsInThisChunk = width * thisChunkHeight;\n\n            for (i = 0; i < totalChunks; i++) {\n              if (i >= fullChunks) {\n                thisChunkHeight = partialChunkHeight;\n                elemsInThisChunk = width * thisChunkHeight;\n              }\n\n              destPos = 0;\n\n              for (j = elemsInThisChunk; j--;) {\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = 255;\n              }\n\n              if (hasTransferMaps) {\n                for (let k = 0; k < destPos; k += 4) {\n                  if (transferMapRed) {\n                    dest[k + 0] = transferMapRed[dest[k + 0]];\n                  }\n\n                  if (transferMapGreen) {\n                    dest[k + 1] = transferMapGreen[dest[k + 1]];\n                  }\n\n                  if (transferMapBlue) {\n                    dest[k + 2] = transferMapBlue[dest[k + 2]];\n                  }\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else {\n            throw new Error(`bad image kind: ${imgData.kind}`);\n          }\n        }\n\n        function putBinaryImageMask(ctx, imgData) {\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n\n          for (let i = 0; i < totalChunks; i++) {\n            const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n            let destPos = 3;\n\n            for (let j = 0; j < thisChunkHeight; j++) {\n              let elem,\n                  mask = 0;\n\n              for (let k = 0; k < width; k++) {\n                if (!mask) {\n                  elem = src[srcPos++];\n                  mask = 128;\n                }\n\n                dest[destPos] = elem & mask ? 0 : 255;\n                destPos += 4;\n                mask >>= 1;\n              }\n            }\n\n            ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n          }\n        }\n\n        function copyCtxState(sourceCtx, destCtx) {\n          const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n          for (let i = 0, ii = properties.length; i < ii; i++) {\n            const property = properties[i];\n\n            if (sourceCtx[property] !== undefined) {\n              destCtx[property] = sourceCtx[property];\n            }\n          }\n\n          if (sourceCtx.setLineDash !== undefined) {\n            destCtx.setLineDash(sourceCtx.getLineDash());\n            destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n          }\n        }\n\n        function resetCtxToDefault(ctx) {\n          ctx.strokeStyle = \"#000000\";\n          ctx.fillStyle = \"#000000\";\n          ctx.fillRule = \"nonzero\";\n          ctx.globalAlpha = 1;\n          ctx.lineWidth = 1;\n          ctx.lineCap = \"butt\";\n          ctx.lineJoin = \"miter\";\n          ctx.miterLimit = 10;\n          ctx.globalCompositeOperation = \"source-over\";\n          ctx.font = \"10px sans-serif\";\n\n          if (ctx.setLineDash !== undefined) {\n            ctx.setLineDash([]);\n            ctx.lineDashOffset = 0;\n          }\n        }\n\n        function composeSMaskBackdrop(bytes, r0, g0, b0) {\n          const length = bytes.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = bytes[i];\n\n            if (alpha === 0) {\n              bytes[i - 3] = r0;\n              bytes[i - 2] = g0;\n              bytes[i - 1] = b0;\n            } else if (alpha < 255) {\n              const alpha_ = 255 - alpha;\n              bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n              bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n              bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n            }\n          }\n        }\n\n        function composeSMaskAlpha(maskData, layerData, transferMap) {\n          const length = maskData.length;\n          const scale = 1 / 255;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n            layerData[i] = layerData[i] * alpha * scale | 0;\n          }\n        }\n\n        function composeSMaskLuminosity(maskData, layerData, transferMap) {\n          const length = maskData.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n            layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n          }\n        }\n\n        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n          const hasBackdrop = !!backdrop;\n          const r0 = hasBackdrop ? backdrop[0] : 0;\n          const g0 = hasBackdrop ? backdrop[1] : 0;\n          const b0 = hasBackdrop ? backdrop[2] : 0;\n          let composeFn;\n\n          if (subtype === \"Luminosity\") {\n            composeFn = composeSMaskLuminosity;\n          } else {\n            composeFn = composeSMaskAlpha;\n          }\n\n          const PIXELS_TO_PROCESS = 1048576;\n          const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n          for (let row = 0; row < height; row += chunkSize) {\n            const chunkHeight = Math.min(chunkSize, height - row);\n            const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n            const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n            if (hasBackdrop) {\n              composeSMaskBackdrop(maskData.data, r0, g0, b0);\n            }\n\n            composeFn(maskData.data, layerData.data, transferMap);\n            maskCtx.putImageData(layerData, 0, row);\n          }\n        }\n\n        function composeSMask(ctx, smask, layerCtx) {\n          const mask = smask.canvas;\n          const maskCtx = smask.context;\n          ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n          genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, smask.backdrop, smask.transferMap);\n          ctx.drawImage(mask, 0, 0);\n        }\n\n        function getImageSmoothingEnabled(transform, interpolate) {\n          const scale = _util.Util.singularValueDecompose2dScale(transform);\n\n          scale[0] = Math.fround(scale[0]);\n          scale[1] = Math.fround(scale[1]);\n          const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n\n          if (interpolate !== undefined) {\n            return interpolate;\n          } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n            return true;\n          }\n\n          return false;\n        }\n\n        const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n        const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n        const NORMAL_CLIP = {};\n        const EO_CLIP = {};\n\n        class CanvasGraphics {\n          constructor(canvasCtx, commonObjs, objs, canvasFactory, imageLayer, optionalContentConfig) {\n            this.ctx = canvasCtx;\n            this.current = new CanvasExtraState();\n            this.stateStack = [];\n            this.pendingClip = null;\n            this.pendingEOFill = false;\n            this.res = null;\n            this.xobjs = null;\n            this.commonObjs = commonObjs;\n            this.objs = objs;\n            this.canvasFactory = canvasFactory;\n            this.imageLayer = imageLayer;\n            this.groupStack = [];\n            this.processingType3 = null;\n            this.baseTransform = null;\n            this.baseTransformStack = [];\n            this.groupLevel = 0;\n            this.smaskStack = [];\n            this.smaskCounter = 0;\n            this.tempSMask = null;\n            this.contentVisible = true;\n            this.markedContentStack = [];\n            this.optionalContentConfig = optionalContentConfig;\n            this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n            this.cachedCanvasPatterns = new LRUCache(MAX_CACHED_CANVAS_PATTERNS);\n            this.cachedPatterns = new Map();\n\n            if (canvasCtx) {\n              addContextCurrentTransform(canvasCtx);\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          beginDrawing(_ref22) {\n            let {\n              transform,\n              viewport,\n              transparency = false,\n              background = null\n            } = _ref22;\n            const width = this.ctx.canvas.width;\n            const height = this.ctx.canvas.height;\n            this.ctx.save();\n            this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n            this.ctx.fillRect(0, 0, width, height);\n            this.ctx.restore();\n\n            if (transparency) {\n              const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n              this.compositeCtx = this.ctx;\n              this.transparentCanvas = transparentCanvas.canvas;\n              this.ctx = transparentCanvas.context;\n              this.ctx.save();\n              this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n            }\n\n            this.ctx.save();\n            resetCtxToDefault(this.ctx);\n\n            if (transform) {\n              this.ctx.transform.apply(this.ctx, transform);\n            }\n\n            this.ctx.transform.apply(this.ctx, viewport.transform);\n            this.baseTransform = this.ctx.mozCurrentTransform.slice();\n            this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n            if (this.imageLayer) {\n              this.imageLayer.beginLayout();\n            }\n          }\n\n          executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n            const argsArray = operatorList.argsArray;\n            const fnArray = operatorList.fnArray;\n            let i = executionStartIdx || 0;\n            const argsArrayLen = argsArray.length;\n\n            if (argsArrayLen === i) {\n              return i;\n            }\n\n            const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n            const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n            let steps = 0;\n            const commonObjs = this.commonObjs;\n            const objs = this.objs;\n            let fnId;\n\n            while (true) {\n              if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                stepper.breakIt(i, continueCallback);\n                return i;\n              }\n\n              fnId = fnArray[i];\n\n              if (fnId !== _util.OPS.dependency) {\n                this[fnId].apply(this, argsArray[i]);\n              } else {\n                for (const depObjId of argsArray[i]) {\n                  const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n                  if (!objsPool.has(depObjId)) {\n                    objsPool.get(depObjId, continueCallback);\n                    return i;\n                  }\n                }\n              }\n\n              i++;\n\n              if (i === argsArrayLen) {\n                return i;\n              }\n\n              if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                if (Date.now() > endTime) {\n                  continueCallback();\n                  return i;\n                }\n\n                steps = 0;\n              }\n            }\n          }\n\n          endDrawing() {\n            while (this.stateStack.length || this.current.activeSMask !== null) {\n              this.restore();\n            }\n\n            this.ctx.restore();\n\n            if (this.transparentCanvas) {\n              this.ctx = this.compositeCtx;\n              this.ctx.save();\n              this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n              this.ctx.drawImage(this.transparentCanvas, 0, 0);\n              this.ctx.restore();\n              this.transparentCanvas = null;\n            }\n\n            this.cachedCanvases.clear();\n            this.cachedCanvasPatterns.clear();\n            this.cachedPatterns.clear();\n\n            if (this.imageLayer) {\n              this.imageLayer.endLayout();\n            }\n          }\n\n          _scaleImage(img, inverseTransform) {\n            const width = img.width;\n            const height = img.height;\n            let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n            let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n            let paintWidth = width,\n                paintHeight = height;\n            let tmpCanvasId = \"prescale1\";\n            let tmpCanvas, tmpCtx;\n\n            while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n              let newWidth = paintWidth,\n                  newHeight = paintHeight;\n\n              if (widthScale > 2 && paintWidth > 1) {\n                newWidth = Math.ceil(paintWidth / 2);\n                widthScale /= paintWidth / newWidth;\n              }\n\n              if (heightScale > 2 && paintHeight > 1) {\n                newHeight = Math.ceil(paintHeight / 2);\n                heightScale /= paintHeight / newHeight;\n              }\n\n              tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n              tmpCtx = tmpCanvas.context;\n              tmpCtx.clearRect(0, 0, newWidth, newHeight);\n              tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n              img = tmpCanvas.canvas;\n              paintWidth = newWidth;\n              paintHeight = newHeight;\n              tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n            }\n\n            return {\n              img,\n              paintWidth,\n              paintHeight\n            };\n          }\n\n          _createMaskCanvas(img) {\n            const ctx = this.ctx;\n            const width = img.width,\n                  height = img.height;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n            const maskCtx = maskCanvas.context;\n            putBinaryImageMask(maskCtx, img);\n            const objToCanvas = ctx.mozCurrentTransform;\n\n            let maskToCanvas = _util.Util.transform(objToCanvas, [1 / width, 0, 0, -1 / height, 0, 0]);\n\n            maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n\n            const cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);\n\n            const cord2 = _util.Util.applyTransform([width, height], maskToCanvas);\n\n            const rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n\n            const drawnWidth = Math.ceil(rect[2] - rect[0]);\n            const drawnHeight = Math.ceil(rect[3] - rect[1]);\n            const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight, true);\n            const fillCtx = fillCanvas.context;\n            const offsetX = Math.min(cord1[0], cord2[0]);\n            const offsetY = Math.min(cord1[1], cord2[1]);\n            fillCtx.translate(-offsetX, -offsetY);\n            fillCtx.transform.apply(fillCtx, maskToCanvas);\n\n            const scaled = this._scaleImage(maskCanvas.canvas, fillCtx.mozCurrentTransformInverse);\n\n            fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(fillCtx.mozCurrentTransform, img.interpolate);\n            fillCtx.drawImage(scaled.img, 0, 0, scaled.img.width, scaled.img.height, 0, 0, width, height);\n            fillCtx.globalCompositeOperation = \"source-in\";\n\n            const inverse = _util.Util.transform(fillCtx.mozCurrentTransformInverse, [1, 0, 0, 1, -offsetX, -offsetY]);\n\n            fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, false) : fillColor;\n            fillCtx.fillRect(0, 0, width, height);\n            return {\n              canvas: fillCanvas.canvas,\n              offsetX: Math.round(offsetX),\n              offsetY: Math.round(offsetY)\n            };\n          }\n\n          setLineWidth(width) {\n            this.current.lineWidth = width;\n            this.ctx.lineWidth = width;\n          }\n\n          setLineCap(style) {\n            this.ctx.lineCap = LINE_CAP_STYLES[style];\n          }\n\n          setLineJoin(style) {\n            this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n          }\n\n          setMiterLimit(limit) {\n            this.ctx.miterLimit = limit;\n          }\n\n          setDash(dashArray, dashPhase) {\n            const ctx = this.ctx;\n\n            if (ctx.setLineDash !== undefined) {\n              ctx.setLineDash(dashArray);\n              ctx.lineDashOffset = dashPhase;\n            }\n          }\n\n          setRenderingIntent(intent) {}\n\n          setFlatness(flatness) {}\n\n          setGState(states) {\n            for (let i = 0, ii = states.length; i < ii; i++) {\n              const state = states[i];\n              const key = state[0];\n              const value = state[1];\n\n              switch (key) {\n                case \"LW\":\n                  this.setLineWidth(value);\n                  break;\n\n                case \"LC\":\n                  this.setLineCap(value);\n                  break;\n\n                case \"LJ\":\n                  this.setLineJoin(value);\n                  break;\n\n                case \"ML\":\n                  this.setMiterLimit(value);\n                  break;\n\n                case \"D\":\n                  this.setDash(value[0], value[1]);\n                  break;\n\n                case \"RI\":\n                  this.setRenderingIntent(value);\n                  break;\n\n                case \"FL\":\n                  this.setFlatness(value);\n                  break;\n\n                case \"Font\":\n                  this.setFont(value[0], value[1]);\n                  break;\n\n                case \"CA\":\n                  this.current.strokeAlpha = state[1];\n                  break;\n\n                case \"ca\":\n                  this.current.fillAlpha = state[1];\n                  this.ctx.globalAlpha = state[1];\n                  break;\n\n                case \"BM\":\n                  this.ctx.globalCompositeOperation = value;\n                  break;\n\n                case \"SMask\":\n                  if (this.current.activeSMask) {\n                    if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                      this.suspendSMaskGroup();\n                    } else {\n                      this.endSMaskGroup();\n                    }\n                  }\n\n                  this.current.activeSMask = value ? this.tempSMask : null;\n\n                  if (this.current.activeSMask) {\n                    this.beginSMaskGroup();\n                  }\n\n                  this.tempSMask = null;\n                  break;\n\n                case \"TR\":\n                  this.current.transferMaps = value;\n              }\n            }\n          }\n\n          beginSMaskGroup() {\n            const activeSMask = this.current.activeSMask;\n            const drawnWidth = activeSMask.canvas.width;\n            const drawnHeight = activeSMask.canvas.height;\n            const cacheId = \"smaskGroupAt\" + this.groupLevel;\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            const currentCtx = this.ctx;\n            const currentTransform = currentCtx.mozCurrentTransform;\n            this.ctx.save();\n            const groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n            groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n            groupCtx.transform.apply(groupCtx, currentTransform);\n            activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n          }\n\n          suspendSMaskGroup() {\n            const groupCtx = this.ctx;\n            this.groupLevel--;\n            this.ctx = this.groupStack.pop();\n            composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n            this.ctx.restore();\n            this.ctx.save();\n            copyCtxState(groupCtx, this.ctx);\n            this.current.resumeSMaskCtx = groupCtx;\n\n            const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n            this.ctx.transform.apply(this.ctx, deltaTransform);\n            groupCtx.save();\n            groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n            groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n            groupCtx.restore();\n          }\n\n          resumeSMaskGroup() {\n            const groupCtx = this.current.resumeSMaskCtx;\n            const currentCtx = this.ctx;\n            this.ctx = groupCtx;\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n          }\n\n          endSMaskGroup() {\n            const groupCtx = this.ctx;\n            this.groupLevel--;\n            this.ctx = this.groupStack.pop();\n            composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n            this.ctx.restore();\n            copyCtxState(groupCtx, this.ctx);\n\n            const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n            this.ctx.transform.apply(this.ctx, deltaTransform);\n          }\n\n          save() {\n            this.ctx.save();\n            const old = this.current;\n            this.stateStack.push(old);\n            this.current = old.clone();\n            this.current.resumeSMaskCtx = null;\n          }\n\n          restore() {\n            if (this.current.resumeSMaskCtx) {\n              this.resumeSMaskGroup();\n            }\n\n            if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n              this.endSMaskGroup();\n            }\n\n            if (this.stateStack.length !== 0) {\n              this.current = this.stateStack.pop();\n              this.ctx.restore();\n              this.pendingClip = null;\n              this._cachedGetSinglePixelWidth = null;\n            } else {\n              this.current.activeSMask = null;\n            }\n          }\n\n          transform(a, b, c, d, e, f) {\n            this.ctx.transform(a, b, c, d, e, f);\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          constructPath(ops, args) {\n            const ctx = this.ctx;\n            const current = this.current;\n            let x = current.x,\n                y = current.y;\n\n            for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n              switch (ops[i] | 0) {\n                case _util.OPS.rectangle:\n                  x = args[j++];\n                  y = args[j++];\n                  const width = args[j++];\n                  const height = args[j++];\n                  const xw = x + width;\n                  const yh = y + height;\n                  ctx.moveTo(x, y);\n\n                  if (width === 0 || height === 0) {\n                    ctx.lineTo(xw, yh);\n                  } else {\n                    ctx.lineTo(xw, y);\n                    ctx.lineTo(xw, yh);\n                    ctx.lineTo(x, yh);\n                  }\n\n                  ctx.closePath();\n                  break;\n\n                case _util.OPS.moveTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.moveTo(x, y);\n                  break;\n\n                case _util.OPS.lineTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.lineTo(x, y);\n                  break;\n\n                case _util.OPS.curveTo:\n                  x = args[j + 4];\n                  y = args[j + 5];\n                  ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                  j += 6;\n                  break;\n\n                case _util.OPS.curveTo2:\n                  ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  j += 4;\n                  break;\n\n                case _util.OPS.curveTo3:\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                  j += 4;\n                  break;\n\n                case _util.OPS.closePath:\n                  ctx.closePath();\n                  break;\n              }\n            }\n\n            current.setCurrentPoint(x, y);\n          }\n\n          closePath() {\n            this.ctx.closePath();\n          }\n\n          stroke(consumePath) {\n            consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n            const ctx = this.ctx;\n            const strokeColor = this.current.strokeColor;\n            ctx.globalAlpha = this.current.strokeAlpha;\n\n            if (this.contentVisible) {\n              if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n                const lineWidth = this.getSinglePixelWidth();\n                ctx.save();\n                ctx.strokeStyle = strokeColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n                ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                ctx.stroke();\n                ctx.restore();\n              } else {\n                const lineWidth = this.getSinglePixelWidth();\n\n                if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n                  ctx.save();\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  ctx.stroke();\n                  ctx.restore();\n                } else {\n                  ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            if (consumePath) {\n              this.consumePath();\n            }\n\n            ctx.globalAlpha = this.current.fillAlpha;\n          }\n\n          closeStroke() {\n            this.closePath();\n            this.stroke();\n          }\n\n          fill(consumePath) {\n            consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            let needRestore = false;\n\n            if (isPatternFill) {\n              ctx.save();\n              ctx.fillStyle = fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n              needRestore = true;\n            }\n\n            if (this.contentVisible) {\n              if (this.pendingEOFill) {\n                ctx.fill(\"evenodd\");\n                this.pendingEOFill = false;\n              } else {\n                ctx.fill();\n              }\n            }\n\n            if (needRestore) {\n              ctx.restore();\n            }\n\n            if (consumePath) {\n              this.consumePath();\n            }\n          }\n\n          eoFill() {\n            this.pendingEOFill = true;\n            this.fill();\n          }\n\n          fillStroke() {\n            this.fill(false);\n            this.stroke(false);\n            this.consumePath();\n          }\n\n          eoFillStroke() {\n            this.pendingEOFill = true;\n            this.fillStroke();\n          }\n\n          closeFillStroke() {\n            this.closePath();\n            this.fillStroke();\n          }\n\n          closeEOFillStroke() {\n            this.pendingEOFill = true;\n            this.closePath();\n            this.fillStroke();\n          }\n\n          endPath() {\n            this.consumePath();\n          }\n\n          clip() {\n            this.pendingClip = NORMAL_CLIP;\n          }\n\n          eoClip() {\n            this.pendingClip = EO_CLIP;\n          }\n\n          beginText() {\n            this.current.textMatrix = _util.IDENTITY_MATRIX;\n            this.current.textMatrixScale = 1;\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          endText() {\n            const paths = this.pendingTextPaths;\n            const ctx = this.ctx;\n\n            if (paths === undefined) {\n              ctx.beginPath();\n              return;\n            }\n\n            ctx.save();\n            ctx.beginPath();\n\n            for (let i = 0; i < paths.length; i++) {\n              const path = paths[i];\n              ctx.setTransform.apply(ctx, path.transform);\n              ctx.translate(path.x, path.y);\n              path.addToPath(ctx, path.fontSize);\n            }\n\n            ctx.restore();\n            ctx.clip();\n            ctx.beginPath();\n            delete this.pendingTextPaths;\n          }\n\n          setCharSpacing(spacing) {\n            this.current.charSpacing = spacing;\n          }\n\n          setWordSpacing(spacing) {\n            this.current.wordSpacing = spacing;\n          }\n\n          setHScale(scale) {\n            this.current.textHScale = scale / 100;\n          }\n\n          setLeading(leading) {\n            this.current.leading = -leading;\n          }\n\n          setFont(fontRefName, size) {\n            const fontObj = this.commonObjs.get(fontRefName);\n            const current = this.current;\n\n            if (!fontObj) {\n              throw new Error(`Can't find font for ${fontRefName}`);\n            }\n\n            current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n            if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n              (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n            }\n\n            if (size < 0) {\n              size = -size;\n              current.fontDirection = -1;\n            } else {\n              current.fontDirection = 1;\n            }\n\n            this.current.font = fontObj;\n            this.current.fontSize = size;\n\n            if (fontObj.isType3Font) {\n              return;\n            }\n\n            const name = fontObj.loadedName || \"sans-serif\";\n            let bold = \"normal\";\n\n            if (fontObj.black) {\n              bold = \"900\";\n            } else if (fontObj.bold) {\n              bold = \"bold\";\n            }\n\n            const italic = fontObj.italic ? \"italic\" : \"normal\";\n            const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n            let browserFontSize = size;\n\n            if (size < MIN_FONT_SIZE) {\n              browserFontSize = MIN_FONT_SIZE;\n            } else if (size > MAX_FONT_SIZE) {\n              browserFontSize = MAX_FONT_SIZE;\n            }\n\n            this.current.fontSizeScale = size / browserFontSize;\n            this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n          }\n\n          setTextRenderingMode(mode) {\n            this.current.textRenderingMode = mode;\n          }\n\n          setTextRise(rise) {\n            this.current.textRise = rise;\n          }\n\n          moveText(x, y) {\n            this.current.x = this.current.lineX += x;\n            this.current.y = this.current.lineY += y;\n          }\n\n          setLeadingMoveText(x, y) {\n            this.setLeading(-y);\n            this.moveText(x, y);\n          }\n\n          setTextMatrix(a, b, c, d, e, f) {\n            this.current.textMatrix = [a, b, c, d, e, f];\n            this.current.textMatrixScale = Math.hypot(a, b);\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          nextLine() {\n            this.moveText(0, this.current.leading);\n          }\n\n          paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const textRenderingMode = current.textRenderingMode;\n            const fontSize = current.fontSize / current.fontSizeScale;\n            const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n            const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n            const patternFill = current.patternFill && !font.missingFile;\n            let addToPath;\n\n            if (font.disableFontFace || isAddToPathSet || patternFill) {\n              addToPath = font.getPathGenerator(this.commonObjs, character);\n            }\n\n            if (font.disableFontFace || patternFill) {\n              ctx.save();\n              ctx.translate(x, y);\n              ctx.beginPath();\n              addToPath(ctx, fontSize);\n\n              if (patternTransform) {\n                ctx.setTransform.apply(ctx, patternTransform);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fill();\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (resetLineWidthToOne) {\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                }\n\n                ctx.stroke();\n              }\n\n              ctx.restore();\n            } else {\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fillText(character, x, y);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (resetLineWidthToOne) {\n                  ctx.save();\n                  ctx.moveTo(x, y);\n                  ctx.resetTransform();\n                  ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  ctx.strokeText(character, 0, 0);\n                  ctx.restore();\n                } else {\n                  ctx.strokeText(character, x, y);\n                }\n              }\n            }\n\n            if (isAddToPathSet) {\n              const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n              paths.push({\n                transform: ctx.mozCurrentTransform,\n                x,\n                y,\n                fontSize,\n                addToPath\n              });\n            }\n          }\n\n          get isFontSubpixelAAEnabled() {\n            const {\n              context: ctx\n            } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n            ctx.scale(1.5, 1);\n            ctx.fillText(\"I\", 0, 10);\n            const data = ctx.getImageData(0, 0, 10, 10).data;\n            let enabled = false;\n\n            for (let i = 3; i < data.length; i += 4) {\n              if (data[i] > 0 && data[i] < 255) {\n                enabled = true;\n                break;\n              }\n            }\n\n            return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n          }\n\n          showText(glyphs) {\n            const current = this.current;\n            const font = current.font;\n\n            if (font.isType3Font) {\n              return this.showType3Text(glyphs);\n            }\n\n            const fontSize = current.fontSize;\n\n            if (fontSize === 0) {\n              return undefined;\n            }\n\n            const ctx = this.ctx;\n            const fontSizeScale = current.fontSizeScale;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const fontDirection = current.fontDirection;\n            const textHScale = current.textHScale * fontDirection;\n            const glyphsLength = glyphs.length;\n            const vertical = font.vertical;\n            const spacingDir = vertical ? 1 : -1;\n            const defaultVMetrics = font.defaultVMetrics;\n            const widthAdvanceScale = fontSize * current.fontMatrix[0];\n            const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n            ctx.save();\n            let patternTransform;\n\n            if (current.patternFill) {\n              ctx.save();\n              const pattern = current.fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n              patternTransform = ctx.mozCurrentTransform;\n              ctx.restore();\n              ctx.fillStyle = pattern;\n            }\n\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y + current.textRise);\n\n            if (fontDirection > 0) {\n              ctx.scale(textHScale, -1);\n            } else {\n              ctx.scale(textHScale, 1);\n            }\n\n            let lineWidth = current.lineWidth;\n            let resetLineWidthToOne = false;\n            const scale = current.textMatrixScale;\n\n            if (scale === 0 || lineWidth === 0) {\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                this._cachedGetSinglePixelWidth = null;\n                lineWidth = this.getSinglePixelWidth();\n                resetLineWidthToOne = lineWidth < 0;\n              }\n            } else {\n              lineWidth /= scale;\n            }\n\n            if (fontSizeScale !== 1.0) {\n              ctx.scale(fontSizeScale, fontSizeScale);\n              lineWidth /= fontSizeScale;\n            }\n\n            ctx.lineWidth = lineWidth;\n            let x = 0,\n                i;\n\n            for (i = 0; i < glyphsLength; ++i) {\n              const glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                x += spacingDir * glyph * fontSize / 1000;\n                continue;\n              }\n\n              let restoreNeeded = false;\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const character = glyph.fontChar;\n              const accent = glyph.accent;\n              let scaledX, scaledY;\n              let width = glyph.width;\n\n              if (vertical) {\n                const vmetric = glyph.vmetric || defaultVMetrics;\n                const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n                const vy = vmetric[2] * widthAdvanceScale;\n                width = vmetric ? -vmetric[0] : width;\n                scaledX = vx / fontSizeScale;\n                scaledY = (x + vy) / fontSizeScale;\n              } else {\n                scaledX = x / fontSizeScale;\n                scaledY = 0;\n              }\n\n              if (font.remeasure && width > 0) {\n                const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n                if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                  const characterScaleX = width / measuredWidth;\n                  restoreNeeded = true;\n                  ctx.save();\n                  ctx.scale(characterScaleX, 1);\n                  scaledX /= characterScaleX;\n                } else if (width !== measuredWidth) {\n                  scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                }\n              }\n\n              if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                if (simpleFillText && !accent) {\n                  ctx.fillText(character, scaledX, scaledY);\n                } else {\n                  this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n                  if (accent) {\n                    const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                    const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                    this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n                  }\n                }\n              }\n\n              let charWidth;\n\n              if (vertical) {\n                charWidth = width * widthAdvanceScale - spacing * fontDirection;\n              } else {\n                charWidth = width * widthAdvanceScale + spacing * fontDirection;\n              }\n\n              x += charWidth;\n\n              if (restoreNeeded) {\n                ctx.restore();\n              }\n            }\n\n            if (vertical) {\n              current.y -= x;\n            } else {\n              current.x += x * textHScale;\n            }\n\n            ctx.restore();\n            return undefined;\n          }\n\n          showType3Text(glyphs) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const fontSize = current.fontSize;\n            const fontDirection = current.fontDirection;\n            const spacingDir = font.vertical ? 1 : -1;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const textHScale = current.textHScale * fontDirection;\n            const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n            const glyphsLength = glyphs.length;\n            const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n            let i, glyph, width, spacingLength;\n\n            if (isTextInvisible || fontSize === 0) {\n              return;\n            }\n\n            this._cachedGetSinglePixelWidth = null;\n            ctx.save();\n            ctx.transform.apply(ctx, current.textMatrix);\n            ctx.translate(current.x, current.y);\n            ctx.scale(textHScale, fontDirection);\n\n            for (i = 0; i < glyphsLength; ++i) {\n              glyph = glyphs[i];\n\n              if ((0, _util.isNum)(glyph)) {\n                spacingLength = spacingDir * glyph * fontSize / 1000;\n                this.ctx.translate(spacingLength, 0);\n                current.x += spacingLength * textHScale;\n                continue;\n              }\n\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n              if (!operatorList) {\n                (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n                continue;\n              }\n\n              if (this.contentVisible) {\n                this.processingType3 = glyph;\n                this.save();\n                ctx.scale(fontSize, fontSize);\n                ctx.transform.apply(ctx, fontMatrix);\n                this.executeOperatorList(operatorList);\n                this.restore();\n              }\n\n              const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n              width = transformed[0] * fontSize + spacing;\n              ctx.translate(width, 0);\n              current.x += width * textHScale;\n            }\n\n            ctx.restore();\n            this.processingType3 = null;\n          }\n\n          setCharWidth(xWidth, yWidth) {}\n\n          setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n            this.ctx.rect(llx, lly, urx - llx, ury - lly);\n            this.clip();\n            this.endPath();\n          }\n\n          getColorN_Pattern(IR) {\n            let pattern;\n\n            if (IR[0] === \"TilingPattern\") {\n              const color = IR[1];\n              const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n              const canvasGraphicsFactory = {\n                createCanvasGraphics: ctx => {\n                  return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory);\n                }\n              };\n              pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n            } else {\n              pattern = this._getPattern(IR[1], IR[2]);\n            }\n\n            return pattern;\n          }\n\n          setStrokeColorN() {\n            this.current.strokeColor = this.getColorN_Pattern(arguments);\n          }\n\n          setFillColorN() {\n            this.current.fillColor = this.getColorN_Pattern(arguments);\n            this.current.patternFill = true;\n          }\n\n          setStrokeRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.strokeStyle = color;\n            this.current.strokeColor = color;\n          }\n\n          setFillRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.fillStyle = color;\n            this.current.fillColor = color;\n            this.current.patternFill = false;\n          }\n\n          _getPattern(objId) {\n            let matrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            let pattern;\n\n            if (this.cachedPatterns.has(objId)) {\n              pattern = this.cachedPatterns.get(objId);\n            } else {\n              pattern = (0, _pattern_helper.getShadingPattern)(this.objs.get(objId), this.cachedCanvasPatterns);\n              this.cachedPatterns.set(objId, pattern);\n            }\n\n            if (matrix) {\n              pattern.matrix = matrix;\n            }\n\n            return pattern;\n          }\n\n          shadingFill(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            this.save();\n\n            const pattern = this._getPattern(objId);\n\n            ctx.fillStyle = pattern.getPattern(ctx, this, ctx.mozCurrentTransformInverse, true);\n            const inv = ctx.mozCurrentTransformInverse;\n\n            if (inv) {\n              const canvas = ctx.canvas;\n              const width = canvas.width;\n              const height = canvas.height;\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n            } else {\n              this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n            }\n\n            this.restore();\n          }\n\n          beginInlineImage() {\n            (0, _util.unreachable)(\"Should not call beginInlineImage\");\n          }\n\n          beginImageData() {\n            (0, _util.unreachable)(\"Should not call beginImageData\");\n          }\n\n          paintFormXObjectBegin(matrix, bbox) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            this.baseTransformStack.push(this.baseTransform);\n\n            if (Array.isArray(matrix) && matrix.length === 6) {\n              this.transform.apply(this, matrix);\n            }\n\n            this.baseTransform = this.ctx.mozCurrentTransform;\n\n            if (bbox) {\n              const width = bbox[2] - bbox[0];\n              const height = bbox[3] - bbox[1];\n              this.ctx.rect(bbox[0], bbox[1], width, height);\n              this.clip();\n              this.endPath();\n            }\n          }\n\n          paintFormXObjectEnd() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.restore();\n            this.baseTransform = this.baseTransformStack.pop();\n          }\n\n          beginGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            const currentCtx = this.ctx;\n\n            if (!group.isolated) {\n              (0, _util.info)(\"TODO: Support non-isolated groups.\");\n            }\n\n            if (group.knockout) {\n              (0, _util.warn)(\"Knockout groups not supported.\");\n            }\n\n            const currentTransform = currentCtx.mozCurrentTransform;\n\n            if (group.matrix) {\n              currentCtx.transform.apply(currentCtx, group.matrix);\n            }\n\n            if (!group.bbox) {\n              throw new Error(\"Bounding box is required.\");\n            }\n\n            let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n            const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n            bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n            const offsetX = Math.floor(bounds[0]);\n            const offsetY = Math.floor(bounds[1]);\n            let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n            let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n            let scaleX = 1,\n                scaleY = 1;\n\n            if (drawnWidth > MAX_GROUP_SIZE) {\n              scaleX = drawnWidth / MAX_GROUP_SIZE;\n              drawnWidth = MAX_GROUP_SIZE;\n            }\n\n            if (drawnHeight > MAX_GROUP_SIZE) {\n              scaleY = drawnHeight / MAX_GROUP_SIZE;\n              drawnHeight = MAX_GROUP_SIZE;\n            }\n\n            let cacheId = \"groupAt\" + this.groupLevel;\n\n            if (group.smask) {\n              cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n            }\n\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n            const groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / scaleX, 1 / scaleY);\n            groupCtx.translate(-offsetX, -offsetY);\n            groupCtx.transform.apply(groupCtx, currentTransform);\n\n            if (group.smask) {\n              this.smaskStack.push({\n                canvas: scratchCanvas.canvas,\n                context: groupCtx,\n                offsetX,\n                offsetY,\n                scaleX,\n                scaleY,\n                subtype: group.smask.subtype,\n                backdrop: group.smask.backdrop,\n                transferMap: group.smask.transferMap || null,\n                startTransformInverse: null\n              });\n            } else {\n              currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n              currentCtx.translate(offsetX, offsetY);\n              currentCtx.scale(scaleX, scaleY);\n            }\n\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n            this.current.activeSMask = null;\n          }\n\n          endGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.groupLevel--;\n            const groupCtx = this.ctx;\n            this.ctx = this.groupStack.pop();\n            this.ctx.imageSmoothingEnabled = false;\n\n            if (group.smask) {\n              this.tempSMask = this.smaskStack.pop();\n            } else {\n              this.ctx.drawImage(groupCtx.canvas, 0, 0);\n            }\n\n            this.restore();\n          }\n\n          beginAnnotations() {\n            this.save();\n\n            if (this.baseTransform) {\n              this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n            }\n          }\n\n          endAnnotations() {\n            this.restore();\n          }\n\n          beginAnnotation(id, rect, transform, matrix) {\n            this.save();\n            resetCtxToDefault(this.ctx);\n            this.current = new CanvasExtraState();\n\n            if (Array.isArray(rect) && rect.length === 4) {\n              const width = rect[2] - rect[0];\n              const height = rect[3] - rect[1];\n              this.ctx.rect(rect[0], rect[1], width, height);\n              this.clip();\n              this.endPath();\n            }\n\n            this.transform.apply(this, transform);\n            this.transform.apply(this, matrix);\n          }\n\n          endAnnotation() {\n            this.restore();\n          }\n\n          paintImageMaskXObject(img) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const width = img.width,\n                  height = img.height;\n            const glyph = this.processingType3;\n\n            if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n              if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n                glyph.compiled = compileType3Glyph({\n                  data: img.data,\n                  width,\n                  height\n                });\n              } else {\n                glyph.compiled = null;\n              }\n            }\n\n            if (glyph?.compiled) {\n              glyph.compiled(ctx);\n              return;\n            }\n\n            const mask = this._createMaskCanvas(img);\n\n            const maskCanvas = mask.canvas;\n            ctx.save();\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n            ctx.restore();\n          }\n\n          paintImageMaskXObjectRepeat(imgData, scaleX) {\n            let skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            let skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n            let scaleY = arguments.length > 4 ? arguments[4] : undefined;\n            let positions = arguments.length > 5 ? arguments[5] : undefined;\n\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            ctx.save();\n            const currentTransform = ctx.mozCurrentTransform;\n            ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n\n            const mask = this._createMaskCanvas(imgData);\n\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              const trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\n\n              const [x, y] = _util.Util.applyTransform([0, 0], trans);\n\n              ctx.drawImage(mask.canvas, x, y);\n            }\n\n            ctx.restore();\n          }\n\n          paintImageMaskXObjectGroup(images) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n\n            for (let i = 0, ii = images.length; i < ii; i++) {\n              const image = images[i];\n              const width = image.width,\n                    height = image.height;\n              const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              const maskCtx = maskCanvas.context;\n              maskCtx.save();\n              putBinaryImageMask(maskCtx, image);\n              maskCtx.globalCompositeOperation = \"source-in\";\n              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, ctx.mozCurrentTransformInverse, false) : fillColor;\n              maskCtx.fillRect(0, 0, width, height);\n              maskCtx.restore();\n              ctx.save();\n              ctx.transform.apply(ctx, image.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n              ctx.restore();\n            }\n          }\n\n          paintImageXObject(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            this.paintInlineImageXObject(imgData);\n          }\n\n          paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const map = [];\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              map.push({\n                transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n                x: 0,\n                y: 0,\n                w: width,\n                h: height\n              });\n            }\n\n            this.paintInlineImageXObjectGroup(imgData, map);\n          }\n\n          paintInlineImageXObject(imgData) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const ctx = this.ctx;\n            this.save();\n            ctx.scale(1 / width, -1 / height);\n            let imgToPaint;\n\n            if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n              imgToPaint = imgData;\n            } else {\n              const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n              const tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n              imgToPaint = tmpCanvas.canvas;\n            }\n\n            const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n\n            ctx.imageSmoothingEnabled = getImageSmoothingEnabled(ctx.mozCurrentTransform, imgData.interpolate);\n            ctx.drawImage(scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n\n            if (this.imageLayer) {\n              const position = this.getCanvasPosition(0, -height);\n              this.imageLayer.appendImage({\n                imgData,\n                left: position[0],\n                top: position[1],\n                width: width / ctx.mozCurrentTransformInverse[0],\n                height: height / ctx.mozCurrentTransformInverse[3]\n              });\n            }\n\n            this.restore();\n          }\n\n          paintInlineImageXObjectGroup(imgData, map) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const w = imgData.width;\n            const h = imgData.height;\n            const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n            const tmpCtx = tmpCanvas.context;\n            putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n            for (let i = 0, ii = map.length; i < ii; i++) {\n              const entry = map[i];\n              ctx.save();\n              ctx.transform.apply(ctx, entry.transform);\n              ctx.scale(1, -1);\n              ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n              if (this.imageLayer) {\n                const position = this.getCanvasPosition(entry.x, entry.y);\n                this.imageLayer.appendImage({\n                  imgData,\n                  left: position[0],\n                  top: position[1],\n                  width: w,\n                  height: h\n                });\n              }\n\n              ctx.restore();\n            }\n          }\n\n          paintSolidColorImageMask() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.ctx.fillRect(0, 0, 1, 1);\n          }\n\n          markPoint(tag) {}\n\n          markPointProps(tag, properties) {}\n\n          beginMarkedContent(tag) {\n            this.markedContentStack.push({\n              visible: true\n            });\n          }\n\n          beginMarkedContentProps(tag, properties) {\n            if (tag === \"OC\") {\n              this.markedContentStack.push({\n                visible: this.optionalContentConfig.isVisible(properties)\n              });\n            } else {\n              this.markedContentStack.push({\n                visible: true\n              });\n            }\n\n            this.contentVisible = this.isContentVisible();\n          }\n\n          endMarkedContent() {\n            this.markedContentStack.pop();\n            this.contentVisible = this.isContentVisible();\n          }\n\n          beginCompat() {}\n\n          endCompat() {}\n\n          consumePath() {\n            const ctx = this.ctx;\n\n            if (this.pendingClip) {\n              if (this.pendingClip === EO_CLIP) {\n                ctx.clip(\"evenodd\");\n              } else {\n                ctx.clip();\n              }\n\n              this.pendingClip = null;\n            }\n\n            ctx.beginPath();\n          }\n\n          getSinglePixelWidth() {\n            if (this._cachedGetSinglePixelWidth === null) {\n              const m = this.ctx.mozCurrentTransform;\n              const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n              const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n              const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n              const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n\n              if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n                this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);\n              } else if (absDet > Number.EPSILON) {\n                this._cachedGetSinglePixelWidth = pixelHeight;\n              } else {\n                this._cachedGetSinglePixelWidth = 1;\n              }\n            }\n\n            return this._cachedGetSinglePixelWidth;\n          }\n\n          getCanvasPosition(x, y) {\n            const transform = this.ctx.mozCurrentTransform;\n            return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n          }\n\n          isContentVisible() {\n            for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n              if (!this.markedContentStack[i].visible) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n\n        }\n\n        exports.CanvasGraphics = CanvasGraphics;\n\n        for (const op in _util.OPS) {\n          if (CanvasGraphics.prototype[op] !== undefined) {\n            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n          }\n        }\n        /***/\n\n      },\n      /* 11 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getShadingPattern = getShadingPattern;\n        exports.TilingPattern = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        function applyBoundingBox(ctx, bbox) {\n          if (!bbox || typeof Path2D === \"undefined\") {\n            return;\n          }\n\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const region = new Path2D();\n          region.rect(bbox[0], bbox[1], width, height);\n          ctx.clip(region);\n        }\n\n        class BaseShadingPattern {\n          constructor() {\n            if (this.constructor === BaseShadingPattern) {\n              (0, _util.unreachable)(\"Cannot initialize BaseShadingPattern.\");\n            }\n          }\n\n          getPattern() {\n            (0, _util.unreachable)(\"Abstract method `getPattern` called.\");\n          }\n\n        }\n\n        class RadialAxialShadingPattern extends BaseShadingPattern {\n          constructor(IR, cachedCanvasPatterns) {\n            super();\n            this._type = IR[1];\n            this._bbox = IR[2];\n            this._colorStops = IR[3];\n            this._p0 = IR[4];\n            this._p1 = IR[5];\n            this._r0 = IR[6];\n            this._r1 = IR[7];\n            this.matrix = null;\n            this.cachedCanvasPatterns = cachedCanvasPatterns;\n          }\n\n          _createGradient(ctx) {\n            let grad;\n\n            if (this._type === \"axial\") {\n              grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n            } else if (this._type === \"radial\") {\n              grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n            }\n\n            for (const colorStop of this._colorStops) {\n              grad.addColorStop(colorStop[0], colorStop[1]);\n            }\n\n            return grad;\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            let pattern;\n\n            if (!shadingFill) {\n              if (this.cachedCanvasPatterns.has(this)) {\n                pattern = this.cachedCanvasPatterns.get(this);\n              } else {\n                const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", owner.ctx.canvas.width, owner.ctx.canvas.height, true);\n                const tmpCtx = tmpCanvas.context;\n                tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                tmpCtx.beginPath();\n                tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                tmpCtx.setTransform.apply(tmpCtx, owner.baseTransform);\n\n                if (this.matrix) {\n                  tmpCtx.transform.apply(tmpCtx, this.matrix);\n                }\n\n                applyBoundingBox(tmpCtx, this._bbox);\n                tmpCtx.fillStyle = this._createGradient(tmpCtx);\n                tmpCtx.fill();\n                pattern = ctx.createPattern(tmpCanvas.canvas, \"repeat\");\n                this.cachedCanvasPatterns.set(this, pattern);\n              }\n            } else {\n              applyBoundingBox(ctx, this._bbox);\n              pattern = this._createGradient(ctx);\n            }\n\n            if (!shadingFill) {\n              const domMatrix = new DOMMatrix(inverse);\n\n              try {\n                pattern.setTransform(domMatrix);\n              } catch (ex) {\n                (0, _util.warn)(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n              }\n            }\n\n            return pattern;\n          }\n\n        }\n\n        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n          const coords = context.coords,\n                colors = context.colors;\n          const bytes = data.data,\n                rowSize = data.width * 4;\n          let tmp;\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          if (coords[p2 + 1] > coords[p3 + 1]) {\n            tmp = p2;\n            p2 = p3;\n            p3 = tmp;\n            tmp = c2;\n            c2 = c3;\n            c3 = tmp;\n          }\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n          const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n          const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n          const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n          const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n          const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n          if (y1 >= y3) {\n            return;\n          }\n\n          const c1r = colors[c1],\n                c1g = colors[c1 + 1],\n                c1b = colors[c1 + 2];\n          const c2r = colors[c2],\n                c2g = colors[c2 + 1],\n                c2b = colors[c2 + 2];\n          const c3r = colors[c3],\n                c3g = colors[c3 + 1],\n                c3b = colors[c3 + 2];\n          const minY = Math.round(y1),\n                maxY = Math.round(y3);\n          let xa, car, cag, cab;\n          let xb, cbr, cbg, cbb;\n\n          for (let y = minY; y <= maxY; y++) {\n            if (y < y2) {\n              let k;\n\n              if (y < y1) {\n                k = 0;\n              } else {\n                k = (y1 - y) / (y1 - y2);\n              }\n\n              xa = x1 - (x1 - x2) * k;\n              car = c1r - (c1r - c2r) * k;\n              cag = c1g - (c1g - c2g) * k;\n              cab = c1b - (c1b - c2b) * k;\n            } else {\n              let k;\n\n              if (y > y3) {\n                k = 1;\n              } else if (y2 === y3) {\n                k = 0;\n              } else {\n                k = (y2 - y) / (y2 - y3);\n              }\n\n              xa = x2 - (x2 - x3) * k;\n              car = c2r - (c2r - c3r) * k;\n              cag = c2g - (c2g - c3g) * k;\n              cab = c2b - (c2b - c3b) * k;\n            }\n\n            let k;\n\n            if (y < y1) {\n              k = 0;\n            } else if (y > y3) {\n              k = 1;\n            } else {\n              k = (y1 - y) / (y1 - y3);\n            }\n\n            xb = x1 - (x1 - x3) * k;\n            cbr = c1r - (c1r - c3r) * k;\n            cbg = c1g - (c1g - c3g) * k;\n            cbb = c1b - (c1b - c3b) * k;\n            const x1_ = Math.round(Math.min(xa, xb));\n            const x2_ = Math.round(Math.max(xa, xb));\n            let j = rowSize * y + x1_ * 4;\n\n            for (let x = x1_; x <= x2_; x++) {\n              k = (xa - x) / (xa - xb);\n\n              if (k < 0) {\n                k = 0;\n              } else if (k > 1) {\n                k = 1;\n              }\n\n              bytes[j++] = car - (car - cbr) * k | 0;\n              bytes[j++] = cag - (cag - cbg) * k | 0;\n              bytes[j++] = cab - (cab - cbb) * k | 0;\n              bytes[j++] = 255;\n            }\n          }\n        }\n\n        function drawFigure(data, figure, context) {\n          const ps = figure.coords;\n          const cs = figure.colors;\n          let i, ii;\n\n          switch (figure.type) {\n            case \"lattice\":\n              const verticesPerRow = figure.verticesPerRow;\n              const rows = Math.floor(ps.length / verticesPerRow) - 1;\n              const cols = verticesPerRow - 1;\n\n              for (i = 0; i < rows; i++) {\n                let q = i * verticesPerRow;\n\n                for (let j = 0; j < cols; j++, q++) {\n                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                }\n              }\n\n              break;\n\n            case \"triangles\":\n              for (i = 0, ii = ps.length; i < ii; i += 3) {\n                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n              }\n\n              break;\n\n            default:\n              throw new Error(\"illegal figure\");\n          }\n        }\n\n        class MeshShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._coords = IR[2];\n            this._colors = IR[3];\n            this._figures = IR[4];\n            this._bounds = IR[5];\n            this._bbox = IR[7];\n            this._background = IR[8];\n            this.matrix = null;\n          }\n\n          _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n            const EXPECTED_SCALE = 1.1;\n            const MAX_PATTERN_SIZE = 3000;\n            const BORDER_SIZE = 2;\n            const offsetX = Math.floor(this._bounds[0]);\n            const offsetY = Math.floor(this._bounds[1]);\n            const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n            const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n            const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const scaleX = boundsWidth / width;\n            const scaleY = boundsHeight / height;\n            const context = {\n              coords: this._coords,\n              colors: this._colors,\n              offsetX: -offsetX,\n              offsetY: -offsetY,\n              scaleX: 1 / scaleX,\n              scaleY: 1 / scaleY\n            };\n            const paddedWidth = width + BORDER_SIZE * 2;\n            const paddedHeight = height + BORDER_SIZE * 2;\n            const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n            const tmpCtx = tmpCanvas.context;\n            const data = tmpCtx.createImageData(width, height);\n\n            if (backgroundColor) {\n              const bytes = data.data;\n\n              for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n                bytes[i] = backgroundColor[0];\n                bytes[i + 1] = backgroundColor[1];\n                bytes[i + 2] = backgroundColor[2];\n                bytes[i + 3] = 255;\n              }\n            }\n\n            for (const figure of this._figures) {\n              drawFigure(data, figure, context);\n            }\n\n            tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n            const canvas = tmpCanvas.canvas;\n            return {\n              canvas,\n              offsetX: offsetX - BORDER_SIZE * scaleX,\n              offsetY: offsetY - BORDER_SIZE * scaleY,\n              scaleX,\n              scaleY\n            };\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            applyBoundingBox(ctx, this._bbox);\n            let scale;\n\n            if (shadingFill) {\n              scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n            } else {\n              scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n              if (this.matrix) {\n                const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n                scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n              }\n            }\n\n            const temporaryPatternCanvas = this._createMeshCanvas(scale, shadingFill ? null : this._background, owner.cachedCanvases);\n\n            if (!shadingFill) {\n              ctx.setTransform.apply(ctx, owner.baseTransform);\n\n              if (this.matrix) {\n                ctx.transform.apply(ctx, this.matrix);\n              }\n            }\n\n            ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n            return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n          }\n\n        }\n\n        class DummyShadingPattern extends BaseShadingPattern {\n          getPattern() {\n            return \"hotpink\";\n          }\n\n        }\n\n        function getShadingPattern(IR, cachedCanvasPatterns) {\n          switch (IR[0]) {\n            case \"RadialAxial\":\n              return new RadialAxialShadingPattern(IR, cachedCanvasPatterns);\n\n            case \"Mesh\":\n              return new MeshShadingPattern(IR);\n\n            case \"Dummy\":\n              return new DummyShadingPattern();\n          }\n\n          throw new Error(`Unknown IR type: ${IR[0]}`);\n        }\n\n        const PaintType = {\n          COLORED: 1,\n          UNCOLORED: 2\n        };\n\n        class TilingPattern {\n          static get MAX_PATTERN_SIZE() {\n            return (0, _util.shadow)(this, \"MAX_PATTERN_SIZE\", 3000);\n          }\n\n          constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n            this.operatorList = IR[2];\n            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n            this.bbox = IR[4];\n            this.xstep = IR[5];\n            this.ystep = IR[6];\n            this.paintType = IR[7];\n            this.tilingType = IR[8];\n            this.color = color;\n            this.ctx = ctx;\n            this.canvasGraphicsFactory = canvasGraphicsFactory;\n            this.baseTransform = baseTransform;\n          }\n\n          createPatternCanvas(owner) {\n            const operatorList = this.operatorList;\n            const bbox = this.bbox;\n            const xstep = this.xstep;\n            const ystep = this.ystep;\n            const paintType = this.paintType;\n            const tilingType = this.tilingType;\n            const color = this.color;\n            const canvasGraphicsFactory = this.canvasGraphicsFactory;\n            (0, _util.info)(\"TilingType: \" + tilingType);\n            const x0 = bbox[0],\n                  y0 = bbox[1],\n                  x1 = bbox[2],\n                  y1 = bbox[3];\n\n            const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n            const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n            const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n            const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n            const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n            const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n            const tmpCtx = tmpCanvas.context;\n            const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n            graphics.groupLevel = owner.groupLevel;\n            this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n            let adjustedX0 = x0;\n            let adjustedY0 = y0;\n            let adjustedX1 = x1;\n            let adjustedY1 = y1;\n\n            if (x0 < 0) {\n              adjustedX0 = 0;\n              adjustedX1 += Math.abs(x0);\n            }\n\n            if (y0 < 0) {\n              adjustedY0 = 0;\n              adjustedY1 += Math.abs(y0);\n            }\n\n            tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n            graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n            this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n            graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n            graphics.executeOperatorList(operatorList);\n            graphics.endDrawing();\n            return {\n              canvas: tmpCanvas.canvas,\n              scaleX: dimx.scale,\n              scaleY: dimy.scale,\n              offsetX: adjustedX0,\n              offsetY: adjustedY0\n            };\n          }\n\n          getSizeAndScale(step, realOutputSize, scale) {\n            step = Math.abs(step);\n            const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n            let size = Math.ceil(step * scale);\n\n            if (size >= maxSize) {\n              size = maxSize;\n            } else {\n              scale = size / step;\n            }\n\n            return {\n              scale,\n              size\n            };\n          }\n\n          clipBbox(graphics, x0, y0, x1, y1) {\n            const bboxWidth = x1 - x0;\n            const bboxHeight = y1 - y0;\n            graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n            graphics.clip();\n            graphics.endPath();\n          }\n\n          setFillAndStrokeStyleToContext(graphics, paintType, color) {\n            const context = graphics.ctx,\n                  current = graphics.current;\n\n            switch (paintType) {\n              case PaintType.COLORED:\n                const ctx = this.ctx;\n                context.fillStyle = ctx.fillStyle;\n                context.strokeStyle = ctx.strokeStyle;\n                current.fillColor = ctx.fillStyle;\n                current.strokeColor = ctx.strokeStyle;\n                break;\n\n              case PaintType.UNCOLORED:\n                const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n                context.fillStyle = cssColor;\n                context.strokeStyle = cssColor;\n                current.fillColor = cssColor;\n                current.strokeColor = cssColor;\n                break;\n\n              default:\n                throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n            }\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            let matrix = inverse;\n\n            if (!shadingFill) {\n              matrix = _util.Util.transform(matrix, owner.baseTransform);\n\n              if (this.matrix) {\n                matrix = _util.Util.transform(matrix, this.matrix);\n              }\n            }\n\n            const temporaryPatternCanvas = this.createPatternCanvas(owner);\n            let domMatrix = new DOMMatrix(matrix);\n            domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n            const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n\n            try {\n              pattern.setTransform(domMatrix);\n            } catch (ex) {\n              (0, _util.warn)(`TilingPattern.getPattern: \"${ex?.message}\".`);\n            }\n\n            return pattern;\n          }\n\n        }\n\n        exports.TilingPattern = TilingPattern;\n        /***/\n      },\n      /* 12 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.GlobalWorkerOptions = void 0;\n        const GlobalWorkerOptions = Object.create(null);\n        exports.GlobalWorkerOptions = GlobalWorkerOptions;\n        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n        /***/\n      },\n      /* 13 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MessageHandler = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const CallbackKind = {\n          UNKNOWN: 0,\n          DATA: 1,\n          ERROR: 2\n        };\n        const StreamKind = {\n          UNKNOWN: 0,\n          CANCEL: 1,\n          CANCEL_COMPLETE: 2,\n          CLOSE: 3,\n          ENQUEUE: 4,\n          ERROR: 5,\n          PULL: 6,\n          PULL_COMPLETE: 7,\n          START_COMPLETE: 8\n        };\n\n        function wrapReason(reason) {\n          if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n            (0, _util.warn)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n            return reason;\n          }\n\n          switch (reason.name) {\n            case \"AbortException\":\n              return new _util.AbortException(reason.message);\n\n            case \"MissingPDFException\":\n              return new _util.MissingPDFException(reason.message);\n\n            case \"PasswordException\":\n              return new _util.PasswordException(reason.message, reason.code);\n\n            case \"UnexpectedResponseException\":\n              return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n            case \"UnknownErrorException\":\n              return new _util.UnknownErrorException(reason.message, reason.details);\n\n            default:\n              return new _util.UnknownErrorException(reason.message, reason.toString());\n          }\n        }\n\n        class MessageHandler {\n          constructor(sourceName, targetName, comObj) {\n            this.sourceName = sourceName;\n            this.targetName = targetName;\n            this.comObj = comObj;\n            this.callbackId = 1;\n            this.streamId = 1;\n            this.postMessageTransfers = true;\n            this.streamSinks = Object.create(null);\n            this.streamControllers = Object.create(null);\n            this.callbackCapabilities = Object.create(null);\n            this.actionHandler = Object.create(null);\n\n            this._onComObjOnMessage = event => {\n              const data = event.data;\n\n              if (data.targetName !== this.sourceName) {\n                return;\n              }\n\n              if (data.stream) {\n                this._processStreamMessage(data);\n\n                return;\n              }\n\n              if (data.callback) {\n                const callbackId = data.callbackId;\n                const capability = this.callbackCapabilities[callbackId];\n\n                if (!capability) {\n                  throw new Error(`Cannot resolve callback ${callbackId}`);\n                }\n\n                delete this.callbackCapabilities[callbackId];\n\n                if (data.callback === CallbackKind.DATA) {\n                  capability.resolve(data.data);\n                } else if (data.callback === CallbackKind.ERROR) {\n                  capability.reject(wrapReason(data.reason));\n                } else {\n                  throw new Error(\"Unexpected callback case\");\n                }\n\n                return;\n              }\n\n              const action = this.actionHandler[data.action];\n\n              if (!action) {\n                throw new Error(`Unknown action from worker: ${data.action}`);\n              }\n\n              if (data.callbackId) {\n                const cbSourceName = this.sourceName;\n                const cbTargetName = data.sourceName;\n                new Promise(function (resolve) {\n                  resolve(action(data.data));\n                }).then(function (result) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.DATA,\n                    callbackId: data.callbackId,\n                    data: result\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.ERROR,\n                    callbackId: data.callbackId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                return;\n              }\n\n              if (data.streamId) {\n                this._createStreamSink(data);\n\n                return;\n              }\n\n              action(data.data);\n            };\n\n            comObj.addEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n          on(actionName, handler) {\n            const ah = this.actionHandler;\n\n            if (ah[actionName]) {\n              throw new Error(`There is already an actionName called \"${actionName}\"`);\n            }\n\n            ah[actionName] = handler;\n          }\n\n          send(actionName, data, transfers) {\n            this._postMessage({\n              sourceName: this.sourceName,\n              targetName: this.targetName,\n              action: actionName,\n              data\n            }, transfers);\n          }\n\n          sendWithPromise(actionName, data, transfers) {\n            const callbackId = this.callbackId++;\n            const capability = (0, _util.createPromiseCapability)();\n            this.callbackCapabilities[callbackId] = capability;\n\n            try {\n              this._postMessage({\n                sourceName: this.sourceName,\n                targetName: this.targetName,\n                action: actionName,\n                callbackId,\n                data\n              }, transfers);\n            } catch (ex) {\n              capability.reject(ex);\n            }\n\n            return capability.promise;\n          }\n\n          sendWithStream(actionName, data, queueingStrategy, transfers) {\n            const streamId = this.streamId++,\n                  sourceName = this.sourceName,\n                  targetName = this.targetName,\n                  comObj = this.comObj;\n            return new ReadableStream({\n              start: controller => {\n                const startCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId] = {\n                  controller,\n                  startCall: startCapability,\n                  pullCall: null,\n                  cancelCall: null,\n                  isClosed: false\n                };\n\n                this._postMessage({\n                  sourceName,\n                  targetName,\n                  action: actionName,\n                  streamId,\n                  data,\n                  desiredSize: controller.desiredSize\n                }, transfers);\n\n                return startCapability.promise;\n              },\n              pull: controller => {\n                const pullCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].pullCall = pullCapability;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL,\n                  streamId,\n                  desiredSize: controller.desiredSize\n                });\n                return pullCapability.promise;\n              },\n              cancel: reason => {\n                (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                const cancelCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].cancelCall = cancelCapability;\n                this.streamControllers[streamId].isClosed = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n                return cancelCapability.promise;\n              }\n            }, queueingStrategy);\n          }\n\n          _createStreamSink(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const self = this,\n                  action = this.actionHandler[data.action];\n            const streamSink = {\n              enqueue(chunk) {\n                let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n                let transfers = arguments.length > 2 ? arguments[2] : undefined;\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                const lastDesiredSize = this.desiredSize;\n                this.desiredSize -= size;\n\n                if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                  this.sinkCapability = (0, _util.createPromiseCapability)();\n                  this.ready = this.sinkCapability.promise;\n                }\n\n                self._postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ENQUEUE,\n                  streamId,\n                  chunk\n                }, transfers);\n              },\n\n              close() {\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CLOSE,\n                  streamId\n                });\n                delete self.streamSinks[streamId];\n              },\n\n              error(reason) {\n                (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ERROR,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              },\n\n              sinkCapability: (0, _util.createPromiseCapability)(),\n              onPull: null,\n              onCancel: null,\n              isCancelled: false,\n              desiredSize: data.desiredSize,\n              ready: null\n            };\n            streamSink.sinkCapability.resolve();\n            streamSink.ready = streamSink.sinkCapability.promise;\n            this.streamSinks[streamId] = streamSink;\n            new Promise(function (resolve) {\n              resolve(action(data.data, streamSink));\n            }).then(function () {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                success: true\n              });\n            }, function (reason) {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                reason: wrapReason(reason)\n              });\n            });\n          }\n\n          _processStreamMessage(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const streamController = this.streamControllers[streamId],\n                  streamSink = this.streamSinks[streamId];\n\n            switch (data.stream) {\n              case StreamKind.START_COMPLETE:\n                if (data.success) {\n                  streamController.startCall.resolve();\n                } else {\n                  streamController.startCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL_COMPLETE:\n                if (data.success) {\n                  streamController.pullCall.resolve();\n                } else {\n                  streamController.pullCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL:\n                if (!streamSink) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                  break;\n                }\n\n                if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n                  streamSink.sinkCapability.resolve();\n                }\n\n                streamSink.desiredSize = data.desiredSize;\n                new Promise(function (resolve) {\n                  resolve(streamSink.onPull && streamSink.onPull());\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                break;\n\n              case StreamKind.ENQUEUE:\n                (0, _util.assert)(streamController, \"enqueue should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.controller.enqueue(data.chunk);\n                break;\n\n              case StreamKind.CLOSE:\n                (0, _util.assert)(streamController, \"close should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.isClosed = true;\n                streamController.controller.close();\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.ERROR:\n                (0, _util.assert)(streamController, \"error should have stream controller\");\n                streamController.controller.error(wrapReason(data.reason));\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.CANCEL_COMPLETE:\n                if (data.success) {\n                  streamController.cancelCall.resolve();\n                } else {\n                  streamController.cancelCall.reject(wrapReason(data.reason));\n                }\n\n                this._deleteStreamController(streamController, streamId);\n\n                break;\n\n              case StreamKind.CANCEL:\n                if (!streamSink) {\n                  break;\n                }\n\n                new Promise(function (resolve) {\n                  resolve(streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason)));\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                streamSink.sinkCapability.reject(wrapReason(data.reason));\n                streamSink.isCancelled = true;\n                delete this.streamSinks[streamId];\n                break;\n\n              default:\n                throw new Error(\"Unexpected stream case\");\n            }\n          }\n\n          async _deleteStreamController(streamController, streamId) {\n            await Promise.allSettled([streamController.startCall && streamController.startCall.promise, streamController.pullCall && streamController.pullCall.promise, streamController.cancelCall && streamController.cancelCall.promise]);\n            delete this.streamControllers[streamId];\n          }\n\n          _postMessage(message, transfers) {\n            if (transfers && this.postMessageTransfers) {\n              this.comObj.postMessage(message, transfers);\n            } else {\n              this.comObj.postMessage(message);\n            }\n          }\n\n          destroy() {\n            this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n        }\n\n        exports.MessageHandler = MessageHandler;\n        /***/\n      },\n      /* 14 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Metadata = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class Metadata {\n          constructor(_ref23) {\n            let {\n              parsedData,\n              rawData\n            } = _ref23;\n            this._metadataMap = parsedData;\n            this._data = rawData;\n          }\n\n          getRaw() {\n            return this._data;\n          }\n\n          get(name) {\n            return this._metadataMap.get(name) ?? null;\n          }\n\n          getAll() {\n            return (0, _util.objectFromMap)(this._metadataMap);\n          }\n\n          has(name) {\n            return this._metadataMap.has(name);\n          }\n\n        }\n\n        exports.Metadata = Metadata;\n        /***/\n      },\n      /* 15 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OptionalContentConfig = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class OptionalContentGroup {\n          constructor(name, intent) {\n            this.visible = true;\n            this.name = name;\n            this.intent = intent;\n          }\n\n        }\n\n        class OptionalContentConfig {\n          constructor(data) {\n            this.name = null;\n            this.creator = null;\n            this._order = null;\n            this._groups = new Map();\n\n            if (data === null) {\n              return;\n            }\n\n            this.name = data.name;\n            this.creator = data.creator;\n            this._order = data.order;\n\n            for (const group of data.groups) {\n              this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n            }\n\n            if (data.baseState === \"OFF\") {\n              for (const group of this._groups) {\n                group.visible = false;\n              }\n            }\n\n            for (const on of data.on) {\n              this._groups.get(on).visible = true;\n            }\n\n            for (const off of data.off) {\n              this._groups.get(off).visible = false;\n            }\n          }\n\n          _evaluateVisibilityExpression(array) {\n            const length = array.length;\n\n            if (length < 2) {\n              return true;\n            }\n\n            const operator = array[0];\n\n            for (let i = 1; i < length; i++) {\n              const element = array[i];\n              let state;\n\n              if (Array.isArray(element)) {\n                state = this._evaluateVisibilityExpression(element);\n              } else if (this._groups.has(element)) {\n                state = this._groups.get(element).visible;\n              } else {\n                (0, _util.warn)(`Optional content group not found: ${element}`);\n                return true;\n              }\n\n              switch (operator) {\n                case \"And\":\n                  if (!state) {\n                    return false;\n                  }\n\n                  break;\n\n                case \"Or\":\n                  if (state) {\n                    return true;\n                  }\n\n                  break;\n\n                case \"Not\":\n                  return !state;\n\n                default:\n                  return true;\n              }\n            }\n\n            return operator === \"And\";\n          }\n\n          isVisible(group) {\n            if (this._groups.size === 0) {\n              return true;\n            }\n\n            if (!group) {\n              (0, _util.warn)(\"Optional content group not defined.\");\n              return true;\n            }\n\n            if (group.type === \"OCG\") {\n              if (!this._groups.has(group.id)) {\n                (0, _util.warn)(`Optional content group not found: ${group.id}`);\n                return true;\n              }\n\n              return this._groups.get(group.id).visible;\n            } else if (group.type === \"OCMD\") {\n              if (group.expression) {\n                return this._evaluateVisibilityExpression(group.expression);\n              }\n\n              if (!group.policy || group.policy === \"AnyOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              } else if (group.policy === \"AnyOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n\n              (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n              return true;\n            }\n\n            (0, _util.warn)(`Unknown group type ${group.type}.`);\n            return true;\n          }\n\n          setVisibility(id) {\n            let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return;\n            }\n\n            this._groups.get(id).visible = !!visible;\n          }\n\n          getOrder() {\n            if (!this._groups.size) {\n              return null;\n            }\n\n            if (this._order) {\n              return this._order.slice();\n            }\n\n            return Array.from(this._groups.keys());\n          }\n\n          getGroups() {\n            return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;\n          }\n\n          getGroup(id) {\n            return this._groups.get(id) || null;\n          }\n\n        }\n\n        exports.OptionalContentConfig = OptionalContentConfig;\n        /***/\n      },\n      /* 16 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFDataTransportStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        class PDFDataTransportStream {\n          constructor(params, pdfDataRangeTransport) {\n            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n            this._queuedChunks = [];\n            this._progressiveDone = params.progressiveDone || false;\n            this._contentDispositionFilename = params.contentDispositionFilename || null;\n            const initialData = params.initialData;\n\n            if (initialData?.length > 0) {\n              const buffer = new Uint8Array(initialData).buffer;\n\n              this._queuedChunks.push(buffer);\n            }\n\n            this._pdfDataRangeTransport = pdfDataRangeTransport;\n            this._isStreamingSupported = !params.disableStream;\n            this._isRangeSupported = !params.disableRange;\n            this._contentLength = params.length;\n            this._fullRequestReader = null;\n            this._rangeReaders = [];\n\n            this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n              this._onReceiveData({\n                begin,\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n              this._onProgress({\n                loaded,\n                total\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n              this._onReceiveData({\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n              this._onProgressiveDone();\n            });\n\n            this._pdfDataRangeTransport.transportReady();\n          }\n\n          _onReceiveData(args) {\n            const buffer = new Uint8Array(args.chunk).buffer;\n\n            if (args.begin === undefined) {\n              if (this._fullRequestReader) {\n                this._fullRequestReader._enqueue(buffer);\n              } else {\n                this._queuedChunks.push(buffer);\n              }\n            } else {\n              const found = this._rangeReaders.some(function (rangeReader) {\n                if (rangeReader._begin !== args.begin) {\n                  return false;\n                }\n\n                rangeReader._enqueue(buffer);\n\n                return true;\n              });\n\n              (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n            }\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          _onProgress(evt) {\n            if (evt.total === undefined) {\n              const firstReader = this._rangeReaders[0];\n\n              if (firstReader?.onProgress) {\n                firstReader.onProgress({\n                  loaded: evt.loaded\n                });\n              }\n            } else {\n              const fullReader = this._fullRequestReader;\n\n              if (fullReader?.onProgress) {\n                fullReader.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            }\n          }\n\n          _onProgressiveDone() {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.progressiveDone();\n            }\n\n            this._progressiveDone = true;\n          }\n\n          _removeRangeReader(reader) {\n            const i = this._rangeReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n            const queuedChunks = this._queuedChunks;\n            this._queuedChunks = null;\n            return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n            this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n            this._rangeReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n\n            this._pdfDataRangeTransport.abort();\n          }\n\n        }\n\n        exports.PDFDataTransportStream = PDFDataTransportStream;\n\n        class PDFDataTransportStreamReader {\n          constructor(stream, queuedChunks) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this._stream = stream;\n            this._done = progressiveDone || false;\n            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\n            this._queuedChunks = queuedChunks || [];\n            this._loaded = 0;\n\n            for (const chunk of this._queuedChunks) {\n              this._loaded += chunk.byteLength;\n            }\n\n            this._requests = [];\n            this._headersReady = Promise.resolve();\n            stream._fullRequestReader = this;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunks.push(chunk);\n            }\n\n            this._loaded += chunk.byteLength;\n          }\n\n          get headersReady() {\n            return this._headersReady;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._stream._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._stream._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._stream._contentLength;\n          }\n\n          async read() {\n            if (this._queuedChunks.length > 0) {\n              const chunk = this._queuedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          progressiveDone() {\n            if (this._done) {\n              return;\n            }\n\n            this._done = true;\n          }\n\n        }\n\n        class PDFDataTransportStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._begin = begin;\n            this._end = end;\n            this._queuedChunk = null;\n            this._requests = [];\n            this._done = false;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length === 0) {\n              this._queuedChunk = chunk;\n            } else {\n              const requestsCapability = this._requests.shift();\n\n              requestsCapability.resolve({\n                value: chunk,\n                done: false\n              });\n\n              for (const requestCapability of this._requests) {\n                requestCapability.resolve({\n                  value: undefined,\n                  done: true\n                });\n              }\n\n              this._requests.length = 0;\n            }\n\n            this._done = true;\n\n            this._stream._removeRangeReader(this);\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._stream._removeRangeReader(this);\n          }\n\n        }\n        /***/\n\n      },\n      /* 17 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaText = void 0;\n\n        class XfaText {\n          static textContent(xfa) {\n            const items = [];\n            const output = {\n              items,\n              styles: Object.create(null)\n            };\n\n            function walk(node) {\n              if (!node) {\n                return;\n              }\n\n              let str = null;\n              const name = node.name;\n\n              if (name === \"#text\") {\n                str = node.value;\n              } else if (!XfaText.shouldBuildText(name)) {\n                return;\n              } else if (node?.attributes?.textContent) {\n                str = node.attributes.textContent;\n              } else if (node.value) {\n                str = node.value;\n              }\n\n              if (str !== null) {\n                items.push({\n                  str\n                });\n              }\n\n              if (!node.children) {\n                return;\n              }\n\n              for (const child of node.children) {\n                walk(child);\n              }\n            }\n\n            walk(xfa);\n            return output;\n          }\n\n          static shouldBuildText(name) {\n            return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\n          }\n\n        }\n\n        exports.XfaText = XfaText;\n        /***/\n      },\n      /* 18 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationLayer = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _scripting_utils = __w_pdfjs_require__(19);\n\n        const DEFAULT_TAB_INDEX = 1000;\n        const GetElementsByNameSet = new WeakSet();\n\n        class AnnotationElementFactory {\n          static create(parameters) {\n            const subtype = parameters.data.annotationType;\n\n            switch (subtype) {\n              case _util.AnnotationType.LINK:\n                return new LinkAnnotationElement(parameters);\n\n              case _util.AnnotationType.TEXT:\n                return new TextAnnotationElement(parameters);\n\n              case _util.AnnotationType.WIDGET:\n                const fieldType = parameters.data.fieldType;\n\n                switch (fieldType) {\n                  case \"Tx\":\n                    return new TextWidgetAnnotationElement(parameters);\n\n                  case \"Btn\":\n                    if (parameters.data.radioButton) {\n                      return new RadioButtonWidgetAnnotationElement(parameters);\n                    } else if (parameters.data.checkBox) {\n                      return new CheckboxWidgetAnnotationElement(parameters);\n                    }\n\n                    return new PushButtonWidgetAnnotationElement(parameters);\n\n                  case \"Ch\":\n                    return new ChoiceWidgetAnnotationElement(parameters);\n                }\n\n                return new WidgetAnnotationElement(parameters);\n\n              case _util.AnnotationType.POPUP:\n                return new PopupAnnotationElement(parameters);\n\n              case _util.AnnotationType.FREETEXT:\n                return new FreeTextAnnotationElement(parameters);\n\n              case _util.AnnotationType.LINE:\n                return new LineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUARE:\n                return new SquareAnnotationElement(parameters);\n\n              case _util.AnnotationType.CIRCLE:\n                return new CircleAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYLINE:\n                return new PolylineAnnotationElement(parameters);\n\n              case _util.AnnotationType.CARET:\n                return new CaretAnnotationElement(parameters);\n\n              case _util.AnnotationType.INK:\n                return new InkAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYGON:\n                return new PolygonAnnotationElement(parameters);\n\n              case _util.AnnotationType.HIGHLIGHT:\n                return new HighlightAnnotationElement(parameters);\n\n              case _util.AnnotationType.UNDERLINE:\n                return new UnderlineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUIGGLY:\n                return new SquigglyAnnotationElement(parameters);\n\n              case _util.AnnotationType.STRIKEOUT:\n                return new StrikeOutAnnotationElement(parameters);\n\n              case _util.AnnotationType.STAMP:\n                return new StampAnnotationElement(parameters);\n\n              case _util.AnnotationType.FILEATTACHMENT:\n                return new FileAttachmentAnnotationElement(parameters);\n\n              default:\n                return new AnnotationElement(parameters);\n            }\n          }\n\n        }\n\n        class AnnotationElement {\n          constructor(parameters) {\n            let {\n              isRenderable = false,\n              ignoreBorder = false,\n              createQuadrilaterals = false\n            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.isRenderable = isRenderable;\n            this.data = parameters.data;\n            this.layer = parameters.layer;\n            this.page = parameters.page;\n            this.viewport = parameters.viewport;\n            this.linkService = parameters.linkService;\n            this.downloadManager = parameters.downloadManager;\n            this.imageResourcesPath = parameters.imageResourcesPath;\n            this.renderForms = parameters.renderForms;\n            this.svgFactory = parameters.svgFactory;\n            this.annotationStorage = parameters.annotationStorage;\n            this.enableScripting = parameters.enableScripting;\n            this.hasJSActions = parameters.hasJSActions;\n            this._fieldObjects = parameters.fieldObjects;\n            this._mouseState = parameters.mouseState;\n\n            if (isRenderable) {\n              this.container = this._createContainer(ignoreBorder);\n            }\n\n            if (createQuadrilaterals) {\n              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n            }\n          }\n\n          _createContainer() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            const data = this.data,\n                  page = this.page,\n                  viewport = this.viewport;\n            const container = document.createElement(\"section\");\n            let width = data.rect[2] - data.rect[0];\n            let height = data.rect[3] - data.rect[1];\n            container.setAttribute(\"data-annotation-id\", data.id);\n\n            const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n            container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n            container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n            if (!ignoreBorder && data.borderStyle.width > 0) {\n              container.style.borderWidth = `${data.borderStyle.width}px`;\n\n              if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n                width -= 2 * data.borderStyle.width;\n                height -= 2 * data.borderStyle.width;\n              }\n\n              const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n              const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n              if (horizontalRadius > 0 || verticalRadius > 0) {\n                const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n                container.style.borderRadius = radius;\n              }\n\n              switch (data.borderStyle.style) {\n                case _util.AnnotationBorderStyleType.SOLID:\n                  container.style.borderStyle = \"solid\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.DASHED:\n                  container.style.borderStyle = \"dashed\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.BEVELED:\n                  (0, _util.warn)(\"Unimplemented border style: beveled\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.INSET:\n                  (0, _util.warn)(\"Unimplemented border style: inset\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.UNDERLINE:\n                  container.style.borderBottomStyle = \"solid\";\n                  break;\n\n                default:\n                  break;\n              }\n\n              const borderColor = data.borderColor || data.color || null;\n\n              if (borderColor) {\n                container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n              } else {\n                container.style.borderWidth = 0;\n              }\n            }\n\n            container.style.left = `${rect[0]}px`;\n            container.style.top = `${rect[1]}px`;\n            container.style.width = `${width}px`;\n            container.style.height = `${height}px`;\n            return container;\n          }\n\n          _createQuadrilaterals() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.data.quadPoints) {\n              return null;\n            }\n\n            const quadrilaterals = [];\n            const savedRect = this.data.rect;\n\n            for (const quadPoint of this.data.quadPoints) {\n              this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n              quadrilaterals.push(this._createContainer(ignoreBorder));\n            }\n\n            this.data.rect = savedRect;\n            return quadrilaterals;\n          }\n\n          _createPopup(trigger, data) {\n            let container = this.container;\n\n            if (this.quadrilaterals) {\n              trigger = trigger || this.quadrilaterals;\n              container = this.quadrilaterals[0];\n            }\n\n            if (!trigger) {\n              trigger = document.createElement(\"div\");\n              trigger.style.height = container.style.height;\n              trigger.style.width = container.style.width;\n              container.appendChild(trigger);\n            }\n\n            const popupElement = new PopupElement({\n              container,\n              trigger,\n              color: data.color,\n              titleObj: data.titleObj,\n              modificationDate: data.modificationDate,\n              contentsObj: data.contentsObj,\n              hideWrapper: true\n            });\n            const popup = popupElement.render();\n            popup.style.left = container.style.width;\n            container.appendChild(popup);\n          }\n\n          _renderQuadrilaterals(className) {\n            for (const quadrilateral of this.quadrilaterals) {\n              quadrilateral.className = className;\n            }\n\n            return this.quadrilaterals;\n          }\n\n          render() {\n            (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n          }\n\n          _getElementsByName(name) {\n            let skipId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const fields = [];\n\n            if (this._fieldObjects) {\n              const fieldObj = this._fieldObjects[name];\n\n              if (fieldObj) {\n                for (const {\n                  page,\n                  id,\n                  exportValues\n                } of fieldObj) {\n                  if (page === -1) {\n                    continue;\n                  }\n\n                  if (id === skipId) {\n                    continue;\n                  }\n\n                  const exportValue = typeof exportValues === \"string\" ? exportValues : null;\n                  const domElement = document.getElementById(id);\n\n                  if (domElement && !GetElementsByNameSet.has(domElement)) {\n                    (0, _util.warn)(`_getElementsByName - element not allowed: ${id}`);\n                    continue;\n                  }\n\n                  fields.push({\n                    id,\n                    exportValue,\n                    domElement\n                  });\n                }\n              }\n\n              return fields;\n            }\n\n            for (const domElement of document.getElementsByName(name)) {\n              const {\n                id,\n                exportValue\n              } = domElement;\n\n              if (id === skipId) {\n                continue;\n              }\n\n              if (!GetElementsByNameSet.has(domElement)) {\n                continue;\n              }\n\n              fields.push({\n                id,\n                exportValue,\n                domElement\n              });\n            }\n\n            return fields;\n          }\n\n          static get platform() {\n            const platform = typeof navigator !== \"undefined\" ? navigator.platform : \"\";\n            return (0, _util.shadow)(this, \"platform\", {\n              isWin: platform.includes(\"Win\"),\n              isMac: platform.includes(\"Mac\")\n            });\n          }\n\n        }\n\n        class LinkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.resetForm || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n            super(parameters, {\n              isRenderable,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            const {\n              data,\n              linkService\n            } = this;\n            const link = document.createElement(\"a\");\n\n            if (data.url) {\n              if (!linkService.addLinkAttributes) {\n                (0, _util.warn)(\"LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.\");\n              }\n\n              linkService.addLinkAttributes?.(link, data.url, data.newWindow);\n            } else if (data.action) {\n              this._bindNamedAction(link, data.action);\n            } else if (data.dest) {\n              this._bindLink(link, data.dest);\n            } else {\n              let hasClickAction = false;\n\n              if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n                hasClickAction = true;\n\n                this._bindJSAction(link, data);\n              }\n\n              if (data.resetForm) {\n                this._bindResetFormAction(link, data.resetForm);\n              } else if (!hasClickAction) {\n                this._bindLink(link, \"\");\n              }\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"linkAnnotation\").map((quadrilateral, index) => {\n                const linkElement = index === 0 ? link : link.cloneNode();\n                quadrilateral.appendChild(linkElement);\n                return quadrilateral;\n              });\n            }\n\n            this.container.className = \"linkAnnotation\";\n            this.container.appendChild(link);\n            return this.container;\n          }\n\n          _bindLink(link, destination) {\n            link.href = this.linkService.getDestinationHash(destination);\n\n            link.onclick = () => {\n              if (destination) {\n                this.linkService.goToDestination(destination);\n              }\n\n              return false;\n            };\n\n            if (destination || destination === \"\") {\n              link.className = \"internalLink\";\n            }\n          }\n\n          _bindNamedAction(link, action) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.linkService.executeNamedAction(action);\n              return false;\n            };\n\n            link.className = \"internalLink\";\n          }\n\n          _bindJSAction(link, data) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n            const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n            for (const name of Object.keys(data.actions)) {\n              const jsName = map.get(name);\n\n              if (!jsName) {\n                continue;\n              }\n\n              link[jsName] = () => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: data.id,\n                    name\n                  }\n                });\n                return false;\n              };\n            }\n\n            if (!link.onclick) {\n              link.onclick = () => false;\n            }\n\n            link.className = \"internalLink\";\n          }\n\n          _bindResetFormAction(link, resetForm) {\n            const otherClickAction = link.onclick;\n\n            if (!otherClickAction) {\n              link.href = this.linkService.getAnchorUrl(\"\");\n            }\n\n            link.className = \"internalLink\";\n\n            if (!this._fieldObjects) {\n              (0, _util.warn)(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n\n              if (!otherClickAction) {\n                link.onclick = () => false;\n              }\n\n              return;\n            }\n\n            link.onclick = () => {\n              if (otherClickAction) {\n                otherClickAction();\n              }\n\n              const {\n                fields: resetFormFields,\n                refs: resetFormRefs,\n                include\n              } = resetForm;\n              const allFields = [];\n\n              if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n                const fieldIds = new Set(resetFormRefs);\n\n                for (const fieldName of resetFormFields) {\n                  const fields = this._fieldObjects[fieldName] || [];\n\n                  for (const {\n                    id\n                  } of fields) {\n                    fieldIds.add(id);\n                  }\n                }\n\n                for (const fields of Object.values(this._fieldObjects)) {\n                  for (const field of fields) {\n                    if (fieldIds.has(field.id) === include) {\n                      allFields.push(field);\n                    }\n                  }\n                }\n              } else {\n                for (const fields of Object.values(this._fieldObjects)) {\n                  allFields.push(...fields);\n                }\n              }\n\n              const storage = this.annotationStorage;\n              const allIds = [];\n\n              for (const field of allFields) {\n                const {\n                  id\n                } = field;\n                allIds.push(id);\n\n                switch (field.type) {\n                  case \"text\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value,\n                        valueAsString: value\n                      });\n                      break;\n                    }\n\n                  case \"checkbox\":\n                  case \"radiobutton\":\n                    {\n                      const value = field.defaultValue === field.exportValues;\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  case \"combobox\":\n                  case \"listbox\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  default:\n                    continue;\n                }\n\n                const domElement = document.getElementById(id);\n\n                if (!domElement || !GetElementsByNameSet.has(domElement)) {\n                  continue;\n                }\n\n                domElement.dispatchEvent(new Event(\"resetform\"));\n              }\n\n              if (this.enableScripting) {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: \"app\",\n                    ids: allIds,\n                    name: \"ResetForm\"\n                  }\n                });\n              }\n\n              return false;\n            };\n          }\n\n        }\n\n        class TextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            this.container.className = \"textAnnotation\";\n            const image = document.createElement(\"img\");\n            image.style.height = this.container.style.height;\n            image.style.width = this.container.style.width;\n            image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n            image.alt = \"[{{type}} Annotation]\";\n            image.dataset.l10nId = \"text_annotation_type\";\n            image.dataset.l10nArgs = JSON.stringify({\n              type: this.data.name\n            });\n\n            if (!this.data.hasPopup) {\n              this._createPopup(image, this.data);\n            }\n\n            this.container.appendChild(image);\n            return this.container;\n          }\n\n        }\n\n        class WidgetAnnotationElement extends AnnotationElement {\n          render() {\n            if (this.data.alternativeText) {\n              this.container.title = this.data.alternativeText;\n            }\n\n            return this.container;\n          }\n\n          _getKeyModifier(event) {\n            const {\n              isWin,\n              isMac\n            } = AnnotationElement.platform;\n            return isWin && event.ctrlKey || isMac && event.metaKey;\n          }\n\n          _setEventListener(element, baseName, eventName, valueGetter) {\n            if (baseName.includes(\"mouse\")) {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: valueGetter(event),\n                    shift: event.shiftKey,\n                    modifier: this._getKeyModifier(event)\n                  }\n                });\n              });\n            } else {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: event.target.checked\n                  }\n                });\n              });\n            }\n          }\n\n          _setEventListeners(element, names, getter) {\n            for (const [baseName, eventName] of names) {\n              if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n                this._setEventListener(element, baseName, eventName, getter);\n              }\n            }\n          }\n\n          _setBackgroundColor(element) {\n            const color = this.data.backgroundColor || null;\n            element.style.backgroundColor = color === null ? \"transparent\" : _util.Util.makeHexColor(color[0], color[1], color[2]);\n          }\n\n          _dispatchEventFromSandbox(actions, jsEvent) {\n            const setColor = (jsName, styleName, event) => {\n              const color = event.detail[jsName];\n              event.target.style[styleName] = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));\n            };\n\n            const commonActions = {\n              display: event => {\n                const hidden = event.detail.display % 2 === 1;\n                event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden,\n                  print: event.detail.display === 0 || event.detail.display === 3\n                });\n              },\n              print: event => {\n                this.annotationStorage.setValue(this.data.id, {\n                  print: event.detail.print\n                });\n              },\n              hidden: event => {\n                event.target.style.visibility = event.detail.hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden: event.detail.hidden\n                });\n              },\n              focus: event => {\n                setTimeout(() => event.target.focus({\n                  preventScroll: false\n                }), 0);\n              },\n              userName: event => {\n                event.target.title = event.detail.userName;\n              },\n              readonly: event => {\n                if (event.detail.readonly) {\n                  event.target.setAttribute(\"readonly\", \"\");\n                } else {\n                  event.target.removeAttribute(\"readonly\");\n                }\n              },\n              required: event => {\n                if (event.detail.required) {\n                  event.target.setAttribute(\"required\", \"\");\n                } else {\n                  event.target.removeAttribute(\"required\");\n                }\n              },\n              bgColor: event => {\n                setColor(\"bgColor\", \"backgroundColor\", event);\n              },\n              fillColor: event => {\n                setColor(\"fillColor\", \"backgroundColor\", event);\n              },\n              fgColor: event => {\n                setColor(\"fgColor\", \"color\", event);\n              },\n              textColor: event => {\n                setColor(\"textColor\", \"color\", event);\n              },\n              borderColor: event => {\n                setColor(\"borderColor\", \"borderColor\", event);\n              },\n              strokeColor: event => {\n                setColor(\"strokeColor\", \"borderColor\", event);\n              }\n            };\n\n            for (const name of Object.keys(jsEvent.detail)) {\n              const action = actions[name] || commonActions[name];\n\n              if (action) {\n                action(jsEvent);\n              }\n            }\n          }\n\n        }\n\n        class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            const isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          setPropertyOnSiblings(base, key, value, keyInStorage) {\n            const storage = this.annotationStorage;\n\n            for (const element of this._getElementsByName(base.name, base.id)) {\n              if (element.domElement) {\n                element.domElement[key] = value;\n              }\n\n              storage.setValue(element.id, {\n                [keyInStorage]: value\n              });\n            }\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            this.container.className = \"textWidgetAnnotation\";\n            let element = null;\n\n            if (this.renderForms) {\n              const storedData = storage.getValue(id, {\n                value: this.data.fieldValue,\n                valueAsString: this.data.fieldValue\n              });\n              const textContent = storedData.valueAsString || storedData.value || \"\";\n              const elementData = {\n                userValue: null,\n                formattedValue: null,\n                beforeInputSelectionRange: null,\n                beforeInputValue: null\n              };\n\n              if (this.data.multiLine) {\n                element = document.createElement(\"textarea\");\n                element.textContent = textContent;\n              } else {\n                element = document.createElement(\"input\");\n                element.type = \"text\";\n                element.setAttribute(\"value\", textContent);\n              }\n\n              GetElementsByNameSet.add(element);\n              element.disabled = this.data.readOnly;\n              element.name = this.data.fieldName;\n              element.tabIndex = DEFAULT_TAB_INDEX;\n              elementData.userValue = textContent;\n              element.setAttribute(\"id\", id);\n              element.addEventListener(\"input\", event => {\n                storage.setValue(id, {\n                  value: event.target.value\n                });\n                this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n              });\n              element.addEventListener(\"resetform\", event => {\n                const defaultValue = this.data.defaultFieldValue || \"\";\n                element.value = elementData.userValue = defaultValue;\n                delete elementData.formattedValue;\n              });\n\n              let blurListener = event => {\n                if (elementData.formattedValue) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                event.target.scrollLeft = 0;\n                elementData.beforeInputSelectionRange = null;\n              };\n\n              if (this.enableScripting && this.hasJSActions) {\n                element.addEventListener(\"focus\", event => {\n                  if (elementData.userValue) {\n                    event.target.value = elementData.userValue;\n                  }\n                });\n                element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                  const actions = {\n                    value(event) {\n                      elementData.userValue = event.detail.value || \"\";\n                      storage.setValue(id, {\n                        value: elementData.userValue.toString()\n                      });\n\n                      if (!elementData.formattedValue) {\n                        event.target.value = elementData.userValue;\n                      }\n                    },\n\n                    valueAsString(event) {\n                      elementData.formattedValue = event.detail.valueAsString || \"\";\n\n                      if (event.target !== document.activeElement) {\n                        event.target.value = elementData.formattedValue;\n                      }\n\n                      storage.setValue(id, {\n                        formattedValue: elementData.formattedValue\n                      });\n                    },\n\n                    selRange(event) {\n                      const [selStart, selEnd] = event.detail.selRange;\n\n                      if (selStart >= 0 && selEnd < event.target.value.length) {\n                        event.target.setSelectionRange(selStart, selEnd);\n                      }\n                    }\n\n                  };\n\n                  this._dispatchEventFromSandbox(actions, jsEvent);\n                });\n                element.addEventListener(\"keydown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  let commitKey = -1;\n\n                  if (event.key === \"Escape\") {\n                    commitKey = 0;\n                  } else if (event.key === \"Enter\") {\n                    commitKey = 2;\n                  } else if (event.key === \"Tab\") {\n                    commitKey = 3;\n                  }\n\n                  if (commitKey === -1) {\n                    return;\n                  }\n\n                  elementData.userValue = event.target.value;\n                  this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                    source: this,\n                    detail: {\n                      id,\n                      name: \"Keystroke\",\n                      value: event.target.value,\n                      willCommit: true,\n                      commitKey,\n                      selStart: event.target.selectionStart,\n                      selEnd: event.target.selectionEnd\n                    }\n                  });\n                });\n                const _blurListener = blurListener;\n                blurListener = null;\n                element.addEventListener(\"blur\", event => {\n                  if (this._mouseState.isDown) {\n                    elementData.userValue = event.target.value;\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: event.target.value,\n                        willCommit: true,\n                        commitKey: 1,\n                        selStart: event.target.selectionStart,\n                        selEnd: event.target.selectionEnd\n                      }\n                    });\n                  }\n\n                  _blurListener(event);\n                });\n                element.addEventListener(\"mousedown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  elementData.beforeInputSelectionRange = null;\n                });\n                element.addEventListener(\"keyup\", event => {\n                  if (event.target.selectionStart === event.target.selectionEnd) {\n                    elementData.beforeInputSelectionRange = null;\n                  }\n                });\n                element.addEventListener(\"select\", event => {\n                  elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n                });\n\n                if (this.data.actions?.Keystroke) {\n                  element.addEventListener(\"input\", event => {\n                    let selStart = -1;\n                    let selEnd = -1;\n\n                    if (elementData.beforeInputSelectionRange) {\n                      [selStart, selEnd] = elementData.beforeInputSelectionRange;\n                    }\n\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: elementData.beforeInputValue,\n                        change: event.data,\n                        willCommit: false,\n                        selStart,\n                        selEnd\n                      }\n                    });\n                  });\n                }\n\n                this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n              }\n\n              if (blurListener) {\n                element.addEventListener(\"blur\", blurListener);\n              }\n\n              if (this.data.maxLen !== null) {\n                element.maxLength = this.data.maxLen;\n              }\n\n              if (this.data.comb) {\n                const fieldWidth = this.data.rect[2] - this.data.rect[0];\n                const combWidth = fieldWidth / this.data.maxLen;\n                element.classList.add(\"comb\");\n                element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n              }\n            } else {\n              element = document.createElement(\"div\");\n              element.textContent = this.data.fieldValue;\n              element.style.verticalAlign = \"middle\";\n              element.style.display = \"table-cell\";\n            }\n\n            this._setTextStyle(element);\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n          _setTextStyle(element) {\n            const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n            const {\n              fontSize,\n              fontColor\n            } = this.data.defaultAppearanceData;\n            const style = element.style;\n\n            if (fontSize) {\n              style.fontSize = `${fontSize}px`;\n            }\n\n            style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n            if (this.data.textAlignment !== null) {\n              style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n            }\n          }\n\n        }\n\n        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.exportValue === data.fieldValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== \"Off\";\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            this.container.className = \"buttonWidgetAnnotation checkBox\";\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.disabled = data.readOnly;\n            element.type = \"checkbox\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.setAttribute(\"exportValue\", data.exportValue);\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const checkbox of this._getElementsByName(name, id)) {\n                const curChecked = checked && checkbox.exportValue === data.exportValue;\n\n                if (checkbox.domElement) {\n                  checkbox.domElement.checked = curChecked;\n                }\n\n                storage.setValue(checkbox.id, {\n                  value: curChecked\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue || \"Off\";\n              event.target.checked = defaultValue === data.exportValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    event.target.checked = event.detail.value !== \"Off\";\n                    storage.setValue(id, {\n                      value: event.target.checked\n                    });\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.className = \"buttonWidgetAnnotation radioButton\";\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.fieldValue === data.buttonValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== data.buttonValue;\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.disabled = data.readOnly;\n            element.type = \"radio\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const radio of this._getElementsByName(name, id)) {\n                storage.setValue(radio.id, {\n                  value: false\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue;\n              event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              const pdfButtonValue = data.buttonValue;\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value: event => {\n                    const checked = pdfButtonValue === event.detail.value;\n\n                    for (const radio of this._getElementsByName(event.target.name)) {\n                      const curChecked = checked && radio.id === id;\n\n                      if (radio.domElement) {\n                        radio.domElement.checked = curChecked;\n                      }\n\n                      storage.setValue(radio.id, {\n                        value: curChecked\n                      });\n                    }\n                  }\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n          render() {\n            const container = super.render();\n            container.className = \"buttonWidgetAnnotation pushButton\";\n\n            if (this.data.alternativeText) {\n              container.title = this.data.alternativeText;\n            }\n\n            return container;\n          }\n\n        }\n\n        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.className = \"choiceWidgetAnnotation\";\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            storage.getValue(id, {\n              value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n            });\n            let {\n              fontSize\n            } = this.data.defaultAppearanceData;\n\n            if (!fontSize) {\n              fontSize = 9;\n            }\n\n            const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;\n            const selectElement = document.createElement(\"select\");\n            GetElementsByNameSet.add(selectElement);\n            selectElement.disabled = this.data.readOnly;\n            selectElement.name = this.data.fieldName;\n            selectElement.setAttribute(\"id\", id);\n            selectElement.tabIndex = DEFAULT_TAB_INDEX;\n            selectElement.style.fontSize = `${fontSize}px`;\n\n            if (!this.data.combo) {\n              selectElement.size = this.data.options.length;\n\n              if (this.data.multiSelect) {\n                selectElement.multiple = true;\n              }\n            }\n\n            selectElement.addEventListener(\"resetform\", event => {\n              const defaultValue = this.data.defaultFieldValue;\n\n              for (const option of selectElement.options) {\n                option.selected = option.value === defaultValue;\n              }\n            });\n\n            for (const option of this.data.options) {\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = option.displayValue;\n              optionElement.value = option.exportValue;\n\n              if (this.data.combo) {\n                optionElement.style.fontSize = fontSizeStyle;\n              }\n\n              if (this.data.fieldValue.includes(option.exportValue)) {\n                optionElement.setAttribute(\"selected\", true);\n              }\n\n              selectElement.appendChild(optionElement);\n            }\n\n            const getValue = (event, isExport) => {\n              const name = isExport ? \"value\" : \"textContent\";\n              const options = event.target.options;\n\n              if (!event.target.multiple) {\n                return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n              }\n\n              return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n            };\n\n            const getItems = event => {\n              const options = event.target.options;\n              return Array.prototype.map.call(options, option => {\n                return {\n                  displayValue: option.textContent,\n                  exportValue: option.value\n                };\n              });\n            };\n\n            if (this.enableScripting && this.hasJSActions) {\n              selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    const value = event.detail.value;\n                    const values = new Set(Array.isArray(value) ? value : [value]);\n\n                    for (const option of selectElement.options) {\n                      option.selected = values.has(option.value);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  multipleSelection(event) {\n                    selectElement.multiple = true;\n                  },\n\n                  remove(event) {\n                    const options = selectElement.options;\n                    const index = event.detail.remove;\n                    options[index].selected = false;\n                    selectElement.remove(index);\n\n                    if (options.length > 0) {\n                      const i = Array.prototype.findIndex.call(options, option => option.selected);\n\n                      if (i === -1) {\n                        options[0].selected = true;\n                      }\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  clear(event) {\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    storage.setValue(id, {\n                      value: null,\n                      items: []\n                    });\n                  },\n\n                  insert(event) {\n                    const {\n                      index,\n                      displayValue,\n                      exportValue\n                    } = event.detail.insert;\n                    const optionElement = document.createElement(\"option\");\n                    optionElement.textContent = displayValue;\n                    optionElement.value = exportValue;\n                    selectElement.insertBefore(optionElement, selectElement.children[index]);\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  items(event) {\n                    const {\n                      items\n                    } = event.detail;\n\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    for (const item of items) {\n                      const {\n                        displayValue,\n                        exportValue\n                      } = item;\n                      const optionElement = document.createElement(\"option\");\n                      optionElement.textContent = displayValue;\n                      optionElement.value = exportValue;\n                      selectElement.appendChild(optionElement);\n                    }\n\n                    if (selectElement.options.length > 0) {\n                      selectElement.options[0].selected = true;\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  indices(event) {\n                    const indices = new Set(event.detail.indices);\n\n                    for (const option of event.target.options) {\n                      option.selected = indices.has(option.index);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  editable(event) {\n                    event.target.disabled = !event.detail.editable;\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n              selectElement.addEventListener(\"input\", event => {\n                const exportValue = getValue(event, true);\n                const value = getValue(event, false);\n                storage.setValue(id, {\n                  value: exportValue\n                });\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value,\n                    changeEx: exportValue,\n                    willCommit: true,\n                    commitKey: 1,\n                    keyDown: false\n                  }\n                });\n              });\n\n              this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"]], event => event.target.checked);\n            } else {\n              selectElement.addEventListener(\"input\", function (event) {\n                storage.setValue(id, {\n                  value: getValue(event)\n                });\n              });\n            }\n\n            this._setBackgroundColor(selectElement);\n\n            this.container.appendChild(selectElement);\n            return this.container;\n          }\n\n        }\n\n        class PopupAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            const IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n            this.container.className = \"popupAnnotation\";\n\n            if (IGNORE_TYPES.includes(this.data.parentType)) {\n              return this.container;\n            }\n\n            const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n            const parentElements = this.layer.querySelectorAll(selector);\n\n            if (parentElements.length === 0) {\n              return this.container;\n            }\n\n            const popup = new PopupElement({\n              container: this.container,\n              trigger: Array.from(parentElements),\n              color: this.data.color,\n              titleObj: this.data.titleObj,\n              modificationDate: this.data.modificationDate,\n              contentsObj: this.data.contentsObj\n            });\n            const page = this.page;\n\n            const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n            const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n            const popupTop = rect[1];\n            this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n            this.container.style.left = `${popupLeft}px`;\n            this.container.style.top = `${popupTop}px`;\n            this.container.appendChild(popup.render());\n            return this.container;\n          }\n\n        }\n\n        class PopupElement {\n          constructor(parameters) {\n            this.container = parameters.container;\n            this.trigger = parameters.trigger;\n            this.color = parameters.color;\n            this.titleObj = parameters.titleObj;\n            this.modificationDate = parameters.modificationDate;\n            this.contentsObj = parameters.contentsObj;\n            this.hideWrapper = parameters.hideWrapper || false;\n            this.pinned = false;\n          }\n\n          render() {\n            const BACKGROUND_ENLIGHT = 0.7;\n            const wrapper = document.createElement(\"div\");\n            wrapper.className = \"popupWrapper\";\n            this.hideElement = this.hideWrapper ? wrapper : this.container;\n            this.hideElement.hidden = true;\n            const popup = document.createElement(\"div\");\n            popup.className = \"popup\";\n            const color = this.color;\n\n            if (color) {\n              const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n              const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n              const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n              popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n            }\n\n            const title = document.createElement(\"h1\");\n            title.dir = this.titleObj.dir;\n            title.textContent = this.titleObj.str;\n            popup.appendChild(title);\n\n            const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n            if (dateObject) {\n              const modificationDate = document.createElement(\"span\");\n              modificationDate.textContent = \"{{date}}, {{time}}\";\n              modificationDate.dataset.l10nId = \"annotation_date_string\";\n              modificationDate.dataset.l10nArgs = JSON.stringify({\n                date: dateObject.toLocaleDateString(),\n                time: dateObject.toLocaleTimeString()\n              });\n              popup.appendChild(modificationDate);\n            }\n\n            const contents = this._formatContents(this.contentsObj);\n\n            popup.appendChild(contents);\n\n            if (!Array.isArray(this.trigger)) {\n              this.trigger = [this.trigger];\n            }\n\n            for (const element of this.trigger) {\n              element.addEventListener(\"click\", this._toggle.bind(this));\n              element.addEventListener(\"mouseover\", this._show.bind(this, false));\n              element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n            }\n\n            popup.addEventListener(\"click\", this._hide.bind(this, true));\n            wrapper.appendChild(popup);\n            return wrapper;\n          }\n\n          _formatContents(_ref24) {\n            let {\n              str,\n              dir\n            } = _ref24;\n            const p = document.createElement(\"p\");\n            p.dir = dir;\n            const lines = str.split(/(?:\\r\\n?|\\n)/);\n\n            for (let i = 0, ii = lines.length; i < ii; ++i) {\n              const line = lines[i];\n              p.appendChild(document.createTextNode(line));\n\n              if (i < ii - 1) {\n                p.appendChild(document.createElement(\"br\"));\n              }\n            }\n\n            return p;\n          }\n\n          _toggle() {\n            if (this.pinned) {\n              this._hide(true);\n            } else {\n              this._show(true);\n            }\n          }\n\n          _show() {\n            let pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (pin) {\n              this.pinned = true;\n            }\n\n            if (this.hideElement.hidden) {\n              this.hideElement.hidden = false;\n              this.container.style.zIndex += 1;\n            }\n          }\n\n          _hide() {\n            let unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            if (unpin) {\n              this.pinned = false;\n            }\n\n            if (!this.hideElement.hidden && !this.pinned) {\n              this.hideElement.hidden = true;\n              this.container.style.zIndex -= 1;\n            }\n          }\n\n        }\n\n        class FreeTextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"freeTextAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class LineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"lineAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const line = this.svgFactory.createElement(\"svg:line\");\n            line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n            line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n            line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n            line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n            line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            line.setAttribute(\"stroke\", \"transparent\");\n            svg.appendChild(line);\n            this.container.append(svg);\n\n            this._createPopup(line, data);\n\n            return this.container;\n          }\n\n        }\n\n        class SquareAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"squareAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const square = this.svgFactory.createElement(\"svg:rect\");\n            square.setAttribute(\"x\", borderWidth / 2);\n            square.setAttribute(\"y\", borderWidth / 2);\n            square.setAttribute(\"width\", width - borderWidth);\n            square.setAttribute(\"height\", height - borderWidth);\n            square.setAttribute(\"stroke-width\", borderWidth || 1);\n            square.setAttribute(\"stroke\", \"transparent\");\n            square.setAttribute(\"fill\", \"none\");\n            svg.appendChild(square);\n            this.container.append(svg);\n\n            this._createPopup(square, data);\n\n            return this.container;\n          }\n\n        }\n\n        class CircleAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"circleAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const circle = this.svgFactory.createElement(\"svg:ellipse\");\n            circle.setAttribute(\"cx\", width / 2);\n            circle.setAttribute(\"cy\", height / 2);\n            circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n            circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n            circle.setAttribute(\"stroke-width\", borderWidth || 1);\n            circle.setAttribute(\"stroke\", \"transparent\");\n            circle.setAttribute(\"fill\", \"none\");\n            svg.appendChild(circle);\n            this.container.append(svg);\n\n            this._createPopup(circle, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolylineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"polylineAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            let points = [];\n\n            for (const coordinate of data.vertices) {\n              const x = coordinate.x - data.rect[0];\n              const y = data.rect[3] - coordinate.y;\n              points.push(x + \",\" + y);\n            }\n\n            points = points.join(\" \");\n            const polyline = this.svgFactory.createElement(this.svgElementName);\n            polyline.setAttribute(\"points\", points);\n            polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            polyline.setAttribute(\"stroke\", \"transparent\");\n            polyline.setAttribute(\"fill\", \"none\");\n            svg.appendChild(polyline);\n            this.container.append(svg);\n\n            this._createPopup(polyline, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolygonAnnotationElement extends PolylineAnnotationElement {\n          constructor(parameters) {\n            super(parameters);\n            this.containerClassName = \"polygonAnnotation\";\n            this.svgElementName = \"svg:polygon\";\n          }\n\n        }\n\n        class CaretAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"caretAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class InkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"inkAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n\n            for (const inkList of data.inkLists) {\n              let points = [];\n\n              for (const coordinate of inkList) {\n                const x = coordinate.x - data.rect[0];\n                const y = data.rect[3] - coordinate.y;\n                points.push(`${x},${y}`);\n              }\n\n              points = points.join(\" \");\n              const polyline = this.svgFactory.createElement(this.svgElementName);\n              polyline.setAttribute(\"points\", points);\n              polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n              polyline.setAttribute(\"stroke\", \"transparent\");\n              polyline.setAttribute(\"fill\", \"none\");\n\n              this._createPopup(polyline, data);\n\n              svg.appendChild(polyline);\n            }\n\n            this.container.append(svg);\n            return this.container;\n          }\n\n        }\n\n        class HighlightAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"highlightAnnotation\");\n            }\n\n            this.container.className = \"highlightAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class UnderlineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"underlineAnnotation\");\n            }\n\n            this.container.className = \"underlineAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class SquigglyAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"squigglyAnnotation\");\n            }\n\n            this.container.className = \"squigglyAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StrikeOutAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n            }\n\n            this.container.className = \"strikeoutAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StampAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.titleObj?.str || parameters.data.contentsObj?.str);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"stampAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class FileAttachmentAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true\n            });\n            const {\n              filename,\n              content\n            } = this.data.file;\n            this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n            this.content = content;\n            this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n              source: this,\n              id: (0, _util.stringToPDFString)(filename),\n              filename,\n              content\n            });\n          }\n\n          render() {\n            this.container.className = \"fileAttachmentAnnotation\";\n            const trigger = document.createElement(\"div\");\n            trigger.style.height = this.container.style.height;\n            trigger.style.width = this.container.style.width;\n            trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n            if (!this.data.hasPopup && (this.data.titleObj?.str || this.data.contentsObj?.str)) {\n              this._createPopup(trigger, this.data);\n            }\n\n            this.container.appendChild(trigger);\n            return this.container;\n          }\n\n          _download() {\n            this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);\n          }\n\n        }\n\n        class AnnotationLayer {\n          static render(parameters) {\n            const sortedAnnotations = [],\n                  popupAnnotations = [];\n\n            for (const data of parameters.annotations) {\n              if (!data) {\n                continue;\n              }\n\n              if (data.annotationType === _util.AnnotationType.POPUP) {\n                popupAnnotations.push(data);\n                continue;\n              }\n\n              sortedAnnotations.push(data);\n            }\n\n            if (popupAnnotations.length) {\n              sortedAnnotations.push(...popupAnnotations);\n            }\n\n            for (const data of sortedAnnotations) {\n              const element = AnnotationElementFactory.create({\n                data,\n                layer: parameters.div,\n                page: parameters.page,\n                viewport: parameters.viewport,\n                linkService: parameters.linkService,\n                downloadManager: parameters.downloadManager,\n                imageResourcesPath: parameters.imageResourcesPath || \"\",\n                renderForms: parameters.renderForms !== false,\n                svgFactory: new _display_utils.DOMSVGFactory(),\n                annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n                enableScripting: parameters.enableScripting,\n                hasJSActions: parameters.hasJSActions,\n                fieldObjects: parameters.fieldObjects,\n                mouseState: parameters.mouseState || {\n                  isDown: false\n                }\n              });\n\n              if (element.isRenderable) {\n                const rendered = element.render();\n\n                if (data.hidden) {\n                  rendered.style.visibility = \"hidden\";\n                }\n\n                if (Array.isArray(rendered)) {\n                  for (const renderedElement of rendered) {\n                    parameters.div.appendChild(renderedElement);\n                  }\n                } else {\n                  if (element instanceof PopupAnnotationElement) {\n                    parameters.div.prepend(rendered);\n                  } else {\n                    parameters.div.appendChild(rendered);\n                  }\n                }\n              }\n            }\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n\n            for (const data of parameters.annotations) {\n              const elements = parameters.div.querySelectorAll(`[data-annotation-id=\"${data.id}\"]`);\n\n              if (elements) {\n                for (const element of elements) {\n                  element.style.transform = transform;\n                }\n              }\n            }\n\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.AnnotationLayer = AnnotationLayer;\n        /***/\n      },\n      /* 19 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ColorConverters = void 0;\n\n        function makeColorComp(n) {\n          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n        }\n\n        class ColorConverters {\n          static CMYK_G(_ref25) {\n            let [c, y, m, k] = _ref25;\n            return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n          }\n\n          static G_CMYK(_ref26) {\n            let [g] = _ref26;\n            return [\"CMYK\", 0, 0, 0, 1 - g];\n          }\n\n          static G_RGB(_ref27) {\n            let [g] = _ref27;\n            return [\"RGB\", g, g, g];\n          }\n\n          static G_HTML(_ref28) {\n            let [g] = _ref28;\n            const G = makeColorComp(g);\n            return `#${G}${G}${G}`;\n          }\n\n          static RGB_G(_ref29) {\n            let [r, g, b] = _ref29;\n            return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n          }\n\n          static RGB_HTML(_ref30) {\n            let [r, g, b] = _ref30;\n            const R = makeColorComp(r);\n            const G = makeColorComp(g);\n            const B = makeColorComp(b);\n            return `#${R}${G}${B}`;\n          }\n\n          static T_HTML() {\n            return \"#00000000\";\n          }\n\n          static CMYK_RGB(_ref31) {\n            let [c, y, m, k] = _ref31;\n            return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n          }\n\n          static CMYK_HTML(components) {\n            return this.RGB_HTML(this.CMYK_RGB(components));\n          }\n\n          static RGB_CMYK(_ref32) {\n            let [r, g, b] = _ref32;\n            const c = 1 - r;\n            const m = 1 - g;\n            const y = 1 - b;\n            const k = Math.min(c, m, y);\n            return [\"CMYK\", c, m, y, k];\n          }\n\n        }\n\n        exports.ColorConverters = ColorConverters;\n        /***/\n      },\n      /* 20 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.renderTextLayer = renderTextLayer;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const MAX_TEXT_DIVS_TO_RENDER = 100000;\n        const DEFAULT_FONT_SIZE = 30;\n        const DEFAULT_FONT_ASCENT = 0.8;\n        const ascentCache = new Map();\n        const AllWhitespaceRegexp = /^\\s+$/g;\n\n        function getAscent(fontFamily, ctx) {\n          const cachedAscent = ascentCache.get(fontFamily);\n\n          if (cachedAscent) {\n            return cachedAscent;\n          }\n\n          ctx.save();\n          ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n          const metrics = ctx.measureText(\"\");\n          let ascent = metrics.fontBoundingBoxAscent;\n          let descent = Math.abs(metrics.fontBoundingBoxDescent);\n\n          if (ascent) {\n            ctx.restore();\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ctx.strokeStyle = \"red\";\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"g\", 0, 0);\n          let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          descent = 0;\n\n          for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n            if (pixels[i] > 0) {\n              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          ascent = 0;\n\n          for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n            if (pixels[i] > 0) {\n              ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.restore();\n\n          if (ascent) {\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n          return DEFAULT_FONT_ASCENT;\n        }\n\n        function appendText(task, geom, styles, ctx) {\n          const textDiv = document.createElement(\"span\");\n          const textDivProperties = task._enhanceTextSelection ? {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL,\n            originalTransform: null,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n            scale: 1\n          } : {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL\n          };\n\n          task._textDivs.push(textDiv);\n\n          const tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n          let angle = Math.atan2(tx[1], tx[0]);\n          const style = styles[geom.fontName];\n\n          if (style.vertical) {\n            angle += Math.PI / 2;\n          }\n\n          const fontHeight = Math.hypot(tx[2], tx[3]);\n          const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n          let left, top;\n\n          if (angle === 0) {\n            left = tx[4];\n            top = tx[5] - fontAscent;\n          } else {\n            left = tx[4] + fontAscent * Math.sin(angle);\n            top = tx[5] - fontAscent * Math.cos(angle);\n          }\n\n          textDiv.style.left = `${left}px`;\n          textDiv.style.top = `${top}px`;\n          textDiv.style.fontSize = `${fontHeight}px`;\n          textDiv.style.fontFamily = style.fontFamily;\n          textDiv.setAttribute(\"role\", \"presentation\");\n          textDiv.textContent = geom.str;\n          textDiv.dir = geom.dir;\n\n          if (task._fontInspectorEnabled) {\n            textDiv.dataset.fontName = geom.fontName;\n          }\n\n          if (angle !== 0) {\n            textDivProperties.angle = angle * (180 / Math.PI);\n          }\n\n          let shouldScaleText = false;\n\n          if (geom.str.length > 1 || task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str)) {\n            shouldScaleText = true;\n          } else if (geom.transform[0] !== geom.transform[3]) {\n            const absScaleX = Math.abs(geom.transform[0]),\n                  absScaleY = Math.abs(geom.transform[3]);\n\n            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n              shouldScaleText = true;\n            }\n          }\n\n          if (shouldScaleText) {\n            if (style.vertical) {\n              textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n            } else {\n              textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n            }\n          }\n\n          task._textDivProperties.set(textDiv, textDivProperties);\n\n          if (task._textContentStream) {\n            task._layoutText(textDiv);\n          }\n\n          if (task._enhanceTextSelection && textDivProperties.hasText) {\n            let angleCos = 1,\n                angleSin = 0;\n\n            if (angle !== 0) {\n              angleCos = Math.cos(angle);\n              angleSin = Math.sin(angle);\n            }\n\n            const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n            const divHeight = fontHeight;\n            let m, b;\n\n            if (angle !== 0) {\n              m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n              b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n            } else {\n              b = [left, top, left + divWidth, top + divHeight];\n            }\n\n            task._bounds.push({\n              left: b[0],\n              top: b[1],\n              right: b[2],\n              bottom: b[3],\n              div: textDiv,\n              size: [divWidth, divHeight],\n              m\n            });\n          }\n        }\n\n        function render(task) {\n          if (task._canceled) {\n            return;\n          }\n\n          const textDivs = task._textDivs;\n          const capability = task._capability;\n          const textDivsLength = textDivs.length;\n\n          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n            task._renderingDone = true;\n            capability.resolve();\n            return;\n          }\n\n          if (!task._textContentStream) {\n            for (let i = 0; i < textDivsLength; i++) {\n              task._layoutText(textDivs[i]);\n            }\n          }\n\n          task._renderingDone = true;\n          capability.resolve();\n        }\n\n        function findPositiveMin(ts, offset, count) {\n          let result = 0;\n\n          for (let i = 0; i < count; i++) {\n            const t = ts[offset++];\n\n            if (t > 0) {\n              result = result ? Math.min(t, result) : t;\n            }\n          }\n\n          return result;\n        }\n\n        function expand(task) {\n          const bounds = task._bounds;\n          const viewport = task._viewport;\n          const expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n          for (let i = 0; i < expanded.length; i++) {\n            const div = bounds[i].div;\n\n            const divProperties = task._textDivProperties.get(div);\n\n            if (divProperties.angle === 0) {\n              divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n              divProperties.paddingTop = bounds[i].top - expanded[i].top;\n              divProperties.paddingRight = expanded[i].right - bounds[i].right;\n              divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n              task._textDivProperties.set(div, divProperties);\n\n              continue;\n            }\n\n            const e = expanded[i],\n                  b = bounds[i];\n            const m = b.m,\n                  c = m[0],\n                  s = m[1];\n            const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n            const ts = new Float64Array(64);\n\n            for (let j = 0, jj = points.length; j < jj; j++) {\n              const t = _util.Util.applyTransform(points[j], m);\n\n              ts[j + 0] = c && (e.left - t[0]) / c;\n              ts[j + 4] = s && (e.top - t[1]) / s;\n              ts[j + 8] = c && (e.right - t[0]) / c;\n              ts[j + 12] = s && (e.bottom - t[1]) / s;\n              ts[j + 16] = s && (e.left - t[0]) / -s;\n              ts[j + 20] = c && (e.top - t[1]) / c;\n              ts[j + 24] = s && (e.right - t[0]) / -s;\n              ts[j + 28] = c && (e.bottom - t[1]) / c;\n              ts[j + 32] = c && (e.left - t[0]) / -c;\n              ts[j + 36] = s && (e.top - t[1]) / -s;\n              ts[j + 40] = c && (e.right - t[0]) / -c;\n              ts[j + 44] = s && (e.bottom - t[1]) / -s;\n              ts[j + 48] = s && (e.left - t[0]) / s;\n              ts[j + 52] = c && (e.top - t[1]) / -c;\n              ts[j + 56] = s && (e.right - t[0]) / s;\n              ts[j + 60] = c && (e.bottom - t[1]) / -c;\n            }\n\n            const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n            divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n            divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n            divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n            divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n            task._textDivProperties.set(div, divProperties);\n          }\n        }\n\n        function expandBounds(width, height, boxes) {\n          const bounds = boxes.map(function (box, i) {\n            return {\n              x1: box.left,\n              y1: box.top,\n              x2: box.right,\n              y2: box.bottom,\n              index: i,\n              x1New: undefined,\n              x2New: undefined\n            };\n          });\n          expandBoundsLTR(width, bounds);\n          const expanded = new Array(boxes.length);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i] = {\n              left: b.x1New,\n              top: 0,\n              right: b.x2New,\n              bottom: 0\n            };\n          }\n\n          boxes.map(function (box, i) {\n            const e = expanded[i],\n                  b = bounds[i];\n            b.x1 = box.top;\n            b.y1 = width - e.right;\n            b.x2 = box.bottom;\n            b.y2 = width - e.left;\n            b.index = i;\n            b.x1New = undefined;\n            b.x2New = undefined;\n          });\n          expandBoundsLTR(height, bounds);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i].top = b.x1New;\n            expanded[i].bottom = b.x2New;\n          }\n\n          return expanded;\n        }\n\n        function expandBoundsLTR(width, bounds) {\n          bounds.sort(function (a, b) {\n            return a.x1 - b.x1 || a.index - b.index;\n          });\n          const fakeBoundary = {\n            x1: -Infinity,\n            y1: -Infinity,\n            x2: 0,\n            y2: Infinity,\n            index: -1,\n            x1New: 0,\n            x2New: 0\n          };\n          const horizon = [{\n            start: -Infinity,\n            end: Infinity,\n            boundary: fakeBoundary\n          }];\n\n          for (const boundary of bounds) {\n            let i = 0;\n\n            while (i < horizon.length && horizon[i].end <= boundary.y1) {\n              i++;\n            }\n\n            let j = horizon.length - 1;\n\n            while (j >= 0 && horizon[j].start >= boundary.y2) {\n              j--;\n            }\n\n            let horizonPart, affectedBoundary;\n            let q,\n                k,\n                maxXNew = -Infinity;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              let xNew;\n\n              if (affectedBoundary.x2 > boundary.x1) {\n                xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n              } else if (affectedBoundary.x2New === undefined) {\n                xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n              } else {\n                xNew = affectedBoundary.x2New;\n              }\n\n              if (xNew > maxXNew) {\n                maxXNew = xNew;\n              }\n            }\n\n            boundary.x1New = maxXNew;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New === undefined) {\n                if (affectedBoundary.x2 > boundary.x1) {\n                  if (affectedBoundary.index > boundary.index) {\n                    affectedBoundary.x2New = affectedBoundary.x2;\n                  }\n                } else {\n                  affectedBoundary.x2New = maxXNew;\n                }\n              } else if (affectedBoundary.x2New > maxXNew) {\n                affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n              }\n            }\n\n            const changedHorizon = [];\n            let lastBoundary = null;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n              if (lastBoundary === useBoundary) {\n                changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n              } else {\n                changedHorizon.push({\n                  start: horizonPart.start,\n                  end: horizonPart.end,\n                  boundary: useBoundary\n                });\n                lastBoundary = useBoundary;\n              }\n            }\n\n            if (horizon[i].start < boundary.y1) {\n              changedHorizon[0].start = boundary.y1;\n              changedHorizon.unshift({\n                start: horizon[i].start,\n                end: boundary.y1,\n                boundary: horizon[i].boundary\n              });\n            }\n\n            if (boundary.y2 < horizon[j].end) {\n              changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n              changedHorizon.push({\n                start: boundary.y2,\n                end: horizon[j].end,\n                boundary: horizon[j].boundary\n              });\n            }\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New !== undefined) {\n                continue;\n              }\n\n              let used = false;\n\n              for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = 0; !used && k < changedHorizon.length; k++) {\n                used = changedHorizon[k].boundary === affectedBoundary;\n              }\n\n              if (!used) {\n                affectedBoundary.x2New = maxXNew;\n              }\n            }\n\n            Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n          }\n\n          for (const horizonPart of horizon) {\n            const affectedBoundary = horizonPart.boundary;\n\n            if (affectedBoundary.x2New === undefined) {\n              affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n            }\n          }\n        }\n\n        class TextLayerRenderTask {\n          constructor(_ref33) {\n            let {\n              textContent,\n              textContentStream,\n              container,\n              viewport,\n              textDivs,\n              textContentItemsStr,\n              enhanceTextSelection\n            } = _ref33;\n            this._textContent = textContent;\n            this._textContentStream = textContentStream;\n            this._container = container;\n            this._document = container.ownerDocument;\n            this._viewport = viewport;\n            this._textDivs = textDivs || [];\n            this._textContentItemsStr = textContentItemsStr || [];\n            this._enhanceTextSelection = !!enhanceTextSelection;\n            this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n            this._reader = null;\n            this._layoutTextLastFontSize = null;\n            this._layoutTextLastFontFamily = null;\n            this._layoutTextCtx = null;\n            this._textDivProperties = new WeakMap();\n            this._renderingDone = false;\n            this._canceled = false;\n            this._capability = (0, _util.createPromiseCapability)();\n            this._renderTimer = null;\n            this._bounds = [];\n\n            this._capability.promise.finally(() => {\n              if (!this._enhanceTextSelection) {\n                this._textDivProperties = null;\n              }\n\n              if (this._layoutTextCtx) {\n                this._layoutTextCtx.canvas.width = 0;\n                this._layoutTextCtx.canvas.height = 0;\n                this._layoutTextCtx = null;\n              }\n            }).catch(() => {});\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          cancel() {\n            this._canceled = true;\n\n            if (this._reader) {\n              this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\")).catch(() => {});\n\n              this._reader = null;\n            }\n\n            if (this._renderTimer !== null) {\n              clearTimeout(this._renderTimer);\n              this._renderTimer = null;\n            }\n\n            this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n          }\n\n          _processItems(items, styleCache) {\n            for (let i = 0, len = items.length; i < len; i++) {\n              if (items[i].str === undefined) {\n                if (items[i].type === \"beginMarkedContentProps\" || items[i].type === \"beginMarkedContent\") {\n                  const parent = this._container;\n                  this._container = document.createElement(\"span\");\n\n                  this._container.classList.add(\"markedContent\");\n\n                  if (items[i].id !== null) {\n                    this._container.setAttribute(\"id\", `${items[i].id}`);\n                  }\n\n                  parent.appendChild(this._container);\n                } else if (items[i].type === \"endMarkedContent\") {\n                  this._container = this._container.parentNode;\n                }\n\n                continue;\n              }\n\n              this._textContentItemsStr.push(items[i].str);\n\n              appendText(this, items[i], styleCache, this._layoutTextCtx);\n            }\n          }\n\n          _layoutText(textDiv) {\n            const textDivProperties = this._textDivProperties.get(textDiv);\n\n            let transform = \"\";\n\n            if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n              const {\n                fontSize,\n                fontFamily\n              } = textDiv.style;\n\n              if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n                this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n                this._layoutTextLastFontSize = fontSize;\n                this._layoutTextLastFontFamily = fontFamily;\n              }\n\n              const {\n                width\n              } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n              if (width > 0) {\n                const scale = textDivProperties.canvasWidth / width;\n\n                if (this._enhanceTextSelection) {\n                  textDivProperties.scale = scale;\n                }\n\n                transform = `scaleX(${scale})`;\n              }\n            }\n\n            if (textDivProperties.angle !== 0) {\n              transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n            }\n\n            if (transform.length > 0) {\n              if (this._enhanceTextSelection) {\n                textDivProperties.originalTransform = transform;\n              }\n\n              textDiv.style.transform = transform;\n            }\n\n            if (textDivProperties.hasText) {\n              this._container.appendChild(textDiv);\n            }\n\n            if (textDivProperties.hasEOL) {\n              const br = document.createElement(\"br\");\n              br.setAttribute(\"role\", \"presentation\");\n\n              this._container.appendChild(br);\n            }\n          }\n\n          _render() {\n            let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            const capability = (0, _util.createPromiseCapability)();\n            let styleCache = Object.create(null);\n\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n            canvas.mozOpaque = true;\n            this._layoutTextCtx = canvas.getContext(\"2d\", {\n              alpha: false\n            });\n\n            if (this._textContent) {\n              const textItems = this._textContent.items;\n              const textStyles = this._textContent.styles;\n\n              this._processItems(textItems, textStyles);\n\n              capability.resolve();\n            } else if (this._textContentStream) {\n              const pump = () => {\n                this._reader.read().then(_ref34 => {\n                  let {\n                    value,\n                    done\n                  } = _ref34;\n\n                  if (done) {\n                    capability.resolve();\n                    return;\n                  }\n\n                  Object.assign(styleCache, value.styles);\n\n                  this._processItems(value.items, styleCache);\n\n                  pump();\n                }, capability.reject);\n              };\n\n              this._reader = this._textContentStream.getReader();\n              pump();\n            } else {\n              throw new Error('Neither \"textContent\" nor \"textContentStream\" parameters specified.');\n            }\n\n            capability.promise.then(() => {\n              styleCache = null;\n\n              if (!timeout) {\n                render(this);\n              } else {\n                this._renderTimer = setTimeout(() => {\n                  render(this);\n                  this._renderTimer = null;\n                }, timeout);\n              }\n            }, this._capability.reject);\n          }\n\n          expandTextDivs() {\n            let expandDivs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this._enhanceTextSelection || !this._renderingDone) {\n              return;\n            }\n\n            if (this._bounds !== null) {\n              expand(this);\n              this._bounds = null;\n            }\n\n            const transformBuf = [],\n                  paddingBuf = [];\n\n            for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n              const div = this._textDivs[i];\n\n              const divProps = this._textDivProperties.get(div);\n\n              if (!divProps.hasText) {\n                continue;\n              }\n\n              if (expandDivs) {\n                transformBuf.length = 0;\n                paddingBuf.length = 0;\n\n                if (divProps.originalTransform) {\n                  transformBuf.push(divProps.originalTransform);\n                }\n\n                if (divProps.paddingTop > 0) {\n                  paddingBuf.push(`${divProps.paddingTop}px`);\n                  transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingRight > 0) {\n                  paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingBottom > 0) {\n                  paddingBuf.push(`${divProps.paddingBottom}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingLeft > 0) {\n                  paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n                  transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                div.style.padding = paddingBuf.join(\" \");\n\n                if (transformBuf.length) {\n                  div.style.transform = transformBuf.join(\" \");\n                }\n              } else {\n                div.style.padding = null;\n                div.style.transform = divProps.originalTransform;\n              }\n            }\n          }\n\n        }\n\n        function renderTextLayer(renderParameters) {\n          const task = new TextLayerRenderTask({\n            textContent: renderParameters.textContent,\n            textContentStream: renderParameters.textContentStream,\n            container: renderParameters.container,\n            viewport: renderParameters.viewport,\n            textDivs: renderParameters.textDivs,\n            textContentItemsStr: renderParameters.textContentItemsStr,\n            enhanceTextSelection: renderParameters.enhanceTextSelection\n          });\n\n          task._render(renderParameters.timeout);\n\n          return task;\n        }\n        /***/\n\n      },\n      /* 21 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SVGGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        let SVGGraphics = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: SVGGraphics\");\n          }\n\n        };\n        exports.SVGGraphics = SVGGraphics;\n        {\n          const SVG_DEFAULTS = {\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            fillColor: \"#000000\"\n          };\n          const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n          const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n          const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n          const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n          const convertImgDataToPng = function () {\n            const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n            const CHUNK_WRAPPER_SIZE = 12;\n            const crcTable = new Int32Array(256);\n\n            for (let i = 0; i < 256; i++) {\n              let c = i;\n\n              for (let h = 0; h < 8; h++) {\n                if (c & 1) {\n                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n                } else {\n                  c = c >> 1 & 0x7fffffff;\n                }\n              }\n\n              crcTable[i] = c;\n            }\n\n            function crc32(data, start, end) {\n              let crc = -1;\n\n              for (let i = start; i < end; i++) {\n                const a = (crc ^ data[i]) & 0xff;\n                const b = crcTable[a];\n                crc = crc >>> 8 ^ b;\n              }\n\n              return crc ^ -1;\n            }\n\n            function writePngChunk(type, body, data, offset) {\n              let p = offset;\n              const len = body.length;\n              data[p] = len >> 24 & 0xff;\n              data[p + 1] = len >> 16 & 0xff;\n              data[p + 2] = len >> 8 & 0xff;\n              data[p + 3] = len & 0xff;\n              p += 4;\n              data[p] = type.charCodeAt(0) & 0xff;\n              data[p + 1] = type.charCodeAt(1) & 0xff;\n              data[p + 2] = type.charCodeAt(2) & 0xff;\n              data[p + 3] = type.charCodeAt(3) & 0xff;\n              p += 4;\n              data.set(body, p);\n              p += body.length;\n              const crc = crc32(data, offset + 4, p);\n              data[p] = crc >> 24 & 0xff;\n              data[p + 1] = crc >> 16 & 0xff;\n              data[p + 2] = crc >> 8 & 0xff;\n              data[p + 3] = crc & 0xff;\n            }\n\n            function adler32(data, start, end) {\n              let a = 1;\n              let b = 0;\n\n              for (let i = start; i < end; ++i) {\n                a = (a + (data[i] & 0xff)) % 65521;\n                b = (b + a) % 65521;\n              }\n\n              return b << 16 | a;\n            }\n\n            function deflateSync(literals) {\n              if (!_is_node.isNodeJS) {\n                return deflateSyncUncompressed(literals);\n              }\n\n              try {\n                let input;\n\n                if (parseInt(process.versions.node) >= 8) {\n                  input = literals;\n                } else {\n                  input = Buffer.from(literals);\n                }\n\n                const output = require(\"zlib\").deflateSync(input, {\n                  level: 9\n                });\n\n                return output instanceof Uint8Array ? output : new Uint8Array(output);\n              } catch (e) {\n                (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n              }\n\n              return deflateSyncUncompressed(literals);\n            }\n\n            function deflateSyncUncompressed(literals) {\n              let len = literals.length;\n              const maxBlockLength = 0xffff;\n              const deflateBlocks = Math.ceil(len / maxBlockLength);\n              const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n              let pi = 0;\n              idat[pi++] = 0x78;\n              idat[pi++] = 0x9c;\n              let pos = 0;\n\n              while (len > maxBlockLength) {\n                idat[pi++] = 0x00;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0x00;\n                idat[pi++] = 0x00;\n                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n                pi += maxBlockLength;\n                pos += maxBlockLength;\n                len -= maxBlockLength;\n              }\n\n              idat[pi++] = 0x01;\n              idat[pi++] = len & 0xff;\n              idat[pi++] = len >> 8 & 0xff;\n              idat[pi++] = ~len & 0xffff & 0xff;\n              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n              idat.set(literals.subarray(pos), pi);\n              pi += literals.length - pos;\n              const adler = adler32(literals, 0, literals.length);\n              idat[pi++] = adler >> 24 & 0xff;\n              idat[pi++] = adler >> 16 & 0xff;\n              idat[pi++] = adler >> 8 & 0xff;\n              idat[pi++] = adler & 0xff;\n              return idat;\n            }\n\n            function encode(imgData, kind, forceDataSchema, isMask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              let bitDepth, colorType, lineSize;\n              const bytes = imgData.data;\n\n              switch (kind) {\n                case _util.ImageKind.GRAYSCALE_1BPP:\n                  colorType = 0;\n                  bitDepth = 1;\n                  lineSize = width + 7 >> 3;\n                  break;\n\n                case _util.ImageKind.RGB_24BPP:\n                  colorType = 2;\n                  bitDepth = 8;\n                  lineSize = width * 3;\n                  break;\n\n                case _util.ImageKind.RGBA_32BPP:\n                  colorType = 6;\n                  bitDepth = 8;\n                  lineSize = width * 4;\n                  break;\n\n                default:\n                  throw new Error(\"invalid format\");\n              }\n\n              const literals = new Uint8Array((1 + lineSize) * height);\n              let offsetLiterals = 0,\n                  offsetBytes = 0;\n\n              for (let y = 0; y < height; ++y) {\n                literals[offsetLiterals++] = 0;\n                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n                offsetBytes += lineSize;\n                offsetLiterals += lineSize;\n              }\n\n              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n                offsetLiterals = 0;\n\n                for (let y = 0; y < height; y++) {\n                  offsetLiterals++;\n\n                  for (let i = 0; i < lineSize; i++) {\n                    literals[offsetLiterals++] ^= 0xff;\n                  }\n                }\n              }\n\n              const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n              const idat = deflateSync(literals);\n              const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n              const data = new Uint8Array(pngLength);\n              let offset = 0;\n              data.set(PNG_HEADER, offset);\n              offset += PNG_HEADER.length;\n              writePngChunk(\"IHDR\", ihdr, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n              writePngChunk(\"IDATA\", idat, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + idat.length;\n              writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n              return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n            }\n\n            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n              const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n              return encode(imgData, kind, forceDataSchema, isMask);\n            };\n          }();\n\n          class SVGExtraState {\n            constructor() {\n              this.fontSizeScale = 1;\n              this.fontWeight = SVG_DEFAULTS.fontWeight;\n              this.fontSize = 0;\n              this.textMatrix = _util.IDENTITY_MATRIX;\n              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n              this.leading = 0;\n              this.textRenderingMode = _util.TextRenderingMode.FILL;\n              this.textMatrixScale = 1;\n              this.x = 0;\n              this.y = 0;\n              this.lineX = 0;\n              this.lineY = 0;\n              this.charSpacing = 0;\n              this.wordSpacing = 0;\n              this.textHScale = 1;\n              this.textRise = 0;\n              this.fillColor = SVG_DEFAULTS.fillColor;\n              this.strokeColor = \"#000000\";\n              this.fillAlpha = 1;\n              this.strokeAlpha = 1;\n              this.lineWidth = 1;\n              this.lineJoin = \"\";\n              this.lineCap = \"\";\n              this.miterLimit = 0;\n              this.dashArray = [];\n              this.dashPhase = 0;\n              this.dependencies = [];\n              this.activeClipUrl = null;\n              this.clipGroup = null;\n              this.maskId = \"\";\n            }\n\n            clone() {\n              return Object.create(this);\n            }\n\n            setCurrentPoint(x, y) {\n              this.x = x;\n              this.y = y;\n            }\n\n          }\n\n          function opListToTree(opList) {\n            let opTree = [];\n            const tmp = [];\n\n            for (const opListElement of opList) {\n              if (opListElement.fn === \"save\") {\n                opTree.push({\n                  fnId: 92,\n                  fn: \"group\",\n                  items: []\n                });\n                tmp.push(opTree);\n                opTree = opTree[opTree.length - 1].items;\n                continue;\n              }\n\n              if (opListElement.fn === \"restore\") {\n                opTree = tmp.pop();\n              } else {\n                opTree.push(opListElement);\n              }\n            }\n\n            return opTree;\n          }\n\n          function pf(value) {\n            if (Number.isInteger(value)) {\n              return value.toString();\n            }\n\n            const s = value.toFixed(10);\n            let i = s.length - 1;\n\n            if (s[i] !== \"0\") {\n              return s;\n            }\n\n            do {\n              i--;\n            } while (s[i] === \"0\");\n\n            return s.substring(0, s[i] === \".\" ? i : i + 1);\n          }\n\n          function pm(m) {\n            if (m[4] === 0 && m[5] === 0) {\n              if (m[1] === 0 && m[2] === 0) {\n                if (m[0] === 1 && m[3] === 1) {\n                  return \"\";\n                }\n\n                return `scale(${pf(m[0])} ${pf(m[3])})`;\n              }\n\n              if (m[0] === m[3] && m[1] === -m[2]) {\n                const a = Math.acos(m[0]) * 180 / Math.PI;\n                return `rotate(${pf(a)})`;\n              }\n            } else {\n              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n                return `translate(${pf(m[4])} ${pf(m[5])})`;\n              }\n            }\n\n            return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n          }\n\n          let clipCount = 0;\n          let maskCount = 0;\n          let shadingCount = 0;\n          exports.SVGGraphics = SVGGraphics = class {\n            constructor(commonObjs, objs) {\n              let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              this.svgFactory = new _display_utils.DOMSVGFactory();\n              this.current = new SVGExtraState();\n              this.transformMatrix = _util.IDENTITY_MATRIX;\n              this.transformStack = [];\n              this.extraStack = [];\n              this.commonObjs = commonObjs;\n              this.objs = objs;\n              this.pendingClip = null;\n              this.pendingEOFill = false;\n              this.embedFonts = false;\n              this.embeddedFonts = Object.create(null);\n              this.cssStyle = null;\n              this.forceDataSchema = !!forceDataSchema;\n              this._operatorIdMapping = [];\n\n              for (const op in _util.OPS) {\n                this._operatorIdMapping[_util.OPS[op]] = op;\n              }\n            }\n\n            save() {\n              this.transformStack.push(this.transformMatrix);\n              const old = this.current;\n              this.extraStack.push(old);\n              this.current = old.clone();\n            }\n\n            restore() {\n              this.transformMatrix = this.transformStack.pop();\n              this.current = this.extraStack.pop();\n              this.pendingClip = null;\n              this.tgrp = null;\n            }\n\n            group(items) {\n              this.save();\n              this.executeOpTree(items);\n              this.restore();\n            }\n\n            loadDependencies(operatorList) {\n              const fnArray = operatorList.fnArray;\n              const argsArray = operatorList.argsArray;\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                if (fnArray[i] !== _util.OPS.dependency) {\n                  continue;\n                }\n\n                for (const obj of argsArray[i]) {\n                  const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n                  const promise = new Promise(resolve => {\n                    objsPool.get(obj, resolve);\n                  });\n                  this.current.dependencies.push(promise);\n                }\n              }\n\n              return Promise.all(this.current.dependencies);\n            }\n\n            transform(a, b, c, d, e, f) {\n              const transformMatrix = [a, b, c, d, e, f];\n              this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n              this.tgrp = null;\n            }\n\n            getSVG(operatorList, viewport) {\n              this.viewport = viewport;\n\n              const svgElement = this._initialize(viewport);\n\n              return this.loadDependencies(operatorList).then(() => {\n                this.transformMatrix = _util.IDENTITY_MATRIX;\n                this.executeOpTree(this.convertOpList(operatorList));\n                return svgElement;\n              });\n            }\n\n            convertOpList(operatorList) {\n              const operatorIdMapping = this._operatorIdMapping;\n              const argsArray = operatorList.argsArray;\n              const fnArray = operatorList.fnArray;\n              const opList = [];\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                const fnId = fnArray[i];\n                opList.push({\n                  fnId,\n                  fn: operatorIdMapping[fnId],\n                  args: argsArray[i]\n                });\n              }\n\n              return opListToTree(opList);\n            }\n\n            executeOpTree(opTree) {\n              for (const opTreeElement of opTree) {\n                const fn = opTreeElement.fn;\n                const fnId = opTreeElement.fnId;\n                const args = opTreeElement.args;\n\n                switch (fnId | 0) {\n                  case _util.OPS.beginText:\n                    this.beginText();\n                    break;\n\n                  case _util.OPS.dependency:\n                    break;\n\n                  case _util.OPS.setLeading:\n                    this.setLeading(args);\n                    break;\n\n                  case _util.OPS.setLeadingMoveText:\n                    this.setLeadingMoveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setFont:\n                    this.setFont(args);\n                    break;\n\n                  case _util.OPS.showText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.showSpacedText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.endText:\n                    this.endText();\n                    break;\n\n                  case _util.OPS.moveText:\n                    this.moveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setCharSpacing:\n                    this.setCharSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setWordSpacing:\n                    this.setWordSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setHScale:\n                    this.setHScale(args[0]);\n                    break;\n\n                  case _util.OPS.setTextMatrix:\n                    this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.setTextRise:\n                    this.setTextRise(args[0]);\n                    break;\n\n                  case _util.OPS.setTextRenderingMode:\n                    this.setTextRenderingMode(args[0]);\n                    break;\n\n                  case _util.OPS.setLineWidth:\n                    this.setLineWidth(args[0]);\n                    break;\n\n                  case _util.OPS.setLineJoin:\n                    this.setLineJoin(args[0]);\n                    break;\n\n                  case _util.OPS.setLineCap:\n                    this.setLineCap(args[0]);\n                    break;\n\n                  case _util.OPS.setMiterLimit:\n                    this.setMiterLimit(args[0]);\n                    break;\n\n                  case _util.OPS.setFillRGBColor:\n                    this.setFillRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeRGBColor:\n                    this.setStrokeRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeColorN:\n                    this.setStrokeColorN(args);\n                    break;\n\n                  case _util.OPS.setFillColorN:\n                    this.setFillColorN(args);\n                    break;\n\n                  case _util.OPS.shadingFill:\n                    this.shadingFill(args[0]);\n                    break;\n\n                  case _util.OPS.setDash:\n                    this.setDash(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setRenderingIntent:\n                    this.setRenderingIntent(args[0]);\n                    break;\n\n                  case _util.OPS.setFlatness:\n                    this.setFlatness(args[0]);\n                    break;\n\n                  case _util.OPS.setGState:\n                    this.setGState(args[0]);\n                    break;\n\n                  case _util.OPS.fill:\n                    this.fill();\n                    break;\n\n                  case _util.OPS.eoFill:\n                    this.eoFill();\n                    break;\n\n                  case _util.OPS.stroke:\n                    this.stroke();\n                    break;\n\n                  case _util.OPS.fillStroke:\n                    this.fillStroke();\n                    break;\n\n                  case _util.OPS.eoFillStroke:\n                    this.eoFillStroke();\n                    break;\n\n                  case _util.OPS.clip:\n                    this.clip(\"nonzero\");\n                    break;\n\n                  case _util.OPS.eoClip:\n                    this.clip(\"evenodd\");\n                    break;\n\n                  case _util.OPS.paintSolidColorImageMask:\n                    this.paintSolidColorImageMask();\n                    break;\n\n                  case _util.OPS.paintImageXObject:\n                    this.paintImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintInlineImageXObject:\n                    this.paintInlineImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintImageMaskXObject:\n                    this.paintImageMaskXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectBegin:\n                    this.paintFormXObjectBegin(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectEnd:\n                    this.paintFormXObjectEnd();\n                    break;\n\n                  case _util.OPS.closePath:\n                    this.closePath();\n                    break;\n\n                  case _util.OPS.closeStroke:\n                    this.closeStroke();\n                    break;\n\n                  case _util.OPS.closeFillStroke:\n                    this.closeFillStroke();\n                    break;\n\n                  case _util.OPS.closeEOFillStroke:\n                    this.closeEOFillStroke();\n                    break;\n\n                  case _util.OPS.nextLine:\n                    this.nextLine();\n                    break;\n\n                  case _util.OPS.transform:\n                    this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.constructPath:\n                    this.constructPath(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.endPath:\n                    this.endPath();\n                    break;\n\n                  case 92:\n                    this.group(opTreeElement.items);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented operator ${fn}`);\n                    break;\n                }\n              }\n            }\n\n            setWordSpacing(wordSpacing) {\n              this.current.wordSpacing = wordSpacing;\n            }\n\n            setCharSpacing(charSpacing) {\n              this.current.charSpacing = charSpacing;\n            }\n\n            nextLine() {\n              this.moveText(0, this.current.leading);\n            }\n\n            setTextMatrix(a, b, c, d, e, f) {\n              const current = this.current;\n              current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n              current.textMatrixScale = Math.hypot(a, b);\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtElement.appendChild(current.tspan);\n            }\n\n            beginText() {\n              const current = this.current;\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.textMatrix = _util.IDENTITY_MATRIX;\n              current.lineMatrix = _util.IDENTITY_MATRIX;\n              current.textMatrixScale = 1;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            moveText(x, y) {\n              const current = this.current;\n              current.x = current.lineX += x;\n              current.y = current.lineY += y;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            }\n\n            showText(glyphs) {\n              const current = this.current;\n              const font = current.font;\n              const fontSize = current.fontSize;\n\n              if (fontSize === 0) {\n                return;\n              }\n\n              const fontSizeScale = current.fontSizeScale;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const fontDirection = current.fontDirection;\n              const textHScale = current.textHScale * fontDirection;\n              const vertical = font.vertical;\n              const spacingDir = vertical ? 1 : -1;\n              const defaultVMetrics = font.defaultVMetrics;\n              const widthAdvanceScale = fontSize * current.fontMatrix[0];\n              let x = 0;\n\n              for (const glyph of glyphs) {\n                if (glyph === null) {\n                  x += fontDirection * wordSpacing;\n                  continue;\n                } else if ((0, _util.isNum)(glyph)) {\n                  x += spacingDir * glyph * fontSize / 1000;\n                  continue;\n                }\n\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const character = glyph.fontChar;\n                let scaledX, scaledY;\n                let width = glyph.width;\n\n                if (vertical) {\n                  let vx;\n                  const vmetric = glyph.vmetric || defaultVMetrics;\n                  vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                  vx = -vx * widthAdvanceScale;\n                  const vy = vmetric[2] * widthAdvanceScale;\n                  width = vmetric ? -vmetric[0] : width;\n                  scaledX = vx / fontSizeScale;\n                  scaledY = (x + vy) / fontSizeScale;\n                } else {\n                  scaledX = x / fontSizeScale;\n                  scaledY = 0;\n                }\n\n                if (glyph.isInFont || font.missingFile) {\n                  current.xcoords.push(current.x + scaledX);\n\n                  if (vertical) {\n                    current.ycoords.push(-current.y + scaledY);\n                  }\n\n                  current.tspan.textContent += character;\n                } else {}\n\n                let charWidth;\n\n                if (vertical) {\n                  charWidth = width * widthAdvanceScale - spacing * fontDirection;\n                } else {\n                  charWidth = width * widthAdvanceScale + spacing * fontDirection;\n                }\n\n                x += charWidth;\n              }\n\n              current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n              if (vertical) {\n                current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n              } else {\n                current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              }\n\n              if (vertical) {\n                current.y -= x;\n              } else {\n                current.x += x * textHScale;\n              }\n\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n              if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n                current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n              }\n\n              if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n                current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n              }\n\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n                  current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n                }\n\n                if (current.fillAlpha < 1) {\n                  current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                }\n              } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n                current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n              } else {\n                current.tspan.setAttributeNS(null, \"fill\", \"none\");\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n                this._setStrokeAttributes(current.tspan, lineWidthScale);\n              }\n\n              let textMatrix = current.textMatrix;\n\n              if (current.textRise !== 0) {\n                textMatrix = textMatrix.slice();\n                textMatrix[5] += current.textRise;\n              }\n\n              current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n              current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n              current.txtElement.appendChild(current.tspan);\n              current.txtgrp.appendChild(current.txtElement);\n\n              this._ensureTransformGroup().appendChild(current.txtElement);\n            }\n\n            setLeadingMoveText(x, y) {\n              this.setLeading(-y);\n              this.moveText(x, y);\n            }\n\n            addFontStyle(fontObj) {\n              if (!fontObj.data) {\n                throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n              }\n\n              if (!this.cssStyle) {\n                this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n                this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n                this.defs.appendChild(this.cssStyle);\n              }\n\n              const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n              this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n            }\n\n            setFont(details) {\n              const current = this.current;\n              const fontObj = this.commonObjs.get(details[0]);\n              let size = details[1];\n              current.font = fontObj;\n\n              if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n                this.addFontStyle(fontObj);\n                this.embeddedFonts[fontObj.loadedName] = fontObj;\n              }\n\n              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n              let bold = \"normal\";\n\n              if (fontObj.black) {\n                bold = \"900\";\n              } else if (fontObj.bold) {\n                bold = \"bold\";\n              }\n\n              const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n              if (size < 0) {\n                size = -size;\n                current.fontDirection = -1;\n              } else {\n                current.fontDirection = 1;\n              }\n\n              current.fontSize = size;\n              current.fontFamily = fontObj.loadedName;\n              current.fontWeight = bold;\n              current.fontStyle = italic;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            endText() {\n              const current = this.current;\n\n              if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement?.hasChildNodes()) {\n                current.element = current.txtElement;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            setLineWidth(width) {\n              if (width > 0) {\n                this.current.lineWidth = width;\n              }\n            }\n\n            setLineCap(style) {\n              this.current.lineCap = LINE_CAP_STYLES[style];\n            }\n\n            setLineJoin(style) {\n              this.current.lineJoin = LINE_JOIN_STYLES[style];\n            }\n\n            setMiterLimit(limit) {\n              this.current.miterLimit = limit;\n            }\n\n            setStrokeAlpha(strokeAlpha) {\n              this.current.strokeAlpha = strokeAlpha;\n            }\n\n            setStrokeRGBColor(r, g, b) {\n              this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n            }\n\n            setFillAlpha(fillAlpha) {\n              this.current.fillAlpha = fillAlpha;\n            }\n\n            setFillRGBColor(r, g, b) {\n              this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n              this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              this.current.xcoords = [];\n              this.current.ycoords = [];\n            }\n\n            setStrokeColorN(args) {\n              this.current.strokeColor = this._makeColorN_Pattern(args);\n            }\n\n            setFillColorN(args) {\n              this.current.fillColor = this._makeColorN_Pattern(args);\n            }\n\n            shadingFill(args) {\n              const width = this.viewport.width;\n              const height = this.viewport.height;\n\n              const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", x0);\n              rect.setAttributeNS(null, \"y\", y0);\n              rect.setAttributeNS(null, \"width\", x1 - x0);\n              rect.setAttributeNS(null, \"height\", y1 - y0);\n              rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n              if (this.current.fillAlpha < 1) {\n                rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n              }\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            _makeColorN_Pattern(args) {\n              if (args[0] === \"TilingPattern\") {\n                return this._makeTilingPattern(args);\n              }\n\n              return this._makeShadingPattern(args);\n            }\n\n            _makeTilingPattern(args) {\n              const color = args[1];\n              const operatorList = args[2];\n              const matrix = args[3] || _util.IDENTITY_MATRIX;\n              const [x0, y0, x1, y1] = args[4];\n              const xstep = args[5];\n              const ystep = args[6];\n              const paintType = args[7];\n              const tilingId = `shading${shadingCount++}`;\n\n              const [tx0, ty0, tx1, ty1] = _util.Util.normalizeRect([..._util.Util.applyTransform([x0, y0], matrix), ..._util.Util.applyTransform([x1, y1], matrix)]);\n\n              const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n              const txstep = xstep * xscale;\n              const tystep = ystep * yscale;\n              const tiling = this.svgFactory.createElement(\"svg:pattern\");\n              tiling.setAttributeNS(null, \"id\", tilingId);\n              tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n              tiling.setAttributeNS(null, \"width\", txstep);\n              tiling.setAttributeNS(null, \"height\", tystep);\n              tiling.setAttributeNS(null, \"x\", `${tx0}`);\n              tiling.setAttributeNS(null, \"y\", `${ty0}`);\n              const svg = this.svg;\n              const transformMatrix = this.transformMatrix;\n              const fillColor = this.current.fillColor;\n              const strokeColor = this.current.strokeColor;\n              const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n              this.svg = bbox;\n              this.transformMatrix = matrix;\n\n              if (paintType === 2) {\n                const cssColor = _util.Util.makeHexColor(...color);\n\n                this.current.fillColor = cssColor;\n                this.current.strokeColor = cssColor;\n              }\n\n              this.executeOpTree(this.convertOpList(operatorList));\n              this.svg = svg;\n              this.transformMatrix = transformMatrix;\n              this.current.fillColor = fillColor;\n              this.current.strokeColor = strokeColor;\n              tiling.appendChild(bbox.childNodes[0]);\n              this.defs.appendChild(tiling);\n              return `url(#${tilingId})`;\n            }\n\n            _makeShadingPattern(args) {\n              switch (args[0]) {\n                case \"RadialAxial\":\n                  const shadingId = `shading${shadingCount++}`;\n                  const colorStops = args[3];\n                  let gradient;\n\n                  switch (args[1]) {\n                    case \"axial\":\n                      const point0 = args[4];\n                      const point1 = args[5];\n                      gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"x1\", point0[0]);\n                      gradient.setAttributeNS(null, \"y1\", point0[1]);\n                      gradient.setAttributeNS(null, \"x2\", point1[0]);\n                      gradient.setAttributeNS(null, \"y2\", point1[1]);\n                      break;\n\n                    case \"radial\":\n                      const focalPoint = args[4];\n                      const circlePoint = args[5];\n                      const focalRadius = args[6];\n                      const circleRadius = args[7];\n                      gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                      gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                      gradient.setAttributeNS(null, \"r\", circleRadius);\n                      gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                      gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                      gradient.setAttributeNS(null, \"fr\", focalRadius);\n                      break;\n\n                    default:\n                      throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n                  }\n\n                  for (const colorStop of colorStops) {\n                    const stop = this.svgFactory.createElement(\"svg:stop\");\n                    stop.setAttributeNS(null, \"offset\", colorStop[0]);\n                    stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n                    gradient.appendChild(stop);\n                  }\n\n                  this.defs.appendChild(gradient);\n                  return `url(#${shadingId})`;\n\n                case \"Mesh\":\n                  (0, _util.warn)(\"Unimplemented pattern Mesh\");\n                  return null;\n\n                case \"Dummy\":\n                  return \"hotpink\";\n\n                default:\n                  throw new Error(`Unknown IR type: ${args[0]}`);\n              }\n            }\n\n            setDash(dashArray, dashPhase) {\n              this.current.dashArray = dashArray;\n              this.current.dashPhase = dashPhase;\n            }\n\n            constructPath(ops, args) {\n              const current = this.current;\n              let x = current.x,\n                  y = current.y;\n              let d = [];\n              let j = 0;\n\n              for (const op of ops) {\n                switch (op | 0) {\n                  case _util.OPS.rectangle:\n                    x = args[j++];\n                    y = args[j++];\n                    const width = args[j++];\n                    const height = args[j++];\n                    const xw = x + width;\n                    const yh = y + height;\n                    d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n                    break;\n\n                  case _util.OPS.moveTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"M\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.lineTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"L\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.curveTo:\n                    x = args[j + 4];\n                    y = args[j + 5];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                    j += 6;\n                    break;\n\n                  case _util.OPS.curveTo2:\n                    d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    j += 4;\n                    break;\n\n                  case _util.OPS.curveTo3:\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                    j += 4;\n                    break;\n\n                  case _util.OPS.closePath:\n                    d.push(\"Z\");\n                    break;\n                }\n              }\n\n              d = d.join(\" \");\n\n              if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n                d = current.path.getAttributeNS(null, \"d\") + d;\n              } else {\n                current.path = this.svgFactory.createElement(\"svg:path\");\n\n                this._ensureTransformGroup().appendChild(current.path);\n              }\n\n              current.path.setAttributeNS(null, \"d\", d);\n              current.path.setAttributeNS(null, \"fill\", \"none\");\n              current.element = current.path;\n              current.setCurrentPoint(x, y);\n            }\n\n            endPath() {\n              const current = this.current;\n              current.path = null;\n\n              if (!this.pendingClip) {\n                return;\n              }\n\n              if (!current.element) {\n                this.pendingClip = null;\n                return;\n              }\n\n              const clipId = `clippath${clipCount++}`;\n              const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n              clipPath.setAttributeNS(null, \"id\", clipId);\n              clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n              const clipElement = current.element.cloneNode(true);\n\n              if (this.pendingClip === \"evenodd\") {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n              } else {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n              }\n\n              this.pendingClip = null;\n              clipPath.appendChild(clipElement);\n              this.defs.appendChild(clipPath);\n\n              if (current.activeClipUrl) {\n                current.clipGroup = null;\n\n                for (const prev of this.extraStack) {\n                  prev.clipGroup = null;\n                }\n\n                clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n              }\n\n              current.activeClipUrl = `url(#${clipId})`;\n              this.tgrp = null;\n            }\n\n            clip(type) {\n              this.pendingClip = type;\n            }\n\n            closePath() {\n              const current = this.current;\n\n              if (current.path) {\n                const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n                current.path.setAttributeNS(null, \"d\", d);\n              }\n            }\n\n            setLeading(leading) {\n              this.current.leading = -leading;\n            }\n\n            setTextRise(textRise) {\n              this.current.textRise = textRise;\n            }\n\n            setTextRenderingMode(textRenderingMode) {\n              this.current.textRenderingMode = textRenderingMode;\n            }\n\n            setHScale(scale) {\n              this.current.textHScale = scale / 100;\n            }\n\n            setRenderingIntent(intent) {}\n\n            setFlatness(flatness) {}\n\n            setGState(states) {\n              for (const [key, value] of states) {\n                switch (key) {\n                  case \"LW\":\n                    this.setLineWidth(value);\n                    break;\n\n                  case \"LC\":\n                    this.setLineCap(value);\n                    break;\n\n                  case \"LJ\":\n                    this.setLineJoin(value);\n                    break;\n\n                  case \"ML\":\n                    this.setMiterLimit(value);\n                    break;\n\n                  case \"D\":\n                    this.setDash(value[0], value[1]);\n                    break;\n\n                  case \"RI\":\n                    this.setRenderingIntent(value);\n                    break;\n\n                  case \"FL\":\n                    this.setFlatness(value);\n                    break;\n\n                  case \"Font\":\n                    this.setFont(value);\n                    break;\n\n                  case \"CA\":\n                    this.setStrokeAlpha(value);\n                    break;\n\n                  case \"ca\":\n                    this.setFillAlpha(value);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n                    break;\n                }\n              }\n            }\n\n            fill() {\n              const current = this.current;\n\n              if (current.element) {\n                current.element.setAttributeNS(null, \"fill\", current.fillColor);\n                current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                this.endPath();\n              }\n            }\n\n            stroke() {\n              const current = this.current;\n\n              if (current.element) {\n                this._setStrokeAttributes(current.element);\n\n                current.element.setAttributeNS(null, \"fill\", \"none\");\n                this.endPath();\n              }\n            }\n\n            _setStrokeAttributes(element) {\n              let lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n              const current = this.current;\n              let dashArray = current.dashArray;\n\n              if (lineWidthScale !== 1 && dashArray.length > 0) {\n                dashArray = dashArray.map(function (value) {\n                  return lineWidthScale * value;\n                });\n              }\n\n              element.setAttributeNS(null, \"stroke\", current.strokeColor);\n              element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n              element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n              element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n              element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n              element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n              element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n              element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n            }\n\n            eoFill() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fill();\n            }\n\n            fillStroke() {\n              this.stroke();\n              this.fill();\n            }\n\n            eoFillStroke() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fillStroke();\n            }\n\n            closeStroke() {\n              this.closePath();\n              this.stroke();\n            }\n\n            closeFillStroke() {\n              this.closePath();\n              this.fillStroke();\n            }\n\n            closeEOFillStroke() {\n              this.closePath();\n              this.eoFillStroke();\n            }\n\n            paintSolidColorImageMask() {\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", \"1px\");\n              rect.setAttributeNS(null, \"height\", \"1px\");\n              rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            paintImageXObject(objId) {\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n                return;\n              }\n\n              this.paintInlineImageXObject(imgData);\n            }\n\n            paintInlineImageXObject(imgData, mask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n              const cliprect = this.svgFactory.createElement(\"svg:rect\");\n              cliprect.setAttributeNS(null, \"x\", \"0\");\n              cliprect.setAttributeNS(null, \"y\", \"0\");\n              cliprect.setAttributeNS(null, \"width\", pf(width));\n              cliprect.setAttributeNS(null, \"height\", pf(height));\n              this.current.element = cliprect;\n              this.clip(\"nonzero\");\n              const imgEl = this.svgFactory.createElement(\"svg:image\");\n              imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n              imgEl.setAttributeNS(null, \"x\", \"0\");\n              imgEl.setAttributeNS(null, \"y\", pf(-height));\n              imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n              imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n              imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n              if (mask) {\n                mask.appendChild(imgEl);\n              } else {\n                this._ensureTransformGroup().appendChild(imgEl);\n              }\n            }\n\n            paintImageMaskXObject(imgData) {\n              const current = this.current;\n              const width = imgData.width;\n              const height = imgData.height;\n              const fillColor = current.fillColor;\n              current.maskId = `mask${maskCount++}`;\n              const mask = this.svgFactory.createElement(\"svg:mask\");\n              mask.setAttributeNS(null, \"id\", current.maskId);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", pf(width));\n              rect.setAttributeNS(null, \"height\", pf(height));\n              rect.setAttributeNS(null, \"fill\", fillColor);\n              rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n              this.defs.appendChild(mask);\n\n              this._ensureTransformGroup().appendChild(rect);\n\n              this.paintInlineImageXObject(imgData, mask);\n            }\n\n            paintFormXObjectBegin(matrix, bbox) {\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n              }\n\n              if (bbox) {\n                const width = bbox[2] - bbox[0];\n                const height = bbox[3] - bbox[1];\n                const cliprect = this.svgFactory.createElement(\"svg:rect\");\n                cliprect.setAttributeNS(null, \"x\", bbox[0]);\n                cliprect.setAttributeNS(null, \"y\", bbox[1]);\n                cliprect.setAttributeNS(null, \"width\", pf(width));\n                cliprect.setAttributeNS(null, \"height\", pf(height));\n                this.current.element = cliprect;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            paintFormXObjectEnd() {}\n\n            _initialize(viewport) {\n              const svg = this.svgFactory.create(viewport.width, viewport.height);\n              const definitions = this.svgFactory.createElement(\"svg:defs\");\n              svg.appendChild(definitions);\n              this.defs = definitions;\n              const rootGroup = this.svgFactory.createElement(\"svg:g\");\n              rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n              svg.appendChild(rootGroup);\n              this.svg = rootGroup;\n              return svg;\n            }\n\n            _ensureClipGroup() {\n              if (!this.current.clipGroup) {\n                const clipGroup = this.svgFactory.createElement(\"svg:g\");\n                clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n                this.svg.appendChild(clipGroup);\n                this.current.clipGroup = clipGroup;\n              }\n\n              return this.current.clipGroup;\n            }\n\n            _ensureTransformGroup() {\n              if (!this.tgrp) {\n                this.tgrp = this.svgFactory.createElement(\"svg:g\");\n                this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n                if (this.current.activeClipUrl) {\n                  this._ensureClipGroup().appendChild(this.tgrp);\n                } else {\n                  this.svg.appendChild(this.tgrp);\n                }\n              }\n\n              return this.tgrp;\n            }\n\n          };\n        }\n        /***/\n      },\n      /* 22 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaLayer = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _xfa_text = __w_pdfjs_require__(17);\n\n        class XfaLayer {\n          static setupStorage(html, id, element, storage, intent) {\n            const storedData = storage.getValue(id, {\n              value: null\n            });\n\n            switch (element.name) {\n              case \"textarea\":\n                if (storedData.value !== null) {\n                  html.textContent = storedData.value;\n                }\n\n                if (intent === \"print\") {\n                  break;\n                }\n\n                html.addEventListener(\"input\", event => {\n                  storage.setValue(id, {\n                    value: event.target.value\n                  });\n                });\n                break;\n\n              case \"input\":\n                if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n                  if (storedData.value === element.attributes.xfaOn) {\n                    html.setAttribute(\"checked\", true);\n                  } else if (storedData.value === element.attributes.xfaOff) {\n                    html.removeAttribute(\"checked\");\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"change\", event => {\n                    storage.setValue(id, {\n                      value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\n                    });\n                  });\n                } else {\n                  if (storedData.value !== null) {\n                    html.setAttribute(\"value\", storedData.value);\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"input\", event => {\n                    storage.setValue(id, {\n                      value: event.target.value\n                    });\n                  });\n                }\n\n                break;\n\n              case \"select\":\n                if (storedData.value !== null) {\n                  for (const option of element.children) {\n                    if (option.attributes.value === storedData.value) {\n                      option.attributes.selected = true;\n                    }\n                  }\n                }\n\n                html.addEventListener(\"input\", event => {\n                  const options = event.target.options;\n                  const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n                  storage.setValue(id, {\n                    value\n                  });\n                });\n                break;\n            }\n          }\n\n          static setAttributes(_ref35) {\n            let {\n              html,\n              element,\n              storage = null,\n              intent,\n              linkService\n            } = _ref35;\n            const {\n              attributes\n            } = element;\n            const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n            if (attributes.type === \"radio\") {\n              attributes.name = `${attributes.name}-${intent}`;\n            }\n\n            for (const [key, value] of Object.entries(attributes)) {\n              if (value === null || value === undefined || key === \"dataId\") {\n                continue;\n              }\n\n              if (key !== \"style\") {\n                if (key === \"textContent\") {\n                  html.textContent = value;\n                } else if (key === \"class\") {\n                  html.setAttribute(key, value.join(\" \"));\n                } else {\n                  if (isHTMLAnchorElement && (key === \"href\" || key === \"newWindow\")) {\n                    continue;\n                  }\n\n                  html.setAttribute(key, value);\n                }\n              } else {\n                Object.assign(html.style, value);\n              }\n            }\n\n            if (isHTMLAnchorElement) {\n              if (!linkService.addLinkAttributes) {\n                (0, _util.warn)(\"XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.\");\n              }\n\n              linkService.addLinkAttributes?.(html, attributes.href, attributes.newWindow);\n            }\n\n            if (storage && attributes.dataId) {\n              this.setupStorage(html, attributes.dataId, element, storage);\n            }\n          }\n\n          static render(parameters) {\n            const storage = parameters.annotationStorage;\n            const linkService = parameters.linkService;\n            const root = parameters.xfa;\n            const intent = parameters.intent || \"display\";\n            const rootHtml = document.createElement(root.name);\n\n            if (root.attributes) {\n              this.setAttributes({\n                html: rootHtml,\n                element: root,\n                intent,\n                linkService\n              });\n            }\n\n            const stack = [[root, -1, rootHtml]];\n            const rootDiv = parameters.div;\n            rootDiv.appendChild(rootHtml);\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            rootDiv.style.transform = transform;\n            rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n            const textDivs = [];\n\n            while (stack.length > 0) {\n              const [parent, i, html] = stack[stack.length - 1];\n\n              if (i + 1 === parent.children.length) {\n                stack.pop();\n                continue;\n              }\n\n              const child = parent.children[++stack[stack.length - 1][1]];\n\n              if (child === null) {\n                continue;\n              }\n\n              const {\n                name\n              } = child;\n\n              if (name === \"#text\") {\n                const node = document.createTextNode(child.value);\n                textDivs.push(node);\n                html.appendChild(node);\n                continue;\n              }\n\n              let childHtml;\n\n              if (child?.attributes?.xmlns) {\n                childHtml = document.createElementNS(child.attributes.xmlns, name);\n              } else {\n                childHtml = document.createElement(name);\n              }\n\n              html.appendChild(childHtml);\n\n              if (child.attributes) {\n                this.setAttributes({\n                  html: childHtml,\n                  element: child,\n                  storage,\n                  intent,\n                  linkService\n                });\n              }\n\n              if (child.children && child.children.length > 0) {\n                stack.push([child, -1, childHtml]);\n              } else if (child.value) {\n                const node = document.createTextNode(child.value);\n\n                if (_xfa_text.XfaText.shouldBuildText(name)) {\n                  textDivs.push(node);\n                }\n\n                childHtml.appendChild(node);\n              }\n            }\n\n            for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\n              el.setAttribute(\"readOnly\", true);\n            }\n\n            return {\n              textDivs\n            };\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            parameters.div.style.transform = transform;\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.XfaLayer = XfaLayer;\n        /***/\n      },\n      /* 23 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNodeStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        const fs = require(\"fs\");\n\n        const http = require(\"http\");\n\n        const https = require(\"https\");\n\n        const url = require(\"url\");\n\n        const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n        function parseUrl(sourceUrl) {\n          const parsedUrl = url.parse(sourceUrl);\n\n          if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n            return parsedUrl;\n          }\n\n          if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n            return url.parse(`file:///${sourceUrl}`);\n          }\n\n          if (!parsedUrl.host) {\n            parsedUrl.protocol = \"file:\";\n          }\n\n          return parsedUrl;\n        }\n\n        class PDFNodeStream {\n          constructor(source) {\n            this.source = source;\n            this.url = parseUrl(source.url);\n            this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n            this.isFsUrl = this.url.protocol === \"file:\";\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n            this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(start, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n            this._rangeRequestReaders.push(rangeReader);\n\n            return rangeReader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNodeStream = PDFNodeStream;\n\n        class BaseFullReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            const source = stream.source;\n            this._contentLength = source.length;\n            this._loaded = 0;\n            this._filename = null;\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._headersCapability = (0, _util.createPromiseCapability)();\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (!this._isStreamingSupported && this._isRangeSupported) {\n              this._error(new _util.AbortException(\"streaming is disabled\"));\n            }\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        class BaseRangeReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            this._loaded = 0;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            const source = stream.source;\n            this._isStreamingSupported = !source.disableStream;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        function createRequestOptions(parsedUrl, headers) {\n          return {\n            protocol: parsedUrl.protocol,\n            auth: parsedUrl.auth,\n            host: parsedUrl.hostname,\n            port: parsedUrl.port,\n            path: parsedUrl.path,\n            method: \"GET\",\n            headers\n          };\n        }\n\n        class PDFNodeStreamFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._headersCapability.resolve();\n\n              this._setReadableStream(response);\n\n              const getResponseHeader = name => {\n                return this._readableStream.headers[name.toLowerCase()];\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n\n              this._headersCapability.reject(reason);\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            this._httpHeaders = {};\n\n            for (const property in stream.httpHeaders) {\n              const value = stream.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              this._httpHeaders[property] = value;\n            }\n\n            this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n                return;\n              }\n\n              this._setReadableStream(response);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamFsFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            fs.lstat(path, (error, stat) => {\n              if (error) {\n                if (error.code === \"ENOENT\") {\n                  error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n                }\n\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._contentLength = stat.size;\n\n              this._setReadableStream(fs.createReadStream(path));\n\n              this._headersCapability.resolve();\n            });\n          }\n\n        }\n\n        class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            this._setReadableStream(fs.createReadStream(path, {\n              start,\n              end: end - 1\n            }));\n          }\n\n        }\n        /***/\n\n      },\n      /* 24 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createResponseStatusError = createResponseStatusError;\n        exports.extractFilenameFromHeader = extractFilenameFromHeader;\n        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n        exports.validateResponseStatus = validateResponseStatus;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _content_disposition = __w_pdfjs_require__(25);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        function validateRangeRequestCapabilities(_ref36) {\n          let {\n            getResponseHeader,\n            isHttp,\n            rangeChunkSize,\n            disableRange\n          } = _ref36;\n          (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n          const returnValues = {\n            allowRangeRequests: false,\n            suggestedLength: undefined\n          };\n          const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n          if (!Number.isInteger(length)) {\n            return returnValues;\n          }\n\n          returnValues.suggestedLength = length;\n\n          if (length <= 2 * rangeChunkSize) {\n            return returnValues;\n          }\n\n          if (disableRange || !isHttp) {\n            return returnValues;\n          }\n\n          if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n            return returnValues;\n          }\n\n          const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n          if (contentEncoding !== \"identity\") {\n            return returnValues;\n          }\n\n          returnValues.allowRangeRequests = true;\n          return returnValues;\n        }\n\n        function extractFilenameFromHeader(getResponseHeader) {\n          const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n          if (contentDisposition) {\n            let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n            if (filename.includes(\"%\")) {\n              try {\n                filename = decodeURIComponent(filename);\n              } catch (ex) {}\n            }\n\n            if ((0, _display_utils.isPdfFile)(filename)) {\n              return filename;\n            }\n          }\n\n          return null;\n        }\n\n        function createResponseStatusError(status, url) {\n          if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n            return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n          }\n\n          return new _util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n        }\n\n        function validateResponseStatus(status) {\n          return status === 200 || status === 206;\n        }\n        /***/\n\n      },\n      /* 25 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n        var _util = __w_pdfjs_require__(2);\n\n        function getFilenameFromContentDispositionHeader(contentDisposition) {\n          let needsEncodingFixup = true;\n          let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = unescape(filename);\n            filename = rfc5987decode(filename);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          tmp = rfc2231getparam(contentDisposition);\n\n          if (tmp) {\n            const filename = rfc2047decode(tmp);\n            return fixupEncoding(filename);\n          }\n\n          tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          function toParamRegExp(attributePattern, flags) {\n            return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n          }\n\n          function textdecode(encoding, value) {\n            if (encoding) {\n              if (!/^[\\x00-\\xFF]+$/.test(value)) {\n                return value;\n              }\n\n              try {\n                const decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                const buffer = (0, _util.stringToBytes)(value);\n                value = decoder.decode(buffer);\n                needsEncodingFixup = false;\n              } catch (e) {\n                if (/^utf-?8$/i.test(encoding)) {\n                  try {\n                    value = decodeURIComponent(escape(value));\n                    needsEncodingFixup = false;\n                  } catch (err) {}\n                }\n              }\n            }\n\n            return value;\n          }\n\n          function fixupEncoding(value) {\n            if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n              value = textdecode(\"utf-8\", value);\n\n              if (needsEncodingFixup) {\n                value = textdecode(\"iso-8859-1\", value);\n              }\n            }\n\n            return value;\n          }\n\n          function rfc2231getparam(contentDispositionStr) {\n            const matches = [];\n            let match;\n            const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n            while ((match = iter.exec(contentDispositionStr)) !== null) {\n              let [, n, quot, part] = match;\n              n = parseInt(n, 10);\n\n              if (n in matches) {\n                if (n === 0) {\n                  break;\n                }\n\n                continue;\n              }\n\n              matches[n] = [quot, part];\n            }\n\n            const parts = [];\n\n            for (let n = 0; n < matches.length; ++n) {\n              if (!(n in matches)) {\n                break;\n              }\n\n              let [quot, part] = matches[n];\n              part = rfc2616unquote(part);\n\n              if (quot) {\n                part = unescape(part);\n\n                if (n === 0) {\n                  part = rfc5987decode(part);\n                }\n              }\n\n              parts.push(part);\n            }\n\n            return parts.join(\"\");\n          }\n\n          function rfc2616unquote(value) {\n            if (value.startsWith('\"')) {\n              const parts = value.slice(1).split('\\\\\"');\n\n              for (let i = 0; i < parts.length; ++i) {\n                const quotindex = parts[i].indexOf('\"');\n\n                if (quotindex !== -1) {\n                  parts[i] = parts[i].slice(0, quotindex);\n                  parts.length = i + 1;\n                }\n\n                parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n              }\n\n              value = parts.join('\"');\n            }\n\n            return value;\n          }\n\n          function rfc5987decode(extvalue) {\n            const encodingend = extvalue.indexOf(\"'\");\n\n            if (encodingend === -1) {\n              return extvalue;\n            }\n\n            const encoding = extvalue.slice(0, encodingend);\n            const langvalue = extvalue.slice(encodingend + 1);\n            const value = langvalue.replace(/^[^']*'/, \"\");\n            return textdecode(encoding, value);\n          }\n\n          function rfc2047decode(value) {\n            if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n              return value;\n            }\n\n            return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n              if (encoding === \"q\" || encoding === \"Q\") {\n                text = text.replace(/_/g, \" \");\n                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n                  return String.fromCharCode(parseInt(hex, 16));\n                });\n                return textdecode(charset, text);\n              }\n\n              try {\n                text = atob(text);\n              } catch (e) {}\n\n              return textdecode(charset, text);\n            });\n          }\n\n          return \"\";\n        }\n        /***/\n\n      },\n      /* 26 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNetworkStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n        const OK_RESPONSE = 200;\n        const PARTIAL_CONTENT_RESPONSE = 206;\n\n        function getArrayBuffer(xhr) {\n          const data = xhr.response;\n\n          if (typeof data !== \"string\") {\n            return data;\n          }\n\n          const array = (0, _util.stringToBytes)(data);\n          return array.buffer;\n        }\n\n        class NetworkManager {\n          constructor(url) {\n            let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.url = url;\n            this.isHttp = /^https?:/i.test(url);\n            this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);\n            this.withCredentials = args.withCredentials || false;\n\n            this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n              return new XMLHttpRequest();\n            };\n\n            this.currXhrId = 0;\n            this.pendingRequests = Object.create(null);\n          }\n\n          requestRange(begin, end, listeners) {\n            const args = {\n              begin,\n              end\n            };\n\n            for (const prop in listeners) {\n              args[prop] = listeners[prop];\n            }\n\n            return this.request(args);\n          }\n\n          requestFull(listeners) {\n            return this.request(listeners);\n          }\n\n          request(args) {\n            const xhr = this.getXhr();\n            const xhrId = this.currXhrId++;\n            const pendingRequest = this.pendingRequests[xhrId] = {\n              xhr\n            };\n            xhr.open(\"GET\", this.url);\n            xhr.withCredentials = this.withCredentials;\n\n            for (const property in this.httpHeaders) {\n              const value = this.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              xhr.setRequestHeader(property, value);\n            }\n\n            if (this.isHttp && \"begin\" in args && \"end\" in args) {\n              xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n              pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n            } else {\n              pendingRequest.expectedStatus = OK_RESPONSE;\n            }\n\n            xhr.responseType = \"arraybuffer\";\n\n            if (args.onError) {\n              xhr.onerror = function (evt) {\n                args.onError(xhr.status);\n              };\n            }\n\n            xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n            xhr.onprogress = this.onProgress.bind(this, xhrId);\n            pendingRequest.onHeadersReceived = args.onHeadersReceived;\n            pendingRequest.onDone = args.onDone;\n            pendingRequest.onError = args.onError;\n            pendingRequest.onProgress = args.onProgress;\n            xhr.send(null);\n            return xhrId;\n          }\n\n          onProgress(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            pendingRequest.onProgress?.(evt);\n          }\n\n          onStateChange(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            const xhr = pendingRequest.xhr;\n\n            if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n              pendingRequest.onHeadersReceived();\n              delete pendingRequest.onHeadersReceived;\n            }\n\n            if (xhr.readyState !== 4) {\n              return;\n            }\n\n            if (!(xhrId in this.pendingRequests)) {\n              return;\n            }\n\n            delete this.pendingRequests[xhrId];\n\n            if (xhr.status === 0 && this.isHttp) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const xhrStatus = xhr.status || OK_RESPONSE;\n            const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n            if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const chunk = getArrayBuffer(xhr);\n\n            if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n              const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n              const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n              pendingRequest.onDone({\n                begin: parseInt(matches[1], 10),\n                chunk\n              });\n            } else if (chunk) {\n              pendingRequest.onDone({\n                begin: 0,\n                chunk\n              });\n            } else {\n              pendingRequest.onError?.(xhr.status);\n            }\n          }\n\n          getRequestXhr(xhrId) {\n            return this.pendingRequests[xhrId].xhr;\n          }\n\n          isPendingRequest(xhrId) {\n            return xhrId in this.pendingRequests;\n          }\n\n          abortRequest(xhrId) {\n            const xhr = this.pendingRequests[xhrId].xhr;\n            delete this.pendingRequests[xhrId];\n            xhr.abort();\n          }\n\n        }\n\n        class PDFNetworkStream {\n          constructor(source) {\n            this._source = source;\n            this._manager = new NetworkManager(source.url, {\n              httpHeaders: source.httpHeaders,\n              withCredentials: source.withCredentials\n            });\n            this._rangeChunkSize = source.rangeChunkSize;\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          _onRangeRequestReaderClosed(reader) {\n            const i = this._rangeRequestReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeRequestReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n            reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            this._fullRequestReader?.cancel(reason);\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNetworkStream = PDFNetworkStream;\n\n        class PDFNetworkStreamFullRequestReader {\n          constructor(manager, source) {\n            this._manager = manager;\n            const args = {\n              onHeadersReceived: this._onHeadersReceived.bind(this),\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = source.url;\n            this._fullRequestId = manager.requestFull(args);\n            this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._contentLength = source.length;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = false;\n            this._isRangeSupported = false;\n            this._cachedChunks = [];\n            this._requests = [];\n            this._done = false;\n            this._storedError = undefined;\n            this._filename = null;\n            this.onProgress = null;\n          }\n\n          _onHeadersReceived() {\n            const fullRequestXhrId = this._fullRequestId;\n\n            const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n            const getResponseHeader = name => {\n              return fullRequestXhr.getResponseHeader(name);\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: this._manager.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n\n            if (allowRangeRequests) {\n              this._isRangeSupported = true;\n            }\n\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n            if (this._isRangeSupported) {\n              this._manager.abortRequest(fullRequestXhrId);\n            }\n\n            this._headersReceivedCapability.resolve();\n          }\n\n          _onDone(data) {\n            if (data) {\n              if (this._requests.length > 0) {\n                const requestCapability = this._requests.shift();\n\n                requestCapability.resolve({\n                  value: data.chunk,\n                  done: false\n                });\n              } else {\n                this._cachedChunks.push(data.chunk);\n              }\n            }\n\n            this._done = true;\n\n            if (this._cachedChunks.length > 0) {\n              return;\n            }\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            this._headersReceivedCapability.reject(this._storedError);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._cachedChunks.length = 0;\n          }\n\n          _onProgress(evt) {\n            this.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.lengthComputable ? evt.total : this._contentLength\n            });\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get headersReady() {\n            return this._headersReceivedCapability.promise;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._cachedChunks.length > 0) {\n              const chunk = this._cachedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._headersReceivedCapability.reject(reason);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._fullRequestId)) {\n              this._manager.abortRequest(this._fullRequestId);\n            }\n\n            this._fullRequestReader = null;\n          }\n\n        }\n\n        class PDFNetworkStreamRangeRequestReader {\n          constructor(manager, begin, end) {\n            this._manager = manager;\n            const args = {\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = manager.url;\n            this._requestId = manager.requestRange(begin, end, args);\n            this._requests = [];\n            this._queuedChunk = null;\n            this._done = false;\n            this._storedError = undefined;\n            this.onProgress = null;\n            this.onClosed = null;\n          }\n\n          _close() {\n            this.onClosed?.(this);\n          }\n\n          _onDone(data) {\n            const chunk = data.chunk;\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunk = chunk;\n            }\n\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._close();\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._queuedChunk = null;\n          }\n\n          _onProgress(evt) {\n            if (!this.isStreamingSupported) {\n              this.onProgress?.({\n                loaded: evt.loaded\n              });\n            }\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._queuedChunk !== null) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._requestId)) {\n              this._manager.abortRequest(this._requestId);\n            }\n\n            this._close();\n          }\n\n        }\n        /***/\n\n      },\n      /* 27 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFFetchStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(24);\n\n        ;\n\n        function createFetchOptions(headers, withCredentials, abortController) {\n          return {\n            method: \"GET\",\n            headers,\n            signal: abortController?.signal,\n            mode: \"cors\",\n            credentials: withCredentials ? \"include\" : \"same-origin\",\n            redirect: \"follow\"\n          };\n        }\n\n        function createHeaders(httpHeaders) {\n          const headers = new Headers();\n\n          for (const property in httpHeaders) {\n            const value = httpHeaders[property];\n\n            if (typeof value === \"undefined\") {\n              continue;\n            }\n\n            headers.append(property, value);\n          }\n\n          return headers;\n        }\n\n        class PDFFetchStream {\n          constructor(source) {\n            this.source = source;\n            this.isHttp = /^https?:/i.test(source.url);\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFFetchStreamReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFFetchStream = PDFFetchStream;\n\n        class PDFFetchStreamReader {\n          constructor(stream) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            this._filename = null;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._contentLength = source.length;\n            this._headersCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._headers = createHeaders(this._stream.httpHeaders);\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._reader = response.body.getReader();\n\n              this._headersCapability.resolve();\n\n              const getResponseHeader = name => {\n                return response.headers.get(name);\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: this._stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n              if (!this._isStreamingSupported && this._isRangeSupported) {\n                this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n              }\n            }).catch(this._headersCapability.reject);\n            this.onProgress = null;\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._headersCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n\n        class PDFFetchStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._isStreamingSupported = !source.disableStream;\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._headers = createHeaders(this._stream.httpHeaders);\n\n            this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._readCapability.resolve();\n\n              this._reader = response.body.getReader();\n            }).catch(this._readCapability.reject);\n            this.onProgress = null;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n        /***/\n\n      }\n      /******/\n      ];\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n\n      (() => {\n        var exports = __webpack_exports__;\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"addLinkAttributes\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.addLinkAttributes;\n          }\n        });\n        Object.defineProperty(exports, \"getFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getPdfFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getPdfFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getXfaPageViewport\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getXfaPageViewport;\n          }\n        });\n        Object.defineProperty(exports, \"isPdfFile\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.isPdfFile;\n          }\n        });\n        Object.defineProperty(exports, \"LinkTarget\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.LinkTarget;\n          }\n        });\n        Object.defineProperty(exports, \"loadScript\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.loadScript;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDateString\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PDFDateString;\n          }\n        });\n        Object.defineProperty(exports, \"PixelsPerInch\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PixelsPerInch;\n          }\n        });\n        Object.defineProperty(exports, \"RenderingCancelledException\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.RenderingCancelledException;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationMode\", {\n          enumerable: true,\n          get: function () {\n            return _util.AnnotationMode;\n          }\n        });\n        Object.defineProperty(exports, \"CMapCompressionType\", {\n          enumerable: true,\n          get: function () {\n            return _util.CMapCompressionType;\n          }\n        });\n        Object.defineProperty(exports, \"createObjectURL\", {\n          enumerable: true,\n          get: function () {\n            return _util.createObjectURL;\n          }\n        });\n        Object.defineProperty(exports, \"createPromiseCapability\", {\n          enumerable: true,\n          get: function () {\n            return _util.createPromiseCapability;\n          }\n        });\n        Object.defineProperty(exports, \"createValidAbsoluteUrl\", {\n          enumerable: true,\n          get: function () {\n            return _util.createValidAbsoluteUrl;\n          }\n        });\n        Object.defineProperty(exports, \"InvalidPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.InvalidPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"MissingPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.MissingPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"OPS\", {\n          enumerable: true,\n          get: function () {\n            return _util.OPS;\n          }\n        });\n        Object.defineProperty(exports, \"PasswordResponses\", {\n          enumerable: true,\n          get: function () {\n            return _util.PasswordResponses;\n          }\n        });\n        Object.defineProperty(exports, \"PermissionFlag\", {\n          enumerable: true,\n          get: function () {\n            return _util.PermissionFlag;\n          }\n        });\n        Object.defineProperty(exports, \"removeNullCharacters\", {\n          enumerable: true,\n          get: function () {\n            return _util.removeNullCharacters;\n          }\n        });\n        Object.defineProperty(exports, \"shadow\", {\n          enumerable: true,\n          get: function () {\n            return _util.shadow;\n          }\n        });\n        Object.defineProperty(exports, \"UnexpectedResponseException\", {\n          enumerable: true,\n          get: function () {\n            return _util.UnexpectedResponseException;\n          }\n        });\n        Object.defineProperty(exports, \"UNSUPPORTED_FEATURES\", {\n          enumerable: true,\n          get: function () {\n            return _util.UNSUPPORTED_FEATURES;\n          }\n        });\n        Object.defineProperty(exports, \"Util\", {\n          enumerable: true,\n          get: function () {\n            return _util.Util;\n          }\n        });\n        Object.defineProperty(exports, \"VerbosityLevel\", {\n          enumerable: true,\n          get: function () {\n            return _util.VerbosityLevel;\n          }\n        });\n        Object.defineProperty(exports, \"build\", {\n          enumerable: true,\n          get: function () {\n            return _api.build;\n          }\n        });\n        Object.defineProperty(exports, \"getDocument\", {\n          enumerable: true,\n          get: function () {\n            return _api.getDocument;\n          }\n        });\n        Object.defineProperty(exports, \"LoopbackPort\", {\n          enumerable: true,\n          get: function () {\n            return _api.LoopbackPort;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDataRangeTransport\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFDataRangeTransport;\n          }\n        });\n        Object.defineProperty(exports, \"PDFWorker\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFWorker;\n          }\n        });\n        Object.defineProperty(exports, \"version\", {\n          enumerable: true,\n          get: function () {\n            return _api.version;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationLayer\", {\n          enumerable: true,\n          get: function () {\n            return _annotation_layer.AnnotationLayer;\n          }\n        });\n        Object.defineProperty(exports, \"GlobalWorkerOptions\", {\n          enumerable: true,\n          get: function () {\n            return _worker_options.GlobalWorkerOptions;\n          }\n        });\n        Object.defineProperty(exports, \"renderTextLayer\", {\n          enumerable: true,\n          get: function () {\n            return _text_layer.renderTextLayer;\n          }\n        });\n        Object.defineProperty(exports, \"SVGGraphics\", {\n          enumerable: true,\n          get: function () {\n            return _svg.SVGGraphics;\n          }\n        });\n        Object.defineProperty(exports, \"XfaLayer\", {\n          enumerable: true,\n          get: function () {\n            return _xfa_layer.XfaLayer;\n          }\n        });\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _api = __w_pdfjs_require__(6);\n\n        var _annotation_layer = __w_pdfjs_require__(18);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _text_layer = __w_pdfjs_require__(20);\n\n        var _svg = __w_pdfjs_require__(21);\n\n        var _xfa_layer = __w_pdfjs_require__(22);\n\n        const pdfjsVersion = '2.11.338';\n        const pdfjsBuild = 'dedff3c98';\n        {\n          if (_is_node.isNodeJS) {\n            const {\n              PDFNodeStream\n            } = __w_pdfjs_require__(23);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              return new PDFNodeStream(params);\n            });\n          } else {\n            const {\n              PDFNetworkStream\n            } = __w_pdfjs_require__(26);\n\n            const {\n              PDFFetchStream\n            } = __w_pdfjs_require__(27);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              if ((0, _display_utils.isValidFetchUrl)(params.url)) {\n                return new PDFFetchStream(params);\n              }\n\n              return new PDFNetworkStream(params);\n            });\n          }\n        }\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"mappings":"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","names":["module","define","exports","root","DEFAULT_LINK_REL","SVG_NS","PixelsPerInch","CSS","PDF","shadow","constructor","ownerDocument","globalThis","document","_createCanvas","canvas","width","height","asTypedArray","isValidFetchUrl","baseURI","response","fetch","url","ok","statusText","stringToBytes","text","request","XMLHttpRequest","DONE","data","responseText","resolve","reject","_fetchData","fetchData","isCompressed","cMapData","compressionType","_createSVG","type","viewBox","scale","rotation","offsetX","offsetY","dontFlip","centerX","centerY","rotateD","rotateA","rotateB","rotateC","offsetCanvasY","offsetCanvasX","Math","clone","slice","convertToViewportPoint","_util","transform","convertToViewportRectangle","topLeft","rect","bottomRight","convertToPdfPoint","LinkTarget","NONE","SELF","BLANK","PARENT","TOP","target","rel","enabled","assert","urlNullRemoved","removeNullCharacters","link","targetStr","ii","length","i","filename","anchor","query","end","defaultFilename","isDataScheme","warn","reURI","reFilename","splitURI","suggestedFilename","decodeURIComponent","Object","time","name","started","Date","now","timeEnd","start","toString","outBuf","longest","times","duration","protocol","baseUrl","removeScriptElement","script","src","remove","evt","documentElement","appendChild","console","details","pdfDateStringRegex","toDateObject","isString","input","matches","year","parseInt","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","xfaPage","style","__w_pdfjs_require__","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","RenderingIntentFlag","ANY","DISPLAY","PRINT","ANNOTATIONS_FORMS","ANNOTATIONS_STORAGE","ANNOTATIONS_DISABLE","OPLIST","AnnotationMode","DISABLE","ENABLE","ENABLE_FORMS","ENABLE_STORAGE","PermissionFlag","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","TextRenderingMode","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","ImageKind","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","AnnotationType","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","AnnotationStateModelType","MARKED","REVIEW","AnnotationMarkedState","UNMARKED","AnnotationReviewState","ACCEPTED","REJECTED","CANCELLED","COMPLETED","AnnotationReplyType","GROUP","REPLY","AnnotationFlag","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","AnnotationFieldFlag","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","AnnotationBorderStyleType","SOLID","DASHED","BEVELED","INSET","AnnotationActionEventType","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","DocumentActionEventType","WC","WS","DS","WP","DP","PageActionEventType","O","StreamType","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","FontType","TYPE1","TYPE1STANDARD","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","VerbosityLevel","ERRORS","WARNINGS","INFOS","CMapCompressionType","BINARY","STREAM","OPS","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","UNSUPPORTED_FEATURES","unknown","forms","javaScript","signatures","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontBuildPath","errorFontGetPath","errorMarkedContent","errorContentSubStream","PasswordResponses","NEED_PASSWORD","INCORRECT_PASSWORD","verbosity","Number","level","msg","cond","unreachable","base","origin","other","options","dots","tryConvertEncoding","stringToUTF8String","absoluteUrl","_isValidProtocol","value","enumerable","configurable","writable","BaseException","message","Error","code","status","NullCharactersRegExp","str","bytes","MAX_ARGUMENT_COUNT","String","strBuf","chunkEnd","chunk","arr","undefined","byteLength","Uint8Array","resultLength","arrayByteLength","pos","item","itemLength","obj","buffer8","view32","buffer","IsLittleEndianCached","isLittleEndian","IsEvalSupportedCached","isEvalSupported","hexNumbers","Array","keys","n","makeHexColor","r","g","b","m1","m2","applyTransform","xt","p","m","yt","applyInverseTransform","d","getAxialAlignedBoundingBox","p1","Util","p2","p3","p4","inverseTransform","apply3dTransform","v","singularValueDecompose2dScale","transpose","a","c","first","sx","sy","normalizeRect","intersect","orderedX","rect1","rect2","compare","orderedY","result","PDFStringTranslateTable","match","buf","char","escape","unescape","encodeURIComponent","arr1","arr2","date","padStart","capability","isSettled","get","reason","contentType","forceDataSchema","URL","digits","b1","b2","b3","d1","d2","d3","d4","isNodeJS","process","nw","BaseCanvasFactory","create","context","reset","canvasAndContext","destroy","BaseCMapReaderFactory","BaseStandardFontDataFactory","BaseSVGFactory","svg","createElement","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","DefaultCanvasFactory","_is_node","_display_utils","DefaultCMapReaderFactory","DefaultStandardFontDataFactory","createPDFNetworkStream","pdfNetworkStreamFactory","task","PDFDocumentLoadingTask","source","isArrayBuffer","PDFDataRangeTransport","range","params","rangeTransport","worker","key","window","location","href","Buffer","isNaN","docBaseUrl","maxImageSize","useWorkerFetch","disableFontFace","useSystemFonts","disableRange","disableStream","disableAutoFetch","setVerbosityLevel","workerParams","port","GlobalWorkerOptions","workerPort","PDFWorker","docId","destroyed","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","initialData","progressiveDone","contentDispositionFilename","httpHeaders","withCredentials","rangeChunkSize","Promise","messageHandler","postMessageTransfers","transport","pdfDataRangeTransport","workerId","apiVersion","password","ignoreErrors","fontExtraProperties","enableXfa","cMapUrl","standardFontDataUrl","idCounters","doc","promise","_worker","addRangeListener","listener","addProgressListener","addProgressiveReadListener","addProgressiveDoneListener","onDataRange","_rangeListeners","onDataProgress","_progressListeners","total","onDataProgressiveRead","_progressiveReadListeners","onDataProgressiveDone","_progressiveDoneListeners","transportReady","requestDataRange","abort","pdfInfo","deprecated","annotationStorage","numPages","fingerprints","isPureXfa","_htmlForXfa","allXfaHtml","getPage","pageNumber","getPageIndex","ref","getDestinations","getDestination","id","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getJSActions","getDocJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","getDownloadInfo","getStats","cleanup","keepLoadedFonts","loadingParams","loadingTask","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","pdfBug","pageIndex","pageInfo","commonObjs","PDFObjects","Map","rotate","userUnit","view","getViewport","getAnnotations","intent","intentArgs","cacheKey","_pageIndex","renderingIntent","annotations","annotation","getXfa","render","canvasContext","viewport","annotationMode","imageLayer","canvasFactory","background","optionalContentConfigPromise","arguments","_stats","intentState","streamReaderCancelTimeout","clearTimeout","canvasFactoryInstance","_ownerDocument","intentPrint","displayReadyCapability","fnArray","argsArray","lastChunk","complete","error","internalRenderTask","_tryCleanup","callback","objs","operatorList","useRequestAnimationFrame","_pdfBug","Set","add","renderTask","optionalContentConfig","pendingCleanup","transparency","operatorListChanged","getOperatorList","opListTask","opListReadCapability","streamTextContent","normalizeWhitespace","disableCombineTextItems","includeMarkedContent","TEXT_CONTENT_CHUNK_SIZE","combineTextItems","highWaterMark","size","textContent","getTextContent","xfa","XfaText","readableStream","reader","done","styles","items","pump","getReader","getStructTree","_destroy","waitOn","values","force","renderTasks","completed","cancel","clear","resetStats","_startRenderPage","_renderPageChunk","operatorListChunk","_pumpOperatorList","_abortOperatorList","streamReader","setTimeout","curIntentState","_intentStates","curCacheKey","stats","postMessage","cloned","transfers","byteOffset","val","cloneValue","desc","WeakMap","event","_listeners","addEventListener","removeEventListener","terminate","PDFWorkerUtil","isWorkerDisabled","fallbackWorkerSrc","fakeWorkerId","pdfjsFilePath","wrapper","_workerPorts","_initialize","_port","_messageHandler","_initializeFromPort","_mainThreadWorkerMessageHandler","workerSrc","isSameOrigin","terminateEarly","onWorkerError","_setupFakeWorker","_webWorker","supportTransfers","sendTest","testObj","info","WorkerMessageHandler","LoopbackPort","workerHandler","fromPort","_setupFakeWorkerGlobal","loader","mainWorkerMessageHandler","eval","loadScript","onUnsupportedFeature","styleElement","CMapReaderFactory","cMapPacked","StandardFontDataFactory","setupMessageHandler","_annotation_storage","getRenderingIntent","isOpList","lastModified","destroyCapability","_passwordCapability","pageCache","page","resetModified","terminated","_networkStream","getFullReader","loaded","sink","close","readyReason","headersCapability","fullReader","_fullReader","isStreamingSupported","isRangeSupported","onProgress","_lastProgress","contentLength","rangeReader","begin","htmlForXfa","ex","exception","onPassword","updatePassword","_params","exportedData","exportedError","fontRegistry","registerFont","pageProxy","imageData","MAX_IMAGE_SIZE_TO_STORE","_onUnsupportedFeature","featureId","_numPages","pagePromises","serializable","getPageJSActions","results","metadata","startCleanup","cleanupSuccessful","_ensureObj","objId","resolved","has","canvasInUse","WeakSet","initializeGraphics","cancelled","_canvas","InternalRenderTask","getNextBreakPoint","graphicsReadyCallback","gfx","endDrawing","graphicsReady","_continueBound","stepper","running","_continue","onContinue","_scheduleNextBound","_scheduleNext","_useRequestAnimationFrame","_cancelBound","_next","operatorListIdx","version","build","BaseFontLoader","addNativeFontFace","nativeFontFace","insertRule","styleSheet","sheet","nativeFontFaces","bind","missingFile","isFontLoadingAPISupported","createNativeFontFace","family","rule","createFontFaceRule","isSyncFontLoadingSupported","_queueLoadingCallback","hasFonts","fonts","_loadTestFont","_prepareFontLoadEvent","FontLoader","requests","nextRequestId","supported","navigator","userAgent","otherRequest","shift","loadingContext","completeRequest","getLoadTestFont","atob","offset","chunk1","s","chunk2","ctx","called","isFontReady","loadTestFontId","COMMENT_OFFSET","spliceString","CFF_CHECKSUM_OFFSET","XXXX_VALUE","checksum","int32","string32","btoa","names","loadedName","div","span","translatedData","cssFontInfo","css","weight","fontWeight","italicAngle","fontFamily","bytesToString","mimetype","getPathGenerator","character","cmds","jsBuf","args","current","NodeCanvasFactory","NodeCMapReaderFactory","NodeStandardFontDataFactory","fs","__non_webpack_require__","Canvas","getValue","defaultValue","setValue","modified","_setModified","getAll","objectFromMap","_storage","_modified","onSetModified","onResetModified","MIN_FONT_SIZE","MAX_FONT_SIZE","MAX_GROUP_SIZE","MAX_CACHED_CANVAS_PATTERNS","EXECUTION_TIME","EXECUTION_STEPS","COMPILE_TYPE3_GLYPHS","MAX_SIZE_TO_COMPILE","FULL_CHUNK_HEIGHT","LINEWIDTH_SCALE_FACTOR","mozCurrentTransform","translate","setTransform","resetTransform","set","_getLineWidth","_transformMatrix","ad_bc","bc_ad","f","old","_originalSave","prev","pop","_originalRestore","y","x","_originalResetTransform","cosValue","angle","sinValue","getCanvas","canvasEntry","addContextCurrentTransform","cache","maxSize","_maxSize","POINT_TO_PROCESS_LIMIT","POINT_TYPES","imgData","width1","j0","points","lineSize","data0","elem","mask","count","j","sum","steps","outlines","coords","p0","step","pp","drawOutline","beginPath","k","kk","o","l","ll","setCurrentPoint","transferMaps","ImageData","partialChunkHeight","fullChunks","totalChunks","chunkImgData","srcPos","destPos","dest","elemsInThisChunk","transferMapGray","transferMapRed","transferMapGreen","transferMapBlue","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","thisChunkHeight","srcDiff","kEnd","kEndUnrolled","srcByte","hasTransferMaps","kind","properties","property","sourceCtx","destCtx","getLineDash","lineDashOffset","alpha","r0","g0","b0","alpha_","maskData","transferMap","layerData","hasBackdrop","backdrop","composeFn","subtype","composeSMaskLuminosity","composeSMaskAlpha","PIXELS_TO_PROCESS","chunkSize","row","chunkHeight","maskCtx","layerCtx","composeSMaskBackdrop","genericComposeSMask","actualScale","PDF_TO_CSS_UNITS","interpolate","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","canvasCtx","CanvasExtraState","beginDrawing","transparentCanvas","resetCtxToDefault","beginLayout","executeOperatorList","executionStartIdx","argsArrayLen","chunkOperations","endTime","fnId","nextBreakPoint","continueCallback","objsPool","depObjId","compositeCtx","endLayout","_scaleImage","img","widthScale","heightScale","paintWidth","paintHeight","tmpCanvasId","tmpCtx","newWidth","newHeight","tmpCanvas","_createMaskCanvas","fillColor","isPatternFill","patternFill","maskCanvas","putBinaryImageMask","objToCanvas","maskToCanvas","cord1","cord2","drawnWidth","drawnHeight","fillCanvas","fillCtx","scaled","mozCurrentTransformInverse","getImageSmoothingEnabled","inverse","limit","dashArray","dashPhase","states","state","activeSMask","suspendSMaskGroup","endSMaskGroup","beginSMaskGroup","cacheId","groupLevel","scratchCanvas","currentCtx","currentTransform","groupCtx","scaleY","copyCtxState","composeSMask","deltaTransform","resumeSMaskGroup","resumeSMaskCtx","ops","xw","yh","consumePath","strokeColor","strokeAlpha","contentVisible","getPattern","lineWidth","getSinglePixelWidth","_combinedScaleFactor","fillAlpha","needRestore","pendingEOFill","paths","pendingTextPaths","path","fontSize","spacing","leading","fontObj","fontRefName","isType3Font","bold","italic","typeface","fallbackName","browserFontSize","mode","rise","paintChar","textRenderingMode","fontSizeScale","fillStrokeMode","isAddToPathSet","addToPath","patternTransform","isFontSubpixelAAEnabled","glyphs","charSpacing","wordSpacing","fontDirection","textHScale","glyphsLength","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","textMatrix","textRise","resetLineWidthToOne","textMatrixScale","glyph","isNum","restoreNeeded","fontChar","accent","scaledY","vmetric","vx","vy","scaledX","measuredWidth","characterScaleX","scaledAccentX","scaledAccentY","charWidth","showType3Text","fontMatrix","isTextInvisible","spacingLength","operatorListId","transformed","urx","llx","ury","lly","getColorN_Pattern","IR","color","baseTransform","canvasGraphicsFactory","createCanvasGraphics","_getPattern","matrix","getShadingPattern","cachedCanvasPatterns","inv","bl","br","ul","ur","x0","y0","x1","y1","bbox","group","isolated","knockout","bounds","canvasBounds","scaleX","startTransformInverse","processingType3","compileType3Glyph","compiled","skewX","skewY","positions","trans","images","image","map","w","h","imgToPaint","HTMLElement","putBinaryImageData","position","left","top","entry","visible","tag","isContentVisible","pendingClip","absDet","sqNorm1","sqNorm2","pixelHeight","EPSILON","_cachedGetSinglePixelWidth","getCanvasPosition","CanvasGraphics","op","region","Path2D","BaseShadingPattern","_createGradient","grad","_r1","_colorStops","colorStop","owner","applyBoundingBox","_bbox","domMatrix","colors","rowSize","tmp","c1","c2","c3","x2","y2","x3","y3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","minY","maxY","cab","cbb","xa","car","cag","xb","cbr","cbg","x1_","x2_","ps","figure","cs","verticesPerRow","rows","cols","q","drawTriangle","_createMeshCanvas","EXPECTED_SCALE","MAX_PATTERN_SIZE","BORDER_SIZE","boundsWidth","boundsHeight","combinedScale","_coords","_colors","paddedWidth","paddedHeight","cachedCanvases","backgroundColor","_figures","drawFigure","matrixScale","temporaryPatternCanvas","_background","DummyShadingPattern","PaintType","COLORED","UNCOLORED","createPatternCanvas","xstep","ystep","paintType","tilingType","curMatrixScale","dimx","dimy","graphics","adjustedX0","adjustedY0","adjustedX1","adjustedY1","getSizeAndScale","TilingPattern","realOutputSize","clipBbox","bboxWidth","bboxHeight","setFillAndStrokeStyleToContext","fillStyle","strokeStyle","cssColor","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","sourceName","targetName","comObj","stream","callbackId","wrapReason","action","cbSourceName","cbTargetName","streamId","_onComObjOnMessage","on","ah","actionHandler","actionName","handler","send","sendWithPromise","sendWithStream","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","cancelCapability","queueingStrategy","_createStreamSink","self","streamSink","enqueue","isCancelled","lastDesiredSize","sinkCapability","onPull","onCancel","ready","success","_processStreamMessage","streamController","_deleteStreamController","_postMessage","parsedData","rawData","getRaw","_data","_metadataMap","creator","order","groups","_groups","off","_evaluateVisibilityExpression","array","operator","element","isVisible","expression","policy","ids","setVisibility","getOrder","_order","getGroups","getGroup","_onProgressiveDone","_onReceiveData","_fullRequestReader","found","_progressiveDataLength","_onProgress","firstReader","_removeRangeReader","queuedChunks","_queuedChunks","_progressiveDone","_contentDispositionFilename","getRangeReader","cancelAllRequests","isPdfFile","_enqueue","_done","requestCapability","headersReady","_headersReady","_filename","_isRangeSupported","_isStreamingSupported","_contentLength","read","_requests","requestsCapability","_queuedChunk","output","node","children","walk","child","shouldBuildText","DEFAULT_TAB_INDEX","GetElementsByNameSet","parameters","annotationType","fieldType","radioButton","checkBox","isRenderable","ignoreBorder","createQuadrilaterals","layer","linkService","downloadManager","imageResourcesPath","renderForms","svgFactory","enableScripting","fieldObjects","mouseState","_createContainer","container","horizontalRadius","horizontalCornerRadius","verticalRadius","verticalCornerRadius","radius","borderColor","_createQuadrilaterals","quadPoints","quadrilaterals","savedRect","quadPoint","_createPopup","trigger","popupElement","titleObj","modificationDate","contentsObj","hideWrapper","popup","_renderQuadrilaterals","quadrilateral","className","_getElementsByName","skipId","fields","_fieldObjects","fieldObj","exportValues","exportValue","domElement","platform","isWin","isMac","isTooltipOnly","resetForm","addLinkAttributes","newWindow","hasClickAction","linkElement","index","cloneNode","_bindLink","destination","_bindNamedAction","_bindJSAction","actions","jsName","detail","onclick","_bindResetFormAction","otherClickAction","resetFormFields","refs","resetFormRefs","include","allFields","fieldIds","field","storage","allIds","valueAsString","toLowerCase","JSON","hasPopup","alternativeText","_getKeyModifier","AnnotationElement","ctrlKey","metaKey","_setEventListener","baseName","eventName","valueGetter","shiftKey","modifier","checked","_setEventListeners","getter","_setBackgroundColor","_dispatchEventFromSandbox","setColor","ColorConverters","commonActions","display","hidden","print","focus","preventScroll","userName","readonly","required","bgColor","fgColor","textColor","jsEvent","hasAppearance","fieldValue","setPropertyOnSiblings","storedData","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","multiLine","readOnly","fieldName","blurListener","activeElement","selRange","selStart","selEnd","commitKey","willCommit","selectionStart","selectionEnd","_blurListener","isDown","Keystroke","change","maxLen","comb","fieldWidth","combWidth","_setTextStyle","TEXT_ALIGNMENT","fontColor","defaultAppearanceData","textAlignment","curChecked","checkbox","buttonValue","radio","defaultFieldValue","pdfButtonValue","fontSizeStyle","selectElement","combo","multiSelect","option","optionElement","displayValue","isExport","multiple","getItems","multipleSelection","selected","insert","indices","editable","changeEx","keyDown","IGNORE_TYPES","parentType","selector","parentId","parentElements","popupLeft","popupTop","BACKGROUND_ENLIGHT","title","dir","dateObject","PDFDateString","toLocaleDateString","toLocaleTimeString","contents","_formatContents","lines","line","_toggle","pinned","_show","pin","_hide","unpin","borderWidth","square","circle","containerClassName","vertices","coordinate","polyline","svgElementName","inkLists","content","file","getFilenameFromUrl","stringToPDFString","_download","sortedAnnotations","popupAnnotations","AnnotationElementFactory","rendered","renderedElement","PopupAnnotationElement","update","elements","CMYK_G","G_CMYK","G_RGB","G_HTML","G","makeColorComp","RGB_G","RGB_HTML","R","B","T_HTML","CMYK_RGB","CMYK_HTML","components","RGB_CMYK","MAX_TEXT_DIVS_TO_RENDER","DEFAULT_FONT_SIZE","DEFAULT_FONT_ASCENT","ascentCache","AllWhitespaceRegexp","cachedAscent","metrics","ascent","fontBoundingBoxAscent","descent","fontBoundingBoxDescent","ratio","pixels","textDiv","textDivProperties","canvasWidth","hasText","geom","hasEOL","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","tx","fontName","fontHeight","fontAscent","getAscent","_fontInspectorEnabled","shouldScaleText","absScaleX","absScaleY","_textContentStream","angleCos","angleSin","divWidth","divHeight","right","bottom","_canceled","textDivs","_textDivs","_capability","textDivsLength","t","ts","_bounds","_viewport","expanded","expandBounds","divProperties","e","jj","boxScale","findPositiveMin","boxes","box","x1New","x2New","expandBoundsLTR","fakeBoundary","Infinity","horizon","boundary","affectedBoundary","maxXNew","horizonPart","xNew","changedHorizon","lastBoundary","useBoundary","used","textContentStream","textContentItemsStr","enhanceTextSelection","_enhanceTextSelection","_layoutTextCtx","_reader","_renderTimer","_processItems","len","parent","_container","parentNode","appendText","_layoutText","_layoutTextLastFontFamily","_render","timeout","styleCache","_textContent","textItems","textStyles","expandTextDivs","expandDivs","_renderingDone","expand","transformBuf","paddingBuf","divProps","renderParameters","SVGGraphics","SVG_DEFAULTS","fontStyle","XML_NS","XLINK_NS","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","crc","body","crc32","deflateSyncUncompressed","literals","maxBlockLength","deflateBlocks","idat","pi","adler","adler32","colorType","bitDepth","offsetLiterals","offsetBytes","isMask","ihdr","deflateSync","pngLength","writePngChunk","createObjectURL","encode","opTree","opListElement","fn","pf","clipCount","maskCount","shadingCount","SVGExtraState","transformMatrix","loadDependencies","dependencies","getSVG","svgElement","convertOpList","operatorIdMapping","_operatorIdMapping","opList","opListToTree","executeOpTree","opTreeElement","tspan","lineWidthScale","pm","txtElement","addFontStyle","cssStyle","hasChildNodes","setStrokeAlpha","setFillAlpha","_makeColorN_Pattern","_makeTilingPattern","tilingId","txstep","xscale","tystep","yscale","tiling","tx1","tx0","ty1","ty0","_makeShadingPattern","shadingId","colorStops","gradient","point0","point1","focalPoint","circlePoint","focalRadius","circleRadius","stop","clipId","clipPath","clipElement","activeClipUrl","extraStack","_setStrokeAttributes","miterLimit","lineCap","lineJoin","imgSrc","cliprect","imgEl","maskId","definitions","rootGroup","_ensureClipGroup","clipGroup","_ensureTransformGroup","tgrp","setupStorage","html","xfaOn","xfaOff","setAttributes","attributes","isHTMLAnchorElement","HTMLAnchorElement","dataId","rootHtml","stack","rootDiv","childHtml","xmlns","el","http","https","fileUriRegex","parsedUrl","sourceUrl","host","parseUrl","_rangeChunkSize","_disableRange","_storedError","_loaded","_readableStream","_error","_setReadableStream","auth","hostname","method","headers","handleResponse","_url","getResponseHeader","allowRangeRequests","suggestedLength","isHttp","extractFilenameFromHeader","createRequestOptions","stat","returnValues","contentEncoding","contentDisposition","getFilenameFromContentDispositionHeader","needsEncodingFixup","toParamRegExp","rfc2616unquote","rfc5987decode","rfc2047decode","fixupEncoding","rfc2231getparam","flags","decoder","fatal","encoding","textdecode","iter","contentDispositionStr","parts","part","quotindex","encodingend","extvalue","langvalue","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","xhr","requestRange","listeners","prop","requestFull","getXhr","xhrId","currXhrId","pendingRequest","onError","onHeadersReceived","onDone","onStateChange","pendingRequests","xhrStatus","ok_response_on_range_request","expectedStatus","getArrayBuffer","rangeHeader","getRequestXhr","isPendingRequest","abortRequest","_onRangeRequestReaderClosed","_manager","_source","manager","_onHeadersReceived","fullRequestXhrId","_fullRequestId","fullRequestXhr","_onDone","_onError","createResponseStatusError","_close","_requestId","signal","abortController","credentials","redirect","Headers","AbortController","createHeaders","createFetchOptions","validateResponseStatus","_abortController","__webpack_modules__","pdfjsVersion","pdfjsBuild","PDFNodeStream","require","setPDFNetworkStreamFactory","PDFNetworkStream","PDFFetchStream"],"sources":["webpack://pdfjs-dist/build/pdf/webpack/universalModuleDefinition","webpack://pdfjs-dist/build/pdf/src/display/display_utils.js","webpack://pdfjs-dist/build/pdf/src/shared/util.js","webpack://pdfjs-dist/build/pdf/src/shared/compatibility.js","webpack://pdfjs-dist/build/pdf/src/shared/is_node.js","webpack://pdfjs-dist/build/pdf/src/display/base_factory.js","webpack://pdfjs-dist/build/pdf/src/display/api.js","webpack://pdfjs-dist/build/pdf/src/display/font_loader.js","webpack://pdfjs-dist/build/pdf/src/display/node_utils.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_storage.js","webpack://pdfjs-dist/build/pdf/src/display/canvas.js","webpack://pdfjs-dist/build/pdf/src/display/pattern_helper.js","webpack://pdfjs-dist/build/pdf/src/display/worker_options.js","webpack://pdfjs-dist/build/pdf/src/shared/message_handler.js","webpack://pdfjs-dist/build/pdf/src/display/metadata.js","webpack://pdfjs-dist/build/pdf/src/display/optional_content_config.js","webpack://pdfjs-dist/build/pdf/src/display/transport_stream.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_text.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_layer.js","webpack://pdfjs-dist/build/pdf/src/shared/scripting_utils.js","webpack://pdfjs-dist/build/pdf/src/display/text_layer.js","webpack://pdfjs-dist/build/pdf/src/display/svg.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_layer.js","webpack://pdfjs-dist/build/pdf/src/display/node_stream.js","webpack://pdfjs-dist/build/pdf/src/display/network_utils.js","webpack://pdfjs-dist/build/pdf/src/display/content_disposition.js","webpack://pdfjs-dist/build/pdf/src/display/network.js","webpack://pdfjs-dist/build/pdf/src/display/fetch_stream.js","webpack://pdfjs-dist/build/pdf/webpack/bootstrap","webpack://pdfjs-dist/build/pdf/src/pdf.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(this, function() {\nreturn ","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  BaseException,\n  isString,\n  removeNullCharacters,\n  shadow,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\n\nconst DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nconst PixelsPerInch = {\n  CSS: 96.0,\n  PDF: 72.0,\n\n  /** @type {number} */\n  get PDF_TO_CSS_UNITS() {\n    return shadow(this, \"PDF_TO_CSS_UNITS\", this.CSS / this.PDF);\n  },\n};\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, type) {\n    super(msg, \"RenderingCancelledException\");\n    this.type = type;\n  }\n}\n\nconst LinkTarget = {\n  NONE: 0, // Default value.\n  SELF: 1,\n  BLANK: 2,\n  PARENT: 3,\n  TOP: 4,\n};\n\n/**\n * @typedef ExternalLinkParameters\n * @typedef {Object} ExternalLinkParameters\n * @property {string} url - An absolute URL.\n * @property {LinkTarget} [target] - The link target. The default value is\n *   `LinkTarget.NONE`.\n * @property {string} [rel] - The link relationship. The default value is\n *   `DEFAULT_LINK_REL`.\n * @property {boolean} [enabled] - Whether the link should be enabled. The\n *   default value is true.\n */\n\n/**\n * Adds various attributes (href, title, target, rel) to hyperlinks.\n * @param {HTMLAnchorElement} link - The link element.\n * @param {ExternalLinkParameters} params\n */\nfunction addLinkAttributes(link, { url, target, rel, enabled = true } = {}) {\n  assert(\n    url && typeof url === \"string\",\n    'addLinkAttributes: A valid \"url\" parameter must provided.'\n  );\n\n  const urlNullRemoved = removeNullCharacters(url);\n  if (enabled) {\n    link.href = link.title = urlNullRemoved;\n  } else {\n    link.href = \"\";\n    link.title = `Disabled: ${urlNullRemoved}`;\n    link.onclick = () => {\n      return false;\n    };\n  }\n\n  let targetStr = \"\"; // LinkTarget.NONE\n  switch (target) {\n    case LinkTarget.NONE:\n      break;\n    case LinkTarget.SELF:\n      targetStr = \"_self\";\n      break;\n    case LinkTarget.BLANK:\n      targetStr = \"_blank\";\n      break;\n    case LinkTarget.PARENT:\n      targetStr = \"_parent\";\n      break;\n    case LinkTarget.TOP:\n      targetStr = \"_top\";\n      break;\n  }\n  link.target = targetStr;\n\n  link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @returns {string}\n */\nfunction getFilenameFromUrl(url) {\n  const anchor = url.indexOf(\"#\");\n  const query = url.indexOf(\"?\");\n  const end = Math.min(\n    anchor > 0 ? anchor : url.length,\n    query > 0 ? query : url.length\n  );\n  return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch (ex) {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  constructor() {\n    this.started = Object.create(null);\n    this.times = [];\n  }\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const time of this.times) {\n      const name = time.name;\n      if (name.length > longest) {\n        longest = name.length;\n      }\n    }\n    for (const time of this.times) {\n      const duration = time.end - time.start;\n      outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).appendChild(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || !isString(input)) {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    if (!pdfDateStringRegex) {\n      pdfDateStringRegex = new RegExp(\n        \"^D:\" + // Prefix (required)\n          \"(\\\\d{4})\" + // Year (required)\n          \"(\\\\d{2})?\" + // Month (optional)\n          \"(\\\\d{2})?\" + // Day (optional)\n          \"(\\\\d{2})?\" + // Hour (optional)\n          \"(\\\\d{2})?\" + // Minute (optional)\n          \"(\\\\d{2})?\" + // Second (optional)\n          \"([Z|+|-])?\" + // Universal time relation (optional)\n          \"(\\\\d{2})?\" + // Offset hour (optional)\n          \"'?\" + // Splitting apostrophe (optional)\n          \"(\\\\d{2})?\" + // Offset minute (optional)\n          \"'?\" // Trailing apostrophe (optional)\n      );\n    }\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nexport {\n  addLinkAttributes,\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PageViewport,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  StatTimer,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n/**\n * Refer to the `WorkerTransport.getRenderingIntent`-method in the API, to see\n * how these flags are being used:\n *  - ANY, DISPLAY, and PRINT are the normal rendering intents, note the\n *    `PDFPageProxy.{render, getOperatorList, getAnnotations}`-methods.\n *  - ANNOTATIONS_FORMS, ANNOTATIONS_STORAGE, ANNOTATIONS_DISABLE control which\n *    annotations are rendered onto the canvas (i.e. by being included in the\n *    operatorList), note the `PDFPageProxy.{render, getOperatorList}`-methods\n *    and their `annotationMode`-option.\n *  - OPLIST is used with the `PDFPageProxy.getOperatorList`-method, note the\n *    `OperatorList`-constructor (on the worker-thread).\n */\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  OPLIST: 0x100,\n};\n\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3,\n};\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1STANDARD: \"TYPE1STANDARD\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  /** @deprecated unused */\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  signatures: \"signatures\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontBuildPath: \"errorFontBuildPath\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\",\n  errorContentSubStream: \"errorContentSubStream\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} [baseUrl] - An absolute URL.\n * @param {Object} [options]\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      // Let URLs beginning with \"www.\" default to using the \"http://\" protocol.\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        // Avoid accidentally matching a *relative* URL pointing to a file named\n        // e.g. \"www.pdf\" or similar.\n        if (dots && dots.length >= 2) {\n          url = `http://${url}`;\n        }\n      }\n\n      // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n      // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see bug 1122280.\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch (ex) {}\n      }\n    }\n\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message, name) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\n\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\n\nconst NullCharactersRegExp = /\\x00/g;\n\n/**\n * @param {string} str\n */\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array<any>|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array<Array<any>|Uint8Array|string>} arr - the array of the arrays\n *   (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  // replace \"(\", \")\", \"\\n\", \"\\r\" and \"\\\"\n  // by \"\\(\", \"\\)\", \"\\\\n\", \"\\\\r\" and \"\\\\\"\n  // in order to write it in a PDF file.\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(\n      String.fromCharCode((char >> 8) & 0xff),\n      String.fromCharCode(char & 0xff)\n    );\n  }\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise<any>} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nfunction createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n  if (URL.createObjectURL && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationMode,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  BaseException,\n  bytesToString,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  escapeString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isAscii,\n  isBool,\n  IsEvalSupportedCached,\n  IsLittleEndianCached,\n  isNum,\n  isSameOrigin,\n  isString,\n  MissingPDFException,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  StreamType,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF16BEString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for `globalThis` in legacy browsers.\n  // Support: Firefox<65, Chrome<71, Safari<12.1, Node.js<12.0.0\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkDOMMatrix() {\n    if (globalThis.DOMMatrix || !isNodeJS) {\n      return;\n    }\n    globalThis.DOMMatrix = require(\"dommatrix/dist/dommatrix.js\");\n  })();\n\n  // Provides support for Object.fromEntries in legacy browsers.\n  // Support: Firefox<63, Chrome<73, Safari<12.1, Node.js<12.0.0\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n    require(\"core-js/es/object/from-entries.js\");\n  })();\n\n  // Provides support for *recent* additions to the Promise specification,\n  // however basic Promise support is assumed to be available natively.\n  // Support: Firefox<71, Chrome<76, Safari<13, Node.js<12.9.0\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"CHROME\")) {\n      // Slightly reduce the size of the Chromium-extension, given\n      // that `ReadableStream` has been supported since Chrome 43.\n      return;\n    }\n    if (globalThis.ReadableStream || !isNodeJS) {\n      return;\n    }\n    globalThis.ReadableStream =\n      require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n}\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @private\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = false }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttribute(\"width\", `${width}px`);\n    svg.setAttribute(\"height\", `${height}px`);\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @private\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  AnnotationMode,\n  assert,\n  createPromiseCapability,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isSameOrigin,\n  MissingPDFException,\n  PasswordException,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n} from \"./node_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\n\nconst DefaultCanvasFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\nconst DefaultStandardFontDataFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeStandardFontDataFactory\n    : DOMStandardFontDataFactory;\n\n/**\n * @typedef {function} IPDFStreamFactory\n * @param {DocumentInitParameters} params - The document initialization\n *   parameters. The \"url\" key is always present.\n * @returns {Promise} A promise, which is resolved with an instance of\n *   {IPDFStream}.\n * @ignore\n */\n\n/**\n * @type IPDFStreamFactory\n * @private\n */\nlet createPDFNetworkStream;\n\n/**\n * Sets the function that instantiates an {IPDFStream} as an alternative PDF\n * data transport.\n *\n * @param {IPDFStreamFactory} pdfNetworkStreamFactory - The factory function\n *   that takes document initialization parameters (including a \"url\") and\n *   returns a promise which is resolved with an instance of {IPDFStream}.\n * @ignore\n */\nfunction setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n  createPDFNetworkStream = pdfNetworkStreamFactory;\n}\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string|URL} [url] - The URL of the PDF.\n * @property {TypedArray|Array<number>|string} [data] - Binary PDF data. Use\n *    typed arrays (Uint8Array) to improve the memory usage. If PDF data is\n *    BASE64-encoded, use `atob()` to convert it to a binary string first.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {TypedArray} [initialData] - A typed array with the first portion\n *   or all of the pdf data. Used by the extension since some data is already\n *   loaded before the switch to range requests.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string|URL|TypedArray|PDFDataRangeTransport|DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  const task = new PDFDocumentLoadingTask();\n\n  let source;\n  if (typeof src === \"string\" || src instanceof URL) {\n    source = { url: src };\n  } else if (isArrayBuffer(src)) {\n    source = { data: src };\n  } else if (src instanceof PDFDataRangeTransport) {\n    source = { range: src };\n  } else {\n    if (typeof src !== \"object\") {\n      throw new Error(\n        \"Invalid parameter in getDocument, \" +\n          \"need either string, URL, Uint8Array, or parameter object.\"\n      );\n    }\n    if (!src.url && !src.data && !src.range) {\n      throw new Error(\n        \"Invalid parameter object: need either .data, .range or .url\"\n      );\n    }\n    source = src;\n  }\n  const params = Object.create(null);\n  let rangeTransport = null,\n    worker = null;\n\n  for (const key in source) {\n    const value = source[key];\n\n    switch (key) {\n      case \"url\":\n        if (typeof window !== \"undefined\") {\n          try {\n            // The full path is required in the 'url' field.\n            params[key] = new URL(value, window.location).href;\n            continue;\n          } catch (ex) {\n            warn(`Cannot create valid URL: \"${ex}\".`);\n          }\n        } else if (typeof value === \"string\" || value instanceof URL) {\n          params[key] = value.toString(); // Support Node.js environments.\n          continue;\n        }\n        throw new Error(\n          \"Invalid PDF url data: \" +\n            \"either string or URL-object is expected in the url property.\"\n        );\n      case \"range\":\n        rangeTransport = value;\n        continue;\n      case \"worker\":\n        worker = value;\n        continue;\n      case \"data\":\n        // Converting string or array-like data to Uint8Array.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          isNodeJS &&\n          typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n          value instanceof Buffer // eslint-disable-line no-undef\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (value instanceof Uint8Array) {\n          break; // Use the data as-is when it's already a Uint8Array.\n        } else if (typeof value === \"string\") {\n          params[key] = stringToBytes(value);\n        } else if (\n          typeof value === \"object\" &&\n          value !== null &&\n          !isNaN(value.length)\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (isArrayBuffer(value)) {\n          params[key] = new Uint8Array(value);\n        } else {\n          throw new Error(\n            \"Invalid PDF binary data: either typed array, \" +\n              \"string, or array-like object is expected in the data property.\"\n          );\n        }\n        continue;\n    }\n    params[key] = value;\n  }\n\n  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n  params.CMapReaderFactory =\n    params.CMapReaderFactory || DefaultCMapReaderFactory;\n  params.StandardFontDataFactory =\n    params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  params.ignoreErrors = params.stopAtErrors !== true;\n  params.fontExtraProperties = params.fontExtraProperties === true;\n  params.pdfBug = params.pdfBug === true;\n  params.enableXfa = params.enableXfa === true;\n\n  if (\n    typeof params.docBaseUrl !== \"string\" ||\n    isDataScheme(params.docBaseUrl)\n  ) {\n    // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n    // URLs anyway. We want to avoid sending them to the worker-thread, since\n    // they contain the *entire* PDF document and can thus be arbitrarily long.\n    params.docBaseUrl = null;\n  }\n  if (!Number.isInteger(params.maxImageSize)) {\n    params.maxImageSize = -1;\n  }\n  if (typeof params.useWorkerFetch !== \"boolean\") {\n    params.useWorkerFetch =\n      params.CMapReaderFactory === DOMCMapReaderFactory &&\n      params.StandardFontDataFactory === DOMStandardFontDataFactory;\n  }\n  if (typeof params.isEvalSupported !== \"boolean\") {\n    params.isEvalSupported = true;\n  }\n  if (typeof params.disableFontFace !== \"boolean\") {\n    params.disableFontFace =\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS;\n  }\n  if (typeof params.useSystemFonts !== \"boolean\") {\n    params.useSystemFonts =\n      !(\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        isNodeJS\n      ) && !params.disableFontFace;\n  }\n  if (typeof params.ownerDocument === \"undefined\") {\n    params.ownerDocument = globalThis.document;\n  }\n\n  if (typeof params.disableRange !== \"boolean\") {\n    params.disableRange = false;\n  }\n  if (typeof params.disableStream !== \"boolean\") {\n    params.disableStream = false;\n  }\n  if (typeof params.disableAutoFetch !== \"boolean\") {\n    params.disableAutoFetch = false;\n  }\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(params.verbosity);\n\n  if (!worker) {\n    const workerParams = {\n      verbosity: params.verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n  const docId = task.docId;\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(\n        worker,\n        params,\n        rangeTransport,\n        docId\n      );\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length: params.length,\n              initialData: params.initialData,\n              progressiveDone: params.progressiveDone,\n              contentDispositionFilename: params.contentDispositionFilename,\n              disableRange: params.disableRange,\n              disableStream: params.disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          messageHandler.postMessageTransfers = worker.postMessageTransfers;\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            params\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @param {PDFDataRangeTransport} pdfDataRangeTransport\n * @param {string} docId - Unique document ID, used in `MessageHandler`.\n * @returns {Promise<string>} A promise that is resolved when the worker ID of\n *   the `MessageHandler` is known.\n * @private\n */\nasync function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n\n  if (pdfDataRangeTransport) {\n    source.length = pdfDataRangeTransport.length;\n    source.initialData = pdfDataRangeTransport.initialData;\n    source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    source.contentDispositionFilename =\n      pdfDataRangeTransport.contentDispositionFilename;\n  }\n  const workerId = await worker.messageHandler.sendWithPromise(\n    \"GetDocRequest\",\n    {\n      docId,\n      apiVersion:\n        typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n          ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n          : null,\n      // Only send the required properties, and *not* the entire object.\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length,\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      postMessageTransfers: worker.postMessageTransfers,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties,\n      enableXfa: source.enableXfa,\n      useSystemFonts: source.useSystemFonts,\n      cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n      standardFontDataUrl: source.useWorkerFetch\n        ? source.standardFontDataUrl\n        : null,\n    }\n  );\n\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  return workerId;\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nclass PDFDocumentLoadingTask {\n  static get idCounters() {\n    return shadow(this, \"idCounters\", { doc: 0 });\n  }\n\n  constructor() {\n    this._capability = createPromiseCapability();\n    this._transport = null;\n    this._worker = null;\n\n    /**\n     * Unique identifier for the document loading task.\n     * @type {string}\n     */\n    this.docId = `d${PDFDocumentLoadingTask.idCounters.doc++}`;\n\n    /**\n     * Whether the loading task is destroyed or not.\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * Callback to request a password if a wrong or no password was provided.\n     * The callback receives two parameters: a function that should be called\n     * with the new password, and a reason (see {@link PasswordResponses}).\n     * @type {function}\n     */\n    this.onPassword = null;\n\n    /**\n     * Callback to be able to monitor the loading progress of the PDF file\n     * (necessary to implement e.g. a loading bar).\n     * The callback receives an {@link OnProgressParameters} argument.\n     * @type {function}\n     */\n    this.onProgress = null;\n\n    /**\n     * Callback for when an unsupported feature is used in the PDF document.\n     * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\n     * @type {function}\n     */\n    this.onUnsupportedFeature = null;\n  }\n\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  async destroy() {\n    this.destroyed = true;\n    await this._transport?.destroy();\n\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\n\n/**\n * Abstract class to support range requests file loading.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = createPromiseCapability();\n  }\n\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      Object.defineProperty(this, \"fingerprint\", {\n        get() {\n          deprecated(\n            \"`PDFDocumentProxy.fingerprint`, \" +\n              \"please use `PDFDocumentProxy.fingerprints` instead.\"\n          );\n          return this.fingerprints[0];\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return !!this._transport._htmlForXfa;\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript() {\n    return this._transport.getJavaScript();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<TypedArray>} A promise that is resolved with a\n   *   {TypedArray} that has the raw data from the PDF.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * @typedef {Object} PDFDocumentStats\n   * @property {Object<string, boolean>} streamTypes - Used stream types in the\n   *   document (an item is set to true if specific stream ID was used in the\n   *   document).\n   * @property {Object<string, boolean>} fontTypes - Used font types in the\n   *   document (an item is set to true if specific font ID was used in the\n   *   document).\n   */\n\n  /**\n   * @returns {Promise<PDFDocumentStats>} A promise this is resolved with\n   *   current statistics about document structures (see\n   *   {@link PDFDocumentStats}).\n   */\n  getStats() {\n    return this._transport.getStats();\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      this._transport.annotationStorage.size <= 0\n    ) {\n      deprecated(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} normalizeWhitespace - Replaces all occurrences of\n *   whitespace with standard spaces (0x20). The default value is `false`.\n * @property {boolean} disableCombineTextItems - Do not attempt to combine\n *   same line {@link TextItem}'s. The default value is `false`.\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be 'display' (viewable annotations), 'print' (printable annotations),\n *   or 'any' (all annotations). The default value is 'display'.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {Object} canvasContext - A 2D context of a DOM Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are rendered\n *   onto the canvas, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {Object} [imageLayer] - An object that has `beginLayout`,\n *   `endLayout` and `appendImage` functions.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object | string} [background] - Background to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are included\n *   in the operatorList, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._ownerDocument = ownerDocument;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this.cleanupAfterRender = false;\n    this.pendingCleanup = false;\n    this._intentStates = new Map();\n    this._annotationPromises = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = \"display\" } = {}) {\n    const intentArgs = this._transport.getRenderingIntent(intent);\n\n    let promise = this._annotationPromises.get(intentArgs.cacheKey);\n    if (!promise) {\n      promise = this._transport.getAnnotations(\n        this._pageIndex,\n        intentArgs.renderingIntent\n      );\n      this._annotationPromises.set(intentArgs.cacheKey, promise);\n\n      if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n        promise = promise.then(annotations => {\n          for (const annotation of annotations) {\n            if (annotation.titleObj !== undefined) {\n              Object.defineProperty(annotation, \"title\", {\n                get() {\n                  deprecated(\n                    \"`title`-property on annotation, please use `titleObj` instead.\"\n                  );\n                  return annotation.titleObj.str;\n                },\n              });\n            }\n            if (annotation.contentsObj !== undefined) {\n              Object.defineProperty(annotation, \"contents\", {\n                get() {\n                  deprecated(\n                    \"`contents`-property on annotation, please use `contentsObj` instead.\"\n                  );\n                  return annotation.contentsObj.str;\n                },\n              });\n            }\n          }\n          return annotations;\n        });\n      }\n    }\n    return promise;\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return (this._jsActionsPromise ||= this._transport.getPageJSActions(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    transform = null,\n    imageLayer = null,\n    canvasFactory = null,\n    background = null,\n    optionalContentConfigPromise = null,\n  }) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n      if (arguments[0]?.renderInteractiveForms !== undefined) {\n        deprecated(\n          \"render no longer accepts the `renderInteractiveForms`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].renderInteractiveForms === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_FORMS;\n        }\n      }\n      if (arguments[0]?.includeAnnotationStorage !== undefined) {\n        deprecated(\n          \"render no longer accepts the `includeAnnotationStorage`-option, \" +\n            \"please use the `annotationMode`-option instead.\"\n        );\n        if (\n          arguments[0].includeAnnotationStorage === true &&\n          annotationMode === AnnotationMode.ENABLE\n        ) {\n          annotationMode = AnnotationMode.ENABLE_STORAGE;\n        }\n      }\n    }\n\n    if (this._stats) {\n      this._stats.time(\"Overall\");\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode\n    );\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render.\n    this.pendingCleanup = false;\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const canvasFactoryInstance =\n      canvasFactory ||\n      new DefaultCanvasFactory({ ownerDocument: this._ownerDocument });\n    const intentPrint = !!(\n      intentArgs.renderingIntent & RenderingIntentFlag.PRINT\n    );\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = createPromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup once rendering has finished (regardless of cleanupAfterRender).\n      if (this.cleanupAfterRender || intentPrint) {\n        this.pendingCleanup = true;\n      }\n      this._tryCleanup();\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error),\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n      if (this._stats) {\n        this._stats.timeEnd(\"Rendering\");\n        this._stats.timeEnd(\"Overall\");\n      }\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        imageLayer,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: canvasFactoryInstance,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n  } = {}) {\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      /* isOpList = */ true\n    );\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = createPromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    normalizeWhitespace = false,\n    disableCombineTextItems = false,\n    includeMarkedContent = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true,\n        includeMarkedContent: includeMarkedContent === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    if (this._transport._htmlForXfa) {\n      // TODO: We need to revisit this once the XFA foreground patch lands and\n      // only do this for non-foreground XFA.\n      return this.getXfa().then(xfa => {\n        return XfaText.textContent(xfa);\n      });\n    }\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return (this._structTreePromise ||= this._transport.getStructTree(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n    this._transport.pageCache[this._pageIndex] = null;\n\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intentState.opListReadCapability) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    this.pendingCleanup = false;\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.pendingCleanup = true;\n    return this._tryCleanup(resetStats);\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @private\n   */\n  _tryCleanup(resetStats = false) {\n    if (!this.pendingCleanup) {\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n\n    this._intentStates.clear();\n    this.objs.clear();\n    this._annotationPromises.clear();\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    if (resetStats && this._stats) {\n      this._stats = new StatTimer();\n    }\n    this.pendingCleanup = false;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, cacheKey) {\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    if (this._stats) {\n      this._stats.timeEnd(\"Page Request\");\n    }\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    if (intentState.displayReadyCapability) {\n      intentState.displayReadyCapability.resolve(transparency);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this._tryCleanup();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList({ renderingIntent, cacheKey }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        Number.isInteger(renderingIntent) && renderingIntent > 0,\n        '_pumpOperatorList: Expected valid \"renderingIntent\" argument.'\n      );\n    }\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage:\n          renderingIntent & RenderingIntentFlag.ANNOTATIONS_STORAGE\n            ? this._transport.annotationStorage.serializable\n            : null,\n      }\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        reason instanceof Error,\n        '_abortOperatorList: Expected valid \"reason\" argument.'\n      );\n    }\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          this._abortOperatorList({ intentState, reason, force: true });\n          intentState.streamReaderCancelTimeout = null;\n        }, RENDERING_CANCELLED_TIMEOUT);\n        return;\n      }\n    }\n    intentState.streamReader\n      .cancel(new AbortException(reason.message))\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  constructor() {\n    this._listeners = [];\n    this._deferred = Promise.resolve(undefined);\n  }\n\n  postMessage(obj, transfers) {\n    function cloneValue(value) {\n      // Trying to perform a structured clone close to the spec, including\n      // transfers.\n      if (\n        typeof value === \"function\" ||\n        typeof value === \"symbol\" ||\n        value instanceof URL\n      ) {\n        throw new Error(\n          `LoopbackPort.postMessage - cannot clone: ${value?.toString()}`\n        );\n      }\n\n      if (typeof value !== \"object\" || value === null) {\n        return value;\n      }\n      if (cloned.has(value)) {\n        // already cloned the object\n        return cloned.get(value);\n      }\n      let buffer, result;\n      if ((buffer = value.buffer) && isArrayBuffer(buffer)) {\n        // We found object with ArrayBuffer (typed array).\n        if (transfers?.includes(buffer)) {\n          result = new value.constructor(\n            buffer,\n            value.byteOffset,\n            value.byteLength\n          );\n        } else {\n          result = new value.constructor(value);\n        }\n        cloned.set(value, result);\n        return result;\n      }\n      if (value instanceof Map) {\n        result = new Map();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const [key, val] of value) {\n          result.set(key, cloneValue(val));\n        }\n        return result;\n      }\n      if (value instanceof Set) {\n        result = new Set();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const val of value) {\n          result.add(cloneValue(val));\n        }\n        return result;\n      }\n      result = Array.isArray(value) ? [] : Object.create(null);\n      cloned.set(value, result); // Adding to cache now for cyclic references.\n      // Cloning all value and object properties, however ignoring properties\n      // defined via getter.\n      for (const i in value) {\n        let desc,\n          p = value;\n        while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n          p = Object.getPrototypeOf(p);\n        }\n        if (typeof desc.value === \"undefined\") {\n          continue;\n        }\n        if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n          continue;\n        }\n        result[i] = cloneValue(desc.value);\n      }\n      return result;\n    }\n\n    const cloned = new WeakMap();\n    const event = { data: cloneValue(obj) };\n\n    this._deferred.then(() => {\n      for (const listener of this._listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this._listeners.push(listener);\n  }\n\n  removeEventListener(name, listener) {\n    const i = this._listeners.indexOf(listener);\n    this._listeners.splice(i, 1);\n  }\n\n  terminate() {\n    this._listeners.length = 0;\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Object} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level;\n *   the constants from {@link VerbosityLevel} should be used.\n */\n\nconst PDFWorkerUtil = {\n  isWorkerDisabled: false,\n  fallbackWorkerSrc: null,\n  fakeWorkerId: 0,\n};\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  // eslint-disable-next-line no-undef\n  if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n    // Workers aren't supported in Node.js, force-disabling them there.\n    PDFWorkerUtil.isWorkerDisabled = true;\n\n    PDFWorkerUtil.fallbackWorkerSrc = PDFJSDev.test(\"LIB\")\n      ? \"../pdf.worker.js\"\n      : \"./pdf.worker.js\";\n  } else if (typeof document === \"object\") {\n    const pdfjsFilePath = document?.currentScript?.src;\n    if (pdfjsFilePath) {\n      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(\n        /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n        \".worker$1$2\"\n      );\n    }\n  }\n\n  PDFWorkerUtil.createCDNWrapper = function (url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper]));\n  };\n}\n\n/**\n * PDF.js web worker abstraction that controls the instantiation of PDF\n * documents. Message handlers are used to pass information from the main\n * thread to the worker thread and vice versa. If the creation of a web\n * worker is not possible, a \"fake\" worker will be used instead.\n *\n * @param {PDFWorkerParameters} params - The worker initialization parameters.\n */\nclass PDFWorker {\n  static get _workerPorts() {\n    return shadow(this, \"_workerPorts\", new WeakMap());\n  }\n\n  constructor({\n    name = null,\n    port = null,\n    verbosity = getVerbosityLevel(),\n  } = {}) {\n    if (port && PDFWorker._workerPorts.has(port)) {\n      throw new Error(\"Cannot use more than one PDFWorker per port.\");\n    }\n\n    this.name = name;\n    this.destroyed = false;\n    this.postMessageTransfers = true;\n    this.verbosity = verbosity;\n\n    this._readyCapability = createPromiseCapability();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n\n    if (port) {\n      PDFWorker._workerPorts.set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._readyCapability.promise;\n  }\n\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port() {\n    return this._port;\n  }\n\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler() {\n    return this._messageHandler;\n  }\n\n  _initializeFromPort(port) {\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {\n      // Ignoring \"ready\" event -- MessageHandler should already be initialized\n      // and ready to accept messages.\n    });\n    this._readyCapability.resolve();\n  }\n\n  _initialize() {\n    // If worker support isn't disabled explicit and the browser has worker\n    // support, create a new web worker and test if it/the browser fulfills\n    // all requirements to run parts of pdf.js in a web worker.\n    // Right now, the requirement is, that an Uint8Array is still an\n    // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n    if (\n      typeof Worker !== \"undefined\" &&\n      !PDFWorkerUtil.isWorkerDisabled &&\n      !PDFWorker._mainThreadWorkerMessageHandler\n    ) {\n      let workerSrc = PDFWorker.workerSrc;\n\n      try {\n        // Wraps workerSrc path into blob URL, if the former does not belong\n        // to the same origin.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          !isSameOrigin(window.location.href, workerSrc)\n        ) {\n          workerSrc = PDFWorkerUtil.createCDNWrapper(\n            new URL(workerSrc, window.location).href\n          );\n        }\n\n        // Some versions of FF can't create a worker on localhost, see:\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=683280\n        const worker = new Worker(workerSrc);\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            // Fall back to fake worker if the termination is caused by an\n            // error (e.g. NetworkError / SecurityError).\n            this._setupFakeWorker();\n          }\n        };\n\n        const onWorkerError = () => {\n          if (!this._webWorker) {\n            // Worker failed to initialize due to an error. Clean up and fall\n            // back to the fake worker.\n            terminateEarly();\n          }\n        };\n        worker.addEventListener(\"error\", onWorkerError);\n\n        messageHandler.on(\"test\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          if (data) {\n            // supportTypedArray\n            this._messageHandler = messageHandler;\n            this._port = worker;\n            this._webWorker = worker;\n            if (!data.supportTransfers) {\n              this.postMessageTransfers = false;\n            }\n            this._readyCapability.resolve();\n            // Send global setting, e.g. verbosity level.\n            messageHandler.send(\"configure\", {\n              verbosity: this.verbosity,\n            });\n          } else {\n            this._setupFakeWorker();\n            messageHandler.destroy();\n            worker.terminate();\n          }\n        });\n\n        messageHandler.on(\"ready\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          try {\n            sendTest();\n          } catch (e) {\n            // We need fallback to a faked worker.\n            this._setupFakeWorker();\n          }\n        });\n\n        const sendTest = () => {\n          const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n          // Some versions of Opera throw a DATA_CLONE_ERR on serializing the\n          // typed array. Also, checking if we can use transfers.\n          try {\n            messageHandler.send(\"test\", testObj, [testObj.buffer]);\n          } catch (ex) {\n            warn(\"Cannot use postMessage transfers.\");\n            testObj[0] = 0;\n            messageHandler.send(\"test\", testObj);\n          }\n        };\n\n        // It might take time for the worker to initialize. We will try to send\n        // the \"test\" message immediately, and once the \"ready\" message arrives.\n        // The worker shall process only the first received \"test\" message.\n        sendTest();\n        return;\n      } catch (e) {\n        info(\"The worker has been disabled.\");\n      }\n    }\n    // Either workers are disabled, not supported or have thrown an exception.\n    // Thus, we fallback to a faked worker.\n    this._setupFakeWorker();\n  }\n\n  _setupFakeWorker() {\n    if (!PDFWorkerUtil.isWorkerDisabled) {\n      warn(\"Setting up fake worker.\");\n      PDFWorkerUtil.isWorkerDisabled = true;\n    }\n\n    PDFWorker._setupFakeWorkerGlobal\n      .then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n\n        // All fake workers use the same port, making id unique.\n        const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n\n        // If the main thread is our worker, setup the handling for the\n        // messages -- the main thread sends to it self.\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n\n        const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this._messageHandler = messageHandler;\n        this._readyCapability.resolve();\n        // Send global setting, e.g. verbosity level.\n        messageHandler.send(\"configure\", {\n          verbosity: this.verbosity,\n        });\n      })\n      .catch(reason => {\n        this._readyCapability.reject(\n          new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n        );\n      });\n  }\n\n  /**\n   * Destroys the worker instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    if (this._webWorker) {\n      // We need to terminate only web worker created resource.\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    PDFWorker._workerPorts.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n\n  /**\n   * @param {PDFWorkerParameters} params - The worker initialization parameters.\n   */\n  static fromPort(params) {\n    if (!params?.port) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    if (this._workerPorts.has(params.port)) {\n      return this._workerPorts.get(params.port);\n    }\n    return new PDFWorker(params);\n  }\n\n  /**\n   * The current `workerSrc`, when it exists.\n   * @type {string}\n   */\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return PDFWorkerUtil.fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  static get _mainThreadWorkerMessageHandler() {\n    try {\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n    } catch (ex) {\n      return null;\n    }\n  }\n\n  // Loads worker code into the main-thread.\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n        const worker = await import(\"pdfjs/core/worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(this.workerSrc);\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(this.workerSrc);\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n  PDFWorker.getWorkerSrc = function () {\n    deprecated(\n      \"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\"\n    );\n    return this.workerSrc;\n  };\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  constructor(messageHandler, loadingTask, networkStream, params) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      docId: loadingTask.docId,\n      onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    if (!params.useWorkerFetch) {\n      this.CMapReaderFactory = new params.CMapReaderFactory({\n        baseUrl: params.cMapUrl,\n        isCompressed: params.cMapPacked,\n      });\n      this.StandardFontDataFactory = new params.StandardFontDataFactory({\n        baseUrl: params.standardFontDataUrl,\n      });\n    }\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n\n    this.pageCache = [];\n    this.pagePromises = [];\n    this.downloadInfoCapability = createPromiseCapability();\n\n    this.setupMessageHandler();\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  getRenderingIntent(\n    intent,\n    annotationMode = AnnotationMode.ENABLE,\n    isOpList = false\n  ) {\n    let renderingIntent = RenderingIntentFlag.DISPLAY; // Default value.\n    let lastModified = \"\";\n\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n\n        lastModified = this.annotationStorage.lastModified;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n\n    return {\n      renderingIntent,\n      cacheKey: `${renderingIntent}_${lastModified}`,\n    };\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = createPromiseCapability();\n\n    if (this._passwordCapability) {\n      this._passwordCapability.reject(\n        new Error(\"Worker was destroyed during onPassword callback\")\n      );\n    }\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.pageCache) {\n      if (page) {\n        waitOn.push(page._destroy());\n      }\n    }\n    this.pageCache.length = 0;\n    this.pagePromises.length = 0;\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this._getFieldObjectsPromise = null;\n      this._hasJSActionsPromise = null;\n\n      if (this._networkStream) {\n        this._networkStream.cancelAllRequests(\n          new AbortException(\"Worker was terminated.\")\n        );\n      }\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = createPromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress && loadingTask.onProgress) {\n            loadingTask.onProgress(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            if (loadingTask.onProgress) {\n              loadingTask.onProgress({\n                loaded: evt.loaded,\n                total: evt.total,\n              });\n            }\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this._passwordCapability = createPromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          this._passwordCapability.resolve({\n            password,\n          });\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this._passwordCapability.reject(ex);\n        }\n      } else {\n        this._passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this._passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.length,\n          total: data.length,\n        });\n      }\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.pageCache[data.pageIndex];\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n\n    messageHandler.on(\"commonobj\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const [id, type, exportedData] = data;\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          let fontRegistry = null;\n          if (params.pdfBug && globalThis.FontInspector?.enabled) {\n            fontRegistry = {\n              registerFont(font, url) {\n                globalThis.FontInspector.fontAdded(font, url);\n              },\n            };\n          }\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n            fontRegistry,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", data => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return undefined;\n      }\n\n      const [id, pageIndex, type, imageData] = data;\n      const pageProxy = this.pageCache[pageIndex];\n      if (pageProxy.objs.has(id)) {\n        return undefined;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n          if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n            pageProxy.cleanupAfterRender = true;\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n      return undefined;\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.loaded,\n          total: data.total,\n        });\n      }\n    });\n\n    messageHandler.on(\n      \"UnsupportedFeature\",\n      this._onUnsupportedFeature.bind(this)\n    );\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.CMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.CMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.StandardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.StandardFontDataFactory.fetch(data);\n    });\n  }\n\n  _onUnsupportedFeature({ featureId }) {\n    if (this.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    if (this.loadingTask.onUnsupportedFeature) {\n      this.loadingTask.onUnsupportedFeature(featureId);\n    }\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request\"));\n    }\n\n    const pageIndex = pageNumber - 1;\n    if (pageIndex in this.pagePromises) {\n      return this.pagePromises[pageIndex];\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.ownerDocument,\n          this._params.pdfBug\n        );\n        this.pageCache[pageIndex] = page;\n        return page;\n      });\n    this.pagePromises[pageIndex] = promise;\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      ref,\n    });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  saveDocument() {\n    return this.messageHandler\n      .sendWithPromise(\"SaveDocument\", {\n        isPureXfa: !!this._htmlForXfa,\n        numPages: this._numPages,\n        annotationStorage: this.annotationStorage.serializable,\n        filename: this._fullReader?.filename ?? null,\n      })\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getFieldObjects() {\n    return (this._getFieldObjectsPromise ||=\n      this.messageHandler.sendWithPromise(\"GetFieldObjects\", null));\n  }\n\n  hasJSActions() {\n    return (this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\n      \"HasJSActions\",\n      null\n    ));\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getJavaScript() {\n    return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n  }\n\n  getDocJSActions() {\n    return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    return this.messageHandler\n      .sendWithPromise(\"GetMetadata\", null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      });\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  getStats() {\n    return this.messageHandler.sendWithPromise(\"GetStats\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n      const page = this.pageCache[i];\n      if (!page) {\n        continue;\n      }\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this._getFieldObjectsPromise = null;\n    this._hasJSActionsPromise = null;\n  }\n\n  get loadingParams() {\n    const params = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch: params.disableAutoFetch,\n      enableXfa: params.enableXfa,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n * @ignore\n */\nclass PDFObjects {\n  constructor() {\n    this._objs = Object.create(null);\n  }\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   * @private\n   */\n  _ensureObj(objId) {\n    if (this._objs[objId]) {\n      return this._objs[objId];\n    }\n    return (this._objs[objId] = {\n      capability: createPromiseCapability(),\n      data: null,\n      resolved: false,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      this._ensureObj(objId).capability.promise.then(callback);\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this._objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj || !obj.resolved) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  has(objId) {\n    const obj = this._objs[objId];\n    return obj?.resolved || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   */\n  resolve(objId, data) {\n    const obj = this._ensureObj(objId);\n\n    obj.resolved = true;\n    obj.data = data;\n    obj.capability.resolve(data);\n  }\n\n  clear() {\n    this._objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  constructor(internalRenderTask) {\n    this._internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   */\n  cancel() {\n    this._internalRenderTask.cancel();\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass InternalRenderTask {\n  static get canvasInUse() {\n    return shadow(this, \"canvasInUse\", new WeakSet());\n  }\n\n  constructor({\n    callback,\n    params,\n    objs,\n    commonObjs,\n    operatorList,\n    pageIndex,\n    canvasFactory,\n    useRequestAnimationFrame = false,\n    pdfBug = false,\n  }) {\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this._pdfBug = pdfBug;\n\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame =\n      useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = createPromiseCapability();\n    this.task = new RenderTask(this);\n    // caching this-bound methods\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n\n  get completed() {\n    return this.capability.promise.catch(function () {\n      // Ignoring errors, since we only want to know when rendering is\n      // no longer pending.\n    });\n  }\n\n  initializeGraphics({ transparency = false, optionalContentConfig }) {\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (InternalRenderTask.canvasInUse.has(this._canvas)) {\n        throw new Error(\n          \"Cannot use the same canvas during multiple render() operations. \" +\n            \"Use different canvas or ensure previous operations were \" +\n            \"cancelled or completed.\"\n        );\n      }\n      InternalRenderTask.canvasInUse.add(this._canvas);\n    }\n\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const { canvasContext, viewport, transform, imageLayer, background } =\n      this.params;\n\n    this.gfx = new CanvasGraphics(\n      canvasContext,\n      this.commonObjs,\n      this.objs,\n      this.canvasFactory,\n      imageLayer,\n      optionalContentConfig\n    );\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background,\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    if (this.graphicsReadyCallback) {\n      this.graphicsReadyCallback();\n    }\n  }\n\n  cancel(error = null) {\n    this.running = false;\n    this.cancelled = true;\n    if (this.gfx) {\n      this.gfx.endDrawing();\n    }\n    if (this._canvas) {\n      InternalRenderTask.canvasInUse.delete(this._canvas);\n    }\n    this.callback(\n      error ||\n        new RenderingCancelledException(\n          `Rendering cancelled, page ${this._pageIndex + 1}`,\n          \"canvas\"\n        )\n    );\n  }\n\n  operatorListChanged() {\n    if (!this.graphicsReady) {\n      if (!this.graphicsReadyCallback) {\n        this.graphicsReadyCallback = this._continueBound;\n      }\n      return;\n    }\n\n    if (this.stepper) {\n      this.stepper.updateOperatorList(this.operatorList);\n    }\n\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      window.requestAnimationFrame(() => {\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(\n      this.operatorList,\n      this.operatorListIdx,\n      this._continueBound,\n      this.stepper\n    );\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing();\n        if (this._canvas) {\n          InternalRenderTask.canvasInUse.delete(this._canvas);\n        }\n        this.callback();\n      }\n    }\n  }\n}\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentLoadingTask,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  RenderTask,\n  setPDFNetworkStreamFactory,\n  version,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  IsEvalSupportedCached,\n  shadow,\n  string32,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  warn,\n} from \"../shared/util.js\";\n\nclass BaseFontLoader {\n  constructor({\n    docId,\n    onUnsupportedFeature,\n    ownerDocument = globalThis.document,\n    // For testing only.\n    styleElement = null,\n  }) {\n    if (this.constructor === BaseFontLoader) {\n      unreachable(\"Cannot initialize BaseFontLoader.\");\n    }\n    this.docId = docId;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = [];\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ? styleElement\n        : null;\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.push(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    let styleElement = this.styleElement;\n    if (!styleElement) {\n      styleElement = this.styleElement = this._document.createElement(\"style\");\n      styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .appendChild(styleElement);\n    }\n    const styleSheet = styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.length = 0;\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || font.missingFile) {\n      return;\n    }\n    font.attached = true;\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          this._onUnsupportedFeature({\n            featureId: UNSUPPORTED_FEATURES.errorFontLoadNative,\n          });\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent([rule], [font], request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  _queueLoadingCallback(callback) {\n    unreachable(\"Abstract method `_queueLoadingCallback`.\");\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  // eslint-disable-next-line getter-return\n  get isSyncFontLoadingSupported() {\n    unreachable(\"Abstract method `isSyncFontLoadingSupported`.\");\n  }\n\n  // eslint-disable-next-line getter-return\n  get _loadTestFont() {\n    unreachable(\"Abstract method `_loadTestFont`.\");\n  }\n\n  _prepareFontLoadEvent(rules, fontsToLoad, request) {\n    unreachable(\"Abstract method `_prepareFontLoadEvent`.\");\n  }\n}\n\nlet FontLoader;\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  FontLoader = class MozcentralFontLoader extends BaseFontLoader {\n    get isSyncFontLoadingSupported() {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n  };\n} else {\n  // PDFJSDev.test('CHROME || GENERIC')\n\n  FontLoader = class GenericFontLoader extends BaseFontLoader {\n    constructor(params) {\n      super(params);\n      this.loadingContext = {\n        requests: [],\n        nextRequestId: 0,\n      };\n      this.loadTestFontId = 0;\n    }\n\n    get isSyncFontLoadingSupported() {\n      let supported = false;\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n        if (typeof navigator === \"undefined\") {\n          // Node.js - we can pretend that sync font loading is supported.\n          supported = true;\n        } else {\n          // User agent string sniffing is bad, but there is no reliable way to\n          // tell if the font is fully loaded and ready to be used with canvas.\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(\n            navigator.userAgent\n          );\n          if (m?.[1] >= 14) {\n            supported = true;\n          }\n          // TODO - other browsers...\n        }\n      }\n      return shadow(this, \"isSyncFontLoadingSupported\", supported);\n    }\n\n    _queueLoadingCallback(callback) {\n      function completeRequest() {\n        assert(!request.done, \"completeRequest() cannot be called twice.\");\n        request.done = true;\n\n        // Sending all completed requests in order of how they were queued.\n        while (context.requests.length > 0 && context.requests[0].done) {\n          const otherRequest = context.requests.shift();\n          setTimeout(otherRequest.callback, 0);\n        }\n      }\n\n      const context = this.loadingContext;\n      const request = {\n        id: `pdfjs-font-loading-${context.nextRequestId++}`,\n        done: false,\n        complete: completeRequest,\n        callback,\n      };\n      context.requests.push(request);\n      return request;\n    }\n\n    get _loadTestFont() {\n      const getLoadTestFont = function () {\n        // This is a CFF font with 1 glyph for '.' that fills its entire width\n        // and height.\n        return atob(\n          \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n            \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n            \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n            \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n            \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n            \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n            \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n            \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n            \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n            \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n            \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n            \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n            \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n            \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n            \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n            \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n            \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n        );\n      };\n      return shadow(this, \"_loadTestFont\", getLoadTestFont());\n    }\n\n    _prepareFontLoadEvent(rules, fonts, request) {\n      /** Hack begin */\n      // There's currently no event when a font has finished downloading so the\n      // following code is a dirty hack to 'guess' when a font is ready.\n      // It's assumed fonts are loaded in order, so add a known test font after\n      // the desired fonts and then test for the loading of that test font.\n\n      function int32(data, offset) {\n        return (\n          (data.charCodeAt(offset) << 24) |\n          (data.charCodeAt(offset + 1) << 16) |\n          (data.charCodeAt(offset + 2) << 8) |\n          (data.charCodeAt(offset + 3) & 0xff)\n        );\n      }\n      function spliceString(s, offset, remove, insert) {\n        const chunk1 = s.substring(0, offset);\n        const chunk2 = s.substring(offset + remove);\n        return chunk1 + insert + chunk2;\n      }\n      let i, ii;\n\n      // The temporary canvas is used to determine if fonts are loaded.\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n\n      let called = 0;\n      function isFontReady(name, callback) {\n        called++;\n        // With setTimeout clamping this gives the font ~100ms to load.\n        if (called > 30) {\n          warn(\"Load test font never loaded.\");\n          callback();\n          return;\n        }\n        ctx.font = \"30px \" + name;\n        ctx.fillText(\".\", 0, 20);\n        const imageData = ctx.getImageData(0, 0, 1, 1);\n        if (imageData.data[3] > 0) {\n          callback();\n          return;\n        }\n        setTimeout(isFontReady.bind(null, name, callback));\n      }\n\n      const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n      // Chromium seems to cache fonts based on a hash of the actual font data,\n      // so the font must be modified for each load test else it will appear to\n      // be loaded already.\n      // TODO: This could maybe be made faster by avoiding the btoa of the full\n      // font by splitting it in chunks before hand and padding the font id.\n      let data = this._loadTestFont;\n      const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n      data = spliceString(\n        data,\n        COMMENT_OFFSET,\n        loadTestFontId.length,\n        loadTestFontId\n      );\n      // CFF checksum is important for IE, adjusting it\n      const CFF_CHECKSUM_OFFSET = 16;\n      const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n      let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n      for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n        checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n      }\n      if (i < loadTestFontId.length) {\n        // align to 4 bytes boundary\n        checksum =\n          (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n      }\n      data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n      const url = `url(data:font/opentype;base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n      this.insertRule(rule);\n\n      const names = [];\n      for (const font of fonts) {\n        names.push(font.loadedName);\n      }\n      names.push(loadTestFontId);\n\n      const div = this._document.createElement(\"div\");\n      div.style.visibility = \"hidden\";\n      div.style.width = div.style.height = \"10px\";\n      div.style.position = \"absolute\";\n      div.style.top = div.style.left = \"0px\";\n\n      for (const name of names) {\n        const span = this._document.createElement(\"span\");\n        span.textContent = \"Hi\";\n        span.style.fontFamily = name;\n        div.appendChild(span);\n      }\n      this._document.body.appendChild(div);\n\n      isFontReady(loadTestFontId, () => {\n        this._document.body.removeChild(div);\n        request.complete();\n      });\n      /** Hack end */\n    }\n  };\n} // End of PDFJSDev.test('CHROME || GENERIC')\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature,\n      fontRegistry = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this.fontRegistry = fontRegistry;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this);\n    }\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this, url);\n    }\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      this._onUnsupportedFeature({\n        featureId: UNSUPPORTED_FEATURES.errorFontGetPath,\n      });\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && IsEvalSupportedCached.value) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { unreachable } from \"../shared/util.js\";\n\nlet NodeCanvasFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCanvasFactory\");\n  }\n};\n\nlet NodeCMapReaderFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCMapReaderFactory\");\n  }\n};\n\nlet NodeStandardFontDataFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeStandardFontDataFactory\");\n  }\n};\n\nif ((typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS) {\n  const fetchData = function (url) {\n    return new Promise((resolve, reject) => {\n      const fs = __non_webpack_require__(\"fs\");\n      fs.readFile(url, (error, data) => {\n        if (error || !data) {\n          reject(new Error(error));\n          return;\n        }\n        resolve(new Uint8Array(data));\n      });\n    });\n  };\n\n  NodeCanvasFactory = class extends BaseCanvasFactory {\n    _createCanvas(width, height) {\n      const Canvas = __non_webpack_require__(\"canvas\");\n      return Canvas.createCanvas(width, height);\n    }\n  };\n\n  NodeCMapReaderFactory = class extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return fetchData(url).then(data => {\n        return { cMapData: data, compressionType };\n      });\n    }\n  };\n\n  NodeStandardFontDataFactory = class extends BaseStandardFontDataFactory {\n    _fetchData(url) {\n      return fetchData(url);\n    }\n  };\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n};\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  constructor() {\n    this._storage = new Map();\n    this._timeStamp = Date.now();\n    this._modified = false;\n\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const value = this._storage.get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n\n    return Object.assign(defaultValue, value);\n  }\n\n  /**\n   * Set the value for a given key\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this._storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      this._storage.set(key, value);\n    }\n    if (modified) {\n      this._timeStamp = Date.now();\n      this._setModified();\n    }\n  }\n\n  getAll() {\n    return this._storage.size > 0 ? objectFromMap(this._storage) : null;\n  }\n\n  get size() {\n    return this._storage.size;\n  }\n\n  /**\n   * @private\n   */\n  _setModified() {\n    if (!this._modified) {\n      this._modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this._modified) {\n      this._modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this._storage.size > 0 ? this._storage : null;\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get lastModified() {\n    return this._timeStamp.toString();\n  }\n}\n\nexport { AnnotationStorage };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  IsLittleEndianCached,\n  isNum,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { getShadingPattern, TilingPattern } from \"./pattern_helper.js\";\nimport { PixelsPerInch } from \"./display_utils.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\n// This value comes from sampling a few PDFs that re-use patterns, there doesn't\n// seem to be any that benefit from caching more than 2 patterns.\nconst MAX_CACHED_CANVAS_PATTERNS = 2;\n\n// Defines the time the `executeOperatorList`-method is going to be executing\n// before it stops and shedules a continue of execution.\nconst EXECUTION_TIME = 15; // ms\n// Defines the number of steps before checking the execution time.\nconst EXECUTION_STEPS = 10;\n\nconst COMPILE_TYPE3_GLYPHS = true;\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n// Because of https://bugs.chromium.org/p/chromium/issues/detail?id=1170396\n// some curves aren't rendered correctly.\n// Multiplying lineWidth by this factor should help to have \"correct\"\n// rendering with no artifacts.\n// Once the bug is fixed upstream, we can remove this constant and its use.\nconst LINEWIDTH_SCALE_FACTOR = 1.000001;\n\nfunction addContextCurrentTransform(ctx) {\n  // If the context doesn't expose a `mozCurrentTransform`, add a JS based one.\n  if (ctx.mozCurrentTransform) {\n    return;\n  }\n  ctx._originalSave = ctx.save;\n  ctx._originalRestore = ctx.restore;\n  ctx._originalRotate = ctx.rotate;\n  ctx._originalScale = ctx.scale;\n  ctx._originalTranslate = ctx.translate;\n  ctx._originalTransform = ctx.transform;\n  ctx._originalSetTransform = ctx.setTransform;\n  ctx._originalResetTransform = ctx.resetTransform;\n\n  ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n  ctx._transformStack = [];\n\n  try {\n    // The call to getOwnPropertyDescriptor throws an exception in Node.js:\n    // \"TypeError: Method lineWidth called on incompatible receiver\n    //  #<CanvasRenderingContext2D>\".\n    const desc = Object.getOwnPropertyDescriptor(\n      Object.getPrototypeOf(ctx),\n      \"lineWidth\"\n    );\n\n    ctx._setLineWidth = desc.set;\n    ctx._getLineWidth = desc.get;\n\n    Object.defineProperty(ctx, \"lineWidth\", {\n      set: function setLineWidth(width) {\n        this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n      },\n      get: function getLineWidth() {\n        return this._getLineWidth();\n      },\n    });\n  } catch (_) {}\n\n  Object.defineProperty(ctx, \"mozCurrentTransform\", {\n    get: function getCurrentTransform() {\n      return this._transformMatrix;\n    },\n  });\n\n  Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n    get: function getCurrentTransformInverse() {\n      // Calculation done using WolframAlpha:\n      // http://www.wolframalpha.com/input/?\n      //   i=Inverse+{{a%2C+c%2C+e}%2C+{b%2C+d%2C+f}%2C+{0%2C+0%2C+1}}\n\n      const [a, b, c, d, e, f] = this._transformMatrix;\n      const ad_bc = a * d - b * c;\n      const bc_ad = b * c - a * d;\n\n      return [\n        d / ad_bc,\n        b / bc_ad,\n        c / bc_ad,\n        a / ad_bc,\n        (d * e - c * f) / bc_ad,\n        (b * e - a * f) / ad_bc,\n      ];\n    },\n  });\n\n  ctx.save = function ctxSave() {\n    const old = this._transformMatrix;\n    this._transformStack.push(old);\n    this._transformMatrix = old.slice(0, 6);\n\n    this._originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    const prev = this._transformStack.pop();\n    if (prev) {\n      this._transformMatrix = prev;\n      this._originalRestore();\n    }\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    const m = this._transformMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n\n    this._originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    const m = this._transformMatrix;\n    m[0] *= x;\n    m[1] *= x;\n    m[2] *= y;\n    m[3] *= y;\n\n    this._originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * a + m[2] * b,\n      m[1] * a + m[3] * b,\n      m[0] * c + m[2] * d,\n      m[1] * c + m[3] * d,\n      m[0] * e + m[2] * f + m[4],\n      m[1] * e + m[3] * f + m[5],\n    ];\n\n    ctx._originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    this._transformMatrix = [a, b, c, d, e, f];\n\n    ctx._originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n    ctx._originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    const cosValue = Math.cos(angle);\n    const sinValue = Math.sin(angle);\n\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * cosValue + m[2] * sinValue,\n      m[1] * cosValue + m[3] * sinValue,\n      m[0] * -sinValue + m[2] * cosValue,\n      m[1] * -sinValue + m[3] * cosValue,\n      m[4],\n      m[5],\n    ];\n\n    this._originalRotate(angle);\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height, trackTransform) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n      // reset canvas transform for emulated mozCurrentTransform, if needed\n      canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    if (trackTransform) {\n      addContextCurrentTransform(canvasEntry.context);\n    }\n    return canvasEntry;\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\n/**\n * Least recently used cache implemented with a JS Map. JS Map keys are ordered\n * by last insertion.\n */\nclass LRUCache {\n  constructor(maxSize = 0) {\n    this._cache = new Map();\n    this._maxSize = maxSize;\n  }\n\n  has(key) {\n    return this._cache.has(key);\n  }\n\n  get(key) {\n    if (this._cache.has(key)) {\n      // Delete and set the value so it's moved to the end of the map iteration.\n      const value = this._cache.get(key);\n      this._cache.delete(key);\n      this._cache.set(key, value);\n    }\n    return this._cache.get(key);\n  }\n\n  set(key, value) {\n    if (this._maxSize <= 0) {\n      return;\n    }\n    if (this._cache.size + 1 > this._maxSize) {\n      // Delete the least recently used.\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  clear() {\n    this._cache.clear();\n  }\n}\n\nfunction compileType3Glyph(imgData) {\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width = imgData.width,\n    height = imgData.height,\n    width1 = width + 1;\n  let i, ii, j, j0;\n  const points = new Uint8Array(width1 * (height + 1));\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7,\n    data0 = imgData.data;\n  const data = new Uint8Array(lineSize * height);\n  let pos = 0;\n  for (i = 0, ii = data0.length; i < ii; i++) {\n    const elem = data0[i];\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const outlines = [];\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    const coords = [p % width1, i];\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n\n      coords.push(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    outlines.push(coords);\n    --i;\n  }\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.beginPath();\n    for (let k = 0, kk = outlines.length; k < kk; k++) {\n      const o = outlines[k];\n      c.moveTo(o[0], o[1]);\n      for (let l = 2, ll = o.length; l < ll; l += 2) {\n        c.lineTo(o[l], o[l + 1]);\n      }\n    }\n    c.fill();\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor() {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.resumeSMaskCtx = null; // nonclonable field (see the save method below)\n    this.transferMaps = null;\n  }\n\n  clone() {\n    return Object.create(this);\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nfunction putBinaryImageData(ctx, imgData, transferMaps = null) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n\n  // Put the image data to the canvas in chunks, rather than putting the\n  // whole image at once.  This saves JS memory, because the ImageData object\n  // is smaller. It also possibly saves C++ memory within the implementation\n  // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n  // the data passed to putImageData()). |n| shouldn't be too small, however,\n  // because too many putImageData() calls will slow things down.\n  //\n  // Note: as written, if the last chunk is partial, the putImageData() call\n  // will (conceptually) put pixels past the bounds of the canvas.  But\n  // that's ok; any such pixels are ignored.\n\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n\n  let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n  if (transferMaps) {\n    switch (transferMaps.length) {\n      case 1:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[0];\n        transferMapBlue = transferMaps[0];\n        transferMapGray = transferMaps[0];\n        break;\n      case 4:\n        transferMapRed = transferMaps[0];\n        transferMapGreen = transferMaps[1];\n        transferMapBlue = transferMaps[2];\n        transferMapGray = transferMaps[3];\n        break;\n    }\n  }\n\n  // There are multiple forms in which the pixel data can be passed, and\n  // imgData.kind tells us which one this is.\n  if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n    // Grayscale, 1 bit per pixel (i.e. black-and-white).\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = (width + 7) >> 3;\n    let white = 0xffffffff;\n    let black = IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n    if (transferMapGray) {\n      if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n        [white, black] = [black, white];\n      }\n    }\n\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      // We ran out of input. Make all remaining pixels transparent.\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n    // RGBA, 32-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < elemsInThisChunk; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === ImageKind.RGB_24BPP) {\n    // RGB, 24-bits per pixel.\n    const hasTransferMaps = !!(\n      transferMapRed ||\n      transferMapGreen ||\n      transferMapBlue\n    );\n\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n\n      destPos = 0;\n      for (j = elemsInThisChunk; j--; ) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n\n      if (hasTransferMaps) {\n        for (let k = 0; k < destPos; k += 4) {\n          if (transferMapRed) {\n            dest[k + 0] = transferMapRed[dest[k + 0]];\n          }\n          if (transferMapGreen) {\n            dest[k + 1] = transferMapGreen[dest[k + 1]];\n          }\n          if (transferMapBlue) {\n            dest[k + 2] = transferMapBlue[dest[k + 2]];\n          }\n        }\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\n\nfunction putBinaryImageMask(ctx, imgData) {\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight =\n      i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n    // Expand the mask so it can be used by the canvas.  Any required\n    // inversion has already been handled.\n    let destPos = 3; // alpha component offset\n    for (let j = 0; j < thisChunkHeight; j++) {\n      let elem,\n        mask = 0;\n      for (let k = 0; k < width; k++) {\n        if (!mask) {\n          elem = src[srcPos++];\n          mask = 128;\n        }\n        dest[destPos] = elem & mask ? 0 : 255;\n        destPos += 4;\n        mask >>= 1;\n      }\n    }\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\n\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\n    \"strokeStyle\",\n    \"fillStyle\",\n    \"fillRule\",\n    \"globalAlpha\",\n    \"lineWidth\",\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\",\n    \"globalCompositeOperation\",\n    \"font\",\n  ];\n  for (let i = 0, ii = properties.length; i < ii; i++) {\n    const property = properties[i];\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\n\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = \"#000000\";\n  ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n}\n\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\n  const length = bytes.length;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = bytes[i];\n    if (alpha === 0) {\n      bytes[i - 3] = r0;\n      bytes[i - 2] = g0;\n      bytes[i - 1] = b0;\n    } else if (alpha < 255) {\n      const alpha_ = 255 - alpha;\n      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n    }\n  }\n}\n\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  const scale = 1 / 255;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n    layerData[i] = (layerData[i] * alpha * scale) | 0;\n  }\n}\n\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  for (let i = 3; i < length; i += 4) {\n    const y =\n      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n      maskData[i - 2] * 152 + // * 0.59 ....\n      maskData[i - 1] * 28; // * 0.11 ....\n    layerData[i] = transferMap\n      ? (layerData[i] * transferMap[y >> 8]) >> 8\n      : (layerData[i] * y) >> 16;\n  }\n}\n\nfunction genericComposeSMask(\n  maskCtx,\n  layerCtx,\n  width,\n  height,\n  subtype,\n  backdrop,\n  transferMap\n) {\n  const hasBackdrop = !!backdrop;\n  const r0 = hasBackdrop ? backdrop[0] : 0;\n  const g0 = hasBackdrop ? backdrop[1] : 0;\n  const b0 = hasBackdrop ? backdrop[2] : 0;\n\n  let composeFn;\n  if (subtype === \"Luminosity\") {\n    composeFn = composeSMaskLuminosity;\n  } else {\n    composeFn = composeSMaskAlpha;\n  }\n\n  // processing image in chunks to save memory\n  const PIXELS_TO_PROCESS = 1048576;\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n  for (let row = 0; row < height; row += chunkSize) {\n    const chunkHeight = Math.min(chunkSize, height - row);\n    const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n    const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n    if (hasBackdrop) {\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\n    }\n    composeFn(maskData.data, layerData.data, transferMap);\n\n    maskCtx.putImageData(layerData, 0, row);\n  }\n}\n\nfunction composeSMask(ctx, smask, layerCtx) {\n  const mask = smask.canvas;\n  const maskCtx = smask.context;\n\n  ctx.setTransform(\n    smask.scaleX,\n    0,\n    0,\n    smask.scaleY,\n    smask.offsetX,\n    smask.offsetY\n  );\n\n  genericComposeSMask(\n    maskCtx,\n    layerCtx,\n    mask.width,\n    mask.height,\n    smask.subtype,\n    smask.backdrop,\n    smask.transferMap\n  );\n  ctx.drawImage(mask, 0, 0);\n}\n\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  const scale = Util.singularValueDecompose2dScale(transform);\n  // Round to a 32bit float so that `<=` check below will pass for numbers that\n  // are very close, but not exactly the same 64bit floats.\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround(\n    (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS\n  );\n  if (interpolate !== undefined) {\n    // If the value is explicitly set use it.\n    return interpolate;\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n    // Smooth when downscaling.\n    return true;\n  }\n  // Don't smooth when upscaling.\n  return false;\n}\n\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\n\nclass CanvasGraphics {\n  constructor(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    imageLayer,\n    optionalContentConfig\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState();\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.imageLayer = imageLayer;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see\n    // PDF spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.contentVisible = true;\n    this.markedContentStack = [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedCanvasPatterns = new LRUCache(MAX_CACHED_CANVAS_PATTERNS);\n    this.cachedPatterns = new Map();\n    if (canvasCtx) {\n      // NOTE: if mozCurrentTransform is polyfilled, then the current state of\n      // the transformation must already be set in canvasCtx._transformMatrix.\n      addContextCurrentTransform(canvasCtx);\n    }\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  beginDrawing({\n    transform,\n    viewport,\n    transparency = false,\n    background = null,\n  }) {\n    // For pdfs that use blend modes we have to clear the canvas else certain\n    // blend modes can look wrong since we'd be blending with a white\n    // backdrop. The problem with a transparent backdrop though is we then\n    // don't get sub pixel anti aliasing on text, creating temporary\n    // transparent canvas when we have blend modes.\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n\n    this.ctx.save();\n    this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.restore();\n\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\n        \"transparent\",\n        width,\n        height,\n        true\n      );\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      // The transform can be applied before rendering, transferring it to\n      // the new canvas.\n      this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n    }\n\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform.apply(this.ctx, transform);\n    }\n    this.ctx.transform.apply(this.ctx, viewport.transform);\n\n    this.baseTransform = this.ctx.mozCurrentTransform.slice();\n    this._combinedScaleFactor = Math.hypot(\n      this.baseTransform[0],\n      this.baseTransform[2]\n    );\n\n    if (this.imageLayer) {\n      this.imageLayer.beginLayout();\n    }\n  }\n\n  executeOperatorList(\n    operatorList,\n    executionStartIdx,\n    continueCallback,\n    stepper\n  ) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n\n    // Sometimes the OperatorList to execute is empty.\n    if (argsArrayLen === i) {\n      return i;\n    }\n\n    const chunkOperations =\n      argsArrayLen - i > EXECUTION_STEPS &&\n      typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n\n      fnId = fnArray[i];\n\n      if (fnId !== OPS.dependency) {\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n          // If the promise isn't resolved yet, add the continueCallback\n          // to the promise and bail out.\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n\n      i++;\n\n      // If the entire operatorList was executed, stop as were done.\n      if (i === argsArrayLen) {\n        return i;\n      }\n\n      // If the execution took longer then a certain amount of time and\n      // `continueCallback` is specified, interrupt the execution.\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n\n      // If the operatorList isn't executed completely yet OR the execution\n      // time was short enough, do another execution round.\n    }\n  }\n\n  endDrawing() {\n    // Finishing all opened operations such as SMask group painting.\n    while (this.stateStack.length || this.current.activeSMask !== null) {\n      this.restore();\n    }\n\n    this.ctx.restore();\n\n    if (this.transparentCanvas) {\n      this.ctx = this.compositeCtx;\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\n      this.ctx.restore();\n      this.transparentCanvas = null;\n    }\n\n    this.cachedCanvases.clear();\n    this.cachedCanvasPatterns.clear();\n    this.cachedPatterns.clear();\n\n    if (this.imageLayer) {\n      this.imageLayer.endLayout();\n    }\n  }\n\n  _scaleImage(img, inverseTransform) {\n    // Vertical or horizontal scaling shall not be more than 2 to not lose the\n    // pixels during drawImage operation, painting on the temporary canvas(es)\n    // that are twice smaller in size.\n    const width = img.width;\n    const height = img.height;\n    let widthScale = Math.max(\n      Math.hypot(inverseTransform[0], inverseTransform[1]),\n      1\n    );\n    let heightScale = Math.max(\n      Math.hypot(inverseTransform[2], inverseTransform[3]),\n      1\n    );\n\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (\n      (widthScale > 2 && paintWidth > 1) ||\n      (heightScale > 2 && paintHeight > 1)\n    ) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        newWidth = Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        newHeight = Math.ceil(paintHeight / 2);\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(\n        tmpCanvasId,\n        newWidth,\n        newHeight\n      );\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(\n        img,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight,\n    };\n  }\n\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const maskCanvas = this.cachedCanvases.getCanvas(\n      \"maskCanvas\",\n      width,\n      height\n    );\n    const maskCtx = maskCanvas.context;\n    putBinaryImageMask(maskCtx, img);\n\n    // Create the mask canvas at the size it will be drawn at and also set\n    // its transform to match the current transform so if there are any\n    // patterns applied they will be applied relative to the correct\n    // transform.\n    const objToCanvas = ctx.mozCurrentTransform;\n    let maskToCanvas = Util.transform(objToCanvas, [\n      1 / width,\n      0,\n      0,\n      -1 / height,\n      0,\n      0,\n    ]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n    const cord2 = Util.applyTransform([width, height], maskToCanvas);\n    const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n    const drawnWidth = Math.ceil(rect[2] - rect[0]);\n    const drawnHeight = Math.ceil(rect[3] - rect[1]);\n    const fillCanvas = this.cachedCanvases.getCanvas(\n      \"fillCanvas\",\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const fillCtx = fillCanvas.context;\n    // The offset will be the top-left cordinate mask.\n    const offsetX = Math.min(cord1[0], cord2[0]);\n    const offsetY = Math.min(cord1[1], cord2[1]);\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform.apply(fillCtx, maskToCanvas);\n    // Pre-scale if needed to improve image smoothing.\n    const scaled = this._scaleImage(\n      maskCanvas.canvas,\n      fillCtx.mozCurrentTransformInverse\n    );\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      fillCtx.mozCurrentTransform,\n      img.interpolate\n    );\n    fillCtx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.img.width,\n      scaled.img.height,\n      0,\n      0,\n      width,\n      height\n    );\n    fillCtx.globalCompositeOperation = \"source-in\";\n\n    const inverse = Util.transform(fillCtx.mozCurrentTransformInverse, [\n      1,\n      0,\n      0,\n      1,\n      -offsetX,\n      -offsetY,\n    ]);\n    fillCtx.fillStyle = isPatternFill\n      ? fillColor.getPattern(ctx, this, inverse, false)\n      : fillColor;\n\n    fillCtx.fillRect(0, 0, width, height);\n\n    // Round the offsets to avoid drawing fractional pixels.\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY),\n    };\n  }\n\n  // Graphics state\n  setLineWidth(width) {\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (let i = 0, ii = states.length; i < ii; i++) {\n      const state = states[i];\n      const key = state[0];\n      const value = state[1];\n\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = state[1];\n          break;\n        case \"ca\":\n          this.current.fillAlpha = state[1];\n          this.ctx.globalAlpha = state[1];\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          if (this.current.activeSMask) {\n            // If SMask is currrenly used, it needs to be suspended or\n            // finished. Suspend only makes sense when at least one save()\n            // was performed and state needs to be reverted on restore().\n            if (\n              this.stateStack.length > 0 &&\n              this.stateStack[this.stateStack.length - 1].activeSMask ===\n                this.current.activeSMask\n            ) {\n              this.suspendSMaskGroup();\n            } else {\n              this.endSMaskGroup();\n            }\n          }\n          this.current.activeSMask = value ? this.tempSMask : null;\n          if (this.current.activeSMask) {\n            this.beginSMaskGroup();\n          }\n          this.tempSMask = null;\n          break;\n        case \"TR\":\n          this.current.transferMaps = value;\n      }\n    }\n  }\n\n  beginSMaskGroup() {\n    const activeSMask = this.current.activeSMask;\n    const drawnWidth = activeSMask.canvas.width;\n    const drawnHeight = activeSMask.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n\n    const currentCtx = this.ctx;\n    const currentTransform = currentCtx.mozCurrentTransform;\n    this.ctx.save();\n\n    const groupCtx = scratchCanvas.context;\n    groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n    groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n    groupCtx.transform.apply(groupCtx, currentTransform);\n\n    activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n\n  suspendSMaskGroup() {\n    // Similar to endSMaskGroup, the intermediate canvas has to be composed\n    // and future ctx state restored.\n    const groupCtx = this.ctx;\n    this.groupLevel--;\n    this.ctx = this.groupStack.pop();\n\n    composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n    this.ctx.restore();\n    this.ctx.save(); // save is needed since SMask will be resumed.\n    copyCtxState(groupCtx, this.ctx);\n\n    // Saving state for resuming.\n    this.current.resumeSMaskCtx = groupCtx;\n    // Transform was changed in the SMask canvas, reflecting this change on\n    // this.ctx.\n    const deltaTransform = Util.transform(\n      this.current.activeSMask.startTransformInverse,\n      groupCtx.mozCurrentTransform\n    );\n    this.ctx.transform.apply(this.ctx, deltaTransform);\n\n    // SMask was composed, the results at the groupCtx can be cleared.\n    groupCtx.save();\n    groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n    groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n    groupCtx.restore();\n  }\n\n  resumeSMaskGroup() {\n    // Resuming state saved by suspendSMaskGroup. We don't need to restore\n    // any groupCtx state since restore() command (the only caller) will do\n    // that for us. See also beginSMaskGroup.\n    const groupCtx = this.current.resumeSMaskCtx;\n    const currentCtx = this.ctx;\n    this.ctx = groupCtx;\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n\n  endSMaskGroup() {\n    const groupCtx = this.ctx;\n    this.groupLevel--;\n    this.ctx = this.groupStack.pop();\n\n    composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n    this.ctx.restore();\n    copyCtxState(groupCtx, this.ctx);\n    // Transform was changed in the SMask canvas, reflecting this change on\n    // this.ctx.\n    const deltaTransform = Util.transform(\n      this.current.activeSMask.startTransformInverse,\n      groupCtx.mozCurrentTransform\n    );\n    this.ctx.transform.apply(this.ctx, deltaTransform);\n  }\n\n  save() {\n    this.ctx.save();\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n    this.current.resumeSMaskCtx = null;\n  }\n\n  restore() {\n    // SMask was suspended, we just need to resume it.\n    if (this.current.resumeSMaskCtx) {\n      this.resumeSMaskGroup();\n    }\n    // SMask has to be finished once there is no states that are using the\n    // same SMask.\n    if (\n      this.current.activeSMask !== null &&\n      (this.stateStack.length === 0 ||\n        this.stateStack[this.stateStack.length - 1].activeSMask !==\n          this.current.activeSMask)\n    ) {\n      this.endSMaskGroup();\n    }\n\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      this.ctx.restore();\n\n      // Ensure that the clipping path is reset (fixes issue6413.pdf).\n      this.pendingClip = null;\n\n      this._cachedGetSinglePixelWidth = null;\n    } else {\n      // We've finished all the SMask groups, reflect that in our state.\n      this.current.activeSMask = null;\n    }\n  }\n\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  // Path\n  constructPath(ops, args) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          break;\n        case OPS.curveTo:\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          ctx.bezierCurveTo(\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n    current.setCurrentPoint(x, y);\n  }\n\n  closePath() {\n    this.ctx.closePath();\n  }\n\n  stroke(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    // For stroke we want to temporarily change the global alpha to the\n    // stroking alpha.\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n        const lineWidth = this.getSinglePixelWidth();\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(\n          ctx,\n          this,\n          ctx.mozCurrentTransformInverse\n        );\n        // Prevent drawing too thin lines by enforcing a minimum line width.\n        ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n        ctx.stroke();\n        ctx.restore();\n      } else {\n        const lineWidth = this.getSinglePixelWidth();\n        if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n          // The current transform will transform a square pixel into a\n          // parallelogram where both heights are lower than 1 and not equal.\n          ctx.save();\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          // Prevent drawing too thin lines by enforcing a minimum line width.\n          ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n          ctx.stroke();\n        }\n      }\n    }\n    if (consumePath) {\n      this.consumePath();\n    }\n    // Restore the global alpha to the fill alpha\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  fill(consumePath) {\n    consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse\n      );\n      needRestore = true;\n    }\n\n    if (this.contentVisible) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath();\n    }\n  }\n\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n\n    this.consumePath();\n  }\n\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n\n  endPath() {\n    this.consumePath();\n  }\n\n  // Clipping\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n\n  // Text\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      ctx.setTransform.apply(ctx, path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setFont(fontRefName, size) {\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    // A valid matrix needs all main diagonal elements to be non-zero\n    // This also ensures we bypass FF bugzilla bug #719844.\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n\n    // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n    // and in some docs this can be negative (inverted x-y axes).\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n\n    if (fontObj.isType3Font) {\n      return; // we don't need ctx.font for Type3 fonts\n    }\n\n    const name = fontObj.loadedName || \"sans-serif\";\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n    const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n\n    // Some font backends cannot handle fonts below certain size.\n    // Keeping the font at minimal size and using the fontSizeScale to change\n    // the current transformation matrix before the fillText/strokeText.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode =\n      textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(\n      textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n    );\n    const patternFill = current.patternFill && !font.missingFile;\n\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform.apply(ctx, patternTransform);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fill();\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n        }\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fillText(character, x, y);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (resetLineWidthToOne) {\n          ctx.save();\n          ctx.moveTo(x, y);\n          ctx.resetTransform();\n          ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          ctx.strokeText(character, 0, 0);\n          ctx.restore();\n        } else {\n          ctx.strokeText(character, x, y);\n        }\n      }\n    }\n\n    if (isAddToPathSet) {\n      const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n      paths.push({\n        transform: ctx.mozCurrentTransform,\n        x,\n        y,\n        fontSize,\n        addToPath,\n      });\n    }\n  }\n\n  get isFontSubpixelAAEnabled() {\n    // Checks if anti-aliasing is enabled when scaled text is painted.\n    // On Windows GDI scaled fonts looks bad.\n    const { context: ctx } = this.cachedCanvases.getCanvas(\n      \"isFontSubpixelAAEnabled\",\n      10,\n      10\n    );\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    const simpleFillText =\n      current.textRenderingMode === TextRenderingMode.FILL &&\n      !font.disableFontFace &&\n      !current.patternFill;\n\n    ctx.save();\n    let patternTransform;\n    if (current.patternFill) {\n      // TODO: Patterns are not applied correctly to text if a non-embedded\n      // font is used. E.g. issue 8111 and ShowText-ShadingPattern.pdf.\n      ctx.save();\n      const pattern = current.fillColor.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse\n      );\n      patternTransform = ctx.mozCurrentTransform;\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n\n    let lineWidth = current.lineWidth;\n    let resetLineWidthToOne = false;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        this._cachedGetSinglePixelWidth = null;\n        lineWidth = this.getSinglePixelWidth();\n        resetLineWidthToOne = lineWidth < 0;\n      }\n    } else {\n      lineWidth /= scale;\n    }\n\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n\n    ctx.lineWidth = lineWidth;\n\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (isNum(glyph)) {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx =\n          -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (font.remeasure && width > 0) {\n        // Some standard fonts may not have the exact width: rescale per\n        // character if measured width is greater than expected glyph width\n        // and subpixel-aa is enabled, otherwise just center the glyph.\n        const measuredWidth =\n          ((ctx.measureText(character).width * 1000) / fontSize) *\n          fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX +=\n            (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n        }\n      }\n\n      // Only attempt to draw the glyph if it is actually in the embedded font\n      // file or if there isn't a font file so the fallback font is shown.\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          // common case\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(\n            character,\n            scaledX,\n            scaledY,\n            patternTransform,\n            resetLineWidthToOne\n          );\n          if (accent) {\n            const scaledAccentX =\n              scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n            const scaledAccentY =\n              scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n            this.paintChar(\n              accent.fontChar,\n              scaledAccentX,\n              scaledAccentY,\n              patternTransform,\n              resetLineWidthToOne\n            );\n          }\n        }\n      }\n\n      let charWidth;\n      if (vertical) {\n        charWidth = width * widthAdvanceScale - spacing * fontDirection;\n      } else {\n        charWidth = width * widthAdvanceScale + spacing * fontDirection;\n      }\n      x += charWidth;\n\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    return undefined;\n  }\n\n  showType3Text(glyphs) {\n    // Type3 fonts - each glyph is a \"mini-PDF\"\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible =\n      current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedGetSinglePixelWidth = null;\n\n    ctx.save();\n    ctx.transform.apply(ctx, current.textMatrix);\n    ctx.translate(current.x, current.y);\n\n    ctx.scale(textHScale, fontDirection);\n\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (isNum(glyph)) {\n        spacingLength = (spacingDir * glyph * fontSize) / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform.apply(ctx, fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n\n  // Type3 fonts\n  setCharWidth(xWidth, yWidth) {\n    // We can safely ignore this since the width should be the same\n    // as the width in the Widths array.\n  }\n\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    // TODO According to the spec we're also suppose to ignore any operators\n    // that set color or include images while processing this type3 font.\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.clip();\n    this.endPath();\n  }\n\n  // Color\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform =\n        this.baseTransform || this.ctx.mozCurrentTransform.slice();\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => {\n          return new CanvasGraphics(\n            ctx,\n            this.commonObjs,\n            this.objs,\n            this.canvasFactory\n          );\n        },\n      };\n      pattern = new TilingPattern(\n        IR,\n        color,\n        this.ctx,\n        canvasGraphicsFactory,\n        baseTransform\n      );\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.strokeStyle = color;\n    this.current.strokeColor = color;\n  }\n\n  setFillRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.fillStyle = color;\n    this.current.fillColor = color;\n    this.current.patternFill = false;\n  }\n\n  _getPattern(objId, matrix = null) {\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(\n        this.objs.get(objId),\n        this.cachedCanvasPatterns\n      );\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(\n      ctx,\n      this,\n      ctx.mozCurrentTransformInverse,\n      true\n    );\n\n    const inv = ctx.mozCurrentTransformInverse;\n    if (inv) {\n      const canvas = ctx.canvas;\n      const width = canvas.width;\n      const height = canvas.height;\n\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      // HACK to draw the gradient onto an infinite rectangle.\n      // PDF gradients are drawn across the entire image while\n      // Canvas only allows gradients to be drawn in a rectangle\n      // The following bug should allow us to remove this.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n\n    this.restore();\n  }\n\n  // Images\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform.apply(this, matrix);\n    }\n\n    this.baseTransform = this.ctx.mozCurrentTransform;\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.clip();\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    this.save();\n    const currentCtx = this.ctx;\n    // TODO non-isolated groups - according to Rik at adobe non-isolated\n    // group results aren't usually that different and they even have tools\n    // that ignore this setting. Notes from Rik on implementing:\n    // - When you encounter an transparency group, create a new canvas with\n    // the dimensions of the bbox\n    // - copy the content from the previous canvas to the new canvas\n    // - draw as usual\n    // - remove the backdrop alpha:\n    // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n    // value of your transparency group and 'alphaBackdrop' the alpha of the\n    // backdrop\n    // - remove background color:\n    // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n\n    // TODO knockout - supposedly possible with the clever use of compositing\n    // modes.\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n\n    const currentTransform = currentCtx.mozCurrentTransform;\n    if (group.matrix) {\n      currentCtx.transform.apply(currentCtx, group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n\n    // Based on the current transform figure out how big the bounding box\n    // will actually be.\n    let bounds = Util.getAxialAlignedBoundingBox(\n      group.bbox,\n      currentCtx.mozCurrentTransform\n    );\n    // Clip the bounding box to the current canvas.\n    const canvasBounds = [\n      0,\n      0,\n      currentCtx.canvas.width,\n      currentCtx.canvas.height,\n    ];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    // Use ceil in case we're between sizes so we don't create canvas that is\n    // too small and make the canvas at least 1x1 pixels.\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    let scaleX = 1,\n      scaleY = 1;\n    if (drawnWidth > MAX_GROUP_SIZE) {\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\n      drawnWidth = MAX_GROUP_SIZE;\n    }\n    if (drawnHeight > MAX_GROUP_SIZE) {\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\n      drawnHeight = MAX_GROUP_SIZE;\n    }\n\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      // Using two cache entries is case if masks are used one after another.\n      cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight,\n      true\n    );\n    const groupCtx = scratchCanvas.context;\n\n    // Since we created a new canvas that is just the size of the bounding box\n    // we have to translate the group ctx.\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform.apply(groupCtx, currentTransform);\n\n    if (group.smask) {\n      // Saving state and cached mask to be used in setGState.\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        scaleX,\n        scaleY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null, // used during suspend operation\n      });\n    } else {\n      // Setup the current ctx so when the group is popped we draw it at the\n      // right location.\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.scale(scaleX, scaleY);\n    }\n    // The transparency group inherits all off the current graphics state\n    // except the blend mode, soft mask, and alpha constants.\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n\n    // Resetting mask state, masks will be applied on restore of the group.\n    this.current.activeSMask = null;\n  }\n\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    this.ctx = this.groupStack.pop();\n    // Turn off image smoothing to avoid sub pixel interpolation which can\n    // look kind of blurry for some pdfs.\n    this.ctx.imageSmoothingEnabled = false;\n\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n    } else {\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n    }\n    this.restore();\n  }\n\n  beginAnnotations() {\n    this.save();\n    if (this.baseTransform) {\n      this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n    }\n  }\n\n  endAnnotations() {\n    this.restore();\n  }\n\n  beginAnnotation(id, rect, transform, matrix) {\n    this.save();\n    resetCtxToDefault(this.ctx);\n    this.current = new CanvasExtraState();\n\n    if (Array.isArray(rect) && rect.length === 4) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n      this.ctx.rect(rect[0], rect[1], width, height);\n      this.clip();\n      this.endPath();\n    }\n\n    this.transform.apply(this, transform);\n    this.transform.apply(this, matrix);\n  }\n\n  endAnnotation() {\n    this.restore();\n  }\n\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const width = img.width,\n      height = img.height;\n\n    const glyph = this.processingType3;\n\n    if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n      if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n        glyph.compiled = compileType3Glyph({ data: img.data, width, height });\n      } else {\n        glyph.compiled = null;\n      }\n    }\n\n    if (glyph?.compiled) {\n      glyph.compiled(ctx);\n      return;\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n\n    ctx.save();\n    // The mask is drawn with the transform applied. Reset the current\n    // transform to draw to the identity.\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n  }\n\n  paintImageMaskXObjectRepeat(\n    imgData,\n    scaleX,\n    skewX = 0,\n    skewY = 0,\n    scaleY,\n    positions\n  ) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = ctx.mozCurrentTransform;\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(imgData);\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [\n        scaleX,\n        skewX,\n        skewY,\n        scaleY,\n        positions[i],\n        positions[i + 1],\n      ]);\n\n      const [x, y] = Util.applyTransform([0, 0], trans);\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n  }\n\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    for (let i = 0, ii = images.length; i < ii; i++) {\n      const image = images[i];\n      const width = image.width,\n        height = image.height;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      putBinaryImageMask(maskCtx, image);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(\n            maskCtx,\n            this,\n            ctx.mozCurrentTransformInverse,\n            false\n          )\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      ctx.save();\n      ctx.transform.apply(ctx, image.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n      ctx.restore();\n    }\n  }\n\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = objId.startsWith(\"g_\")\n      ? this.commonObjs.get(objId)\n      : this.objs.get(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height,\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n\n    this.save();\n    // scale the image to the unit square\n    ctx.scale(1 / width, -1 / height);\n\n    let imgToPaint;\n    // typeof check is needed due to node.js support, see issue #8489\n    if (\n      (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n      !imgData.data\n    ) {\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\n        \"inlineImage\",\n        width,\n        height\n      );\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n      imgToPaint = tmpCanvas.canvas;\n    }\n\n    const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      ctx.mozCurrentTransform,\n      imgData.interpolate\n    );\n    ctx.drawImage(\n      scaled.img,\n      0,\n      0,\n      scaled.paintWidth,\n      scaled.paintHeight,\n      0,\n      -height,\n      width,\n      height\n    );\n\n    if (this.imageLayer) {\n      const position = this.getCanvasPosition(0, -height);\n      this.imageLayer.appendImage({\n        imgData,\n        left: position[0],\n        top: position[1],\n        width: width / ctx.mozCurrentTransformInverse[0],\n        height: height / ctx.mozCurrentTransformInverse[3],\n      });\n    }\n    this.restore();\n  }\n\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    const w = imgData.width;\n    const h = imgData.height;\n\n    const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n    const tmpCtx = tmpCanvas.context;\n    putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n    for (let i = 0, ii = map.length; i < ii; i++) {\n      const entry = map[i];\n      ctx.save();\n      ctx.transform.apply(ctx, entry.transform);\n      ctx.scale(1, -1);\n      ctx.drawImage(\n        tmpCanvas.canvas,\n        entry.x,\n        entry.y,\n        entry.w,\n        entry.h,\n        0,\n        -1,\n        1,\n        1\n      );\n      if (this.imageLayer) {\n        const position = this.getCanvasPosition(entry.x, entry.y);\n        this.imageLayer.appendImage({\n          imgData,\n          left: position[0],\n          top: position[1],\n          width: w,\n          height: h,\n        });\n      }\n      ctx.restore();\n    }\n  }\n\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n  }\n\n  // Marked content\n\n  markPoint(tag) {\n    // TODO Marked content.\n  }\n\n  markPointProps(tag, properties) {\n    // TODO Marked content.\n  }\n\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true,\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties),\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n\n  // Compatibility\n\n  beginCompat() {\n    // TODO ignore undefined operators (should we do that anyway?)\n  }\n\n  endCompat() {\n    // TODO stop ignoring undefined operators\n  }\n\n  // Helper functions\n\n  consumePath() {\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (this.pendingClip === EO_CLIP) {\n        ctx.clip(\"evenodd\");\n      } else {\n        ctx.clip();\n      }\n      this.pendingClip = null;\n    }\n    ctx.beginPath();\n  }\n\n  getSinglePixelWidth() {\n    if (this._cachedGetSinglePixelWidth === null) {\n      // If transform is [a b] then a pixel (square) is transformed\n      //                 [c d]\n      // into a parallelogram: its area is the abs value of the determinant.\n      // This parallelogram has 2 heights:\n      //  - Area / |col_1|;\n      //  - Area / |col_2|.\n      // so in order to get a height of at least 1, pixel height\n      // must be computed as followed:\n      //  h = max(sqrt(a² + c²) / |det(M)|, sqrt(b² + d²) / |det(M)|).\n      // This is equivalent to:\n      //  h = max(|line_1_inv(M)|, |line_2_inv(M)|)\n      const m = this.ctx.mozCurrentTransform;\n\n      const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n      const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n      const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n      const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n      if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n        // The parallelogram isn't a square and at least one height\n        // is lower than 1 so the resulting line width must be 1\n        // but it cannot be achieved with one scale: when scaling a pixel\n        // we'll get a rectangle (see issue #12295).\n        // For example with matrix [0.001 0, 0, 100], a pixel is transformed\n        // in a rectangle 0.001x100. If we just scale by 1000 (to have a 1)\n        // then we'll get a rectangle 1x1e5 which is wrong.\n        // In this case, we must reset the transform, set linewidth to 1\n        // and then stroke.\n        this._cachedGetSinglePixelWidth = -(\n          this._combinedScaleFactor * pixelHeight\n        );\n      } else if (absDet > Number.EPSILON) {\n        this._cachedGetSinglePixelWidth = pixelHeight;\n      } else {\n        // Matrix is non-invertible.\n        this._cachedGetSinglePixelWidth = 1;\n      }\n    }\n\n    return this._cachedGetSinglePixelWidth;\n  }\n\n  getCanvasPosition(x, y) {\n    const transform = this.ctx.mozCurrentTransform;\n    return [\n      transform[0] * x + transform[2] * y + transform[4],\n      transform[1] * x + transform[3] * y + transform[5],\n    ];\n  }\n\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n\nexport { CanvasGraphics };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FormatError,\n  info,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox || typeof Path2D === \"undefined\") {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR, cachedCanvasPatterns) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n    this.cachedCanvasPatterns = cachedCanvasPatterns;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    let pattern;\n    if (!shadingFill) {\n      if (this.cachedCanvasPatterns.has(this)) {\n        pattern = this.cachedCanvasPatterns.get(this);\n      } else {\n        const tmpCanvas = owner.cachedCanvases.getCanvas(\n          \"pattern\",\n          owner.ctx.canvas.width,\n          owner.ctx.canvas.height,\n          true\n        );\n\n        const tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n        tmpCtx.beginPath();\n        tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n\n        tmpCtx.setTransform.apply(tmpCtx, owner.baseTransform);\n        if (this.matrix) {\n          tmpCtx.transform.apply(tmpCtx, this.matrix);\n        }\n        applyBoundingBox(tmpCtx, this._bbox);\n\n        tmpCtx.fillStyle = this._createGradient(tmpCtx);\n        tmpCtx.fill();\n\n        pattern = ctx.createPattern(tmpCanvas.canvas, \"repeat\");\n        this.cachedCanvasPatterns.set(this, pattern);\n      }\n    } else {\n      // Don't bother caching gradients, they are quick to rebuild.\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    if (!shadingFill) {\n      const domMatrix = new DOMMatrix(inverse);\n      try {\n        pattern.setTransform(domMatrix);\n      } catch (ex) {\n        // Avoid rendering breaking completely in Firefox 78 ESR,\n        // and in Node.js (see issue 13724).\n        warn(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n      }\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else {\n        k = (y1 - y) / (y1 - y2);\n      }\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (shadingFill) {\n      scale = Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      shadingFill ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (!shadingFill) {\n      ctx.setTransform.apply(ctx, owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform.apply(ctx, this.matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR, cachedCanvasPatterns) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR, cachedCanvasPatterns);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static get MAX_PATTERN_SIZE() {\n    return shadow(this, \"MAX_PATTERN_SIZE\", 3000);\n  }\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 cordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (!shadingFill) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    try {\n      pattern.setTransform(domMatrix);\n    } catch (ex) {\n      // Avoid rendering breaking completely in Firefox 78 ESR,\n      // and in Node.js (see issue 13724).\n      warn(`TilingPattern.getPattern: \"${ex?.message}\".`);\n    }\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, TilingPattern };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort =\n  GlobalWorkerOptions.workerPort === undefined\n    ? null\n    : GlobalWorkerOptions.workerPort;\n\nGlobalWorkerOptions.workerSrc =\n  GlobalWorkerOptions.workerSrc === undefined\n    ? \"\"\n    : GlobalWorkerOptions.workerSrc;\n\nexport { GlobalWorkerOptions };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n  PasswordException,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  warn,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    !(\n      reason instanceof Error ||\n      (typeof reason === \"object\" && reason !== null)\n    )\n  ) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      throw new Error(\n        'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n      );\n    }\n    warn('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n    return reason;\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this._processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this._createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this._postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = createPromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this._postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = createPromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          this._postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = createPromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = createPromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createStreamSink(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const self = this,\n      action = this.actionHandler[data.action];\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = createPromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        self._postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: createPromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _processStreamMessage(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const streamController = this.streamControllers[streamId],\n      streamSink = this.streamSinks[streamId];\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          streamController.startCall.resolve();\n        } else {\n          streamController.startCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          streamController.pullCall.resolve();\n        } else {\n          streamController.pullCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!streamSink) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink, so when it changes\n        // from negative to positive, set ready property as resolved promise.\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n          streamSink.sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        streamSink.desiredSize = data.desiredSize;\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onPull && streamSink.onPull());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(streamController, \"enqueue should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(streamController, \"close should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.isClosed = true;\n        streamController.controller.close();\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(streamController, \"error should have stream controller\");\n        streamController.controller.error(wrapReason(data.reason));\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          streamController.cancelCall.resolve();\n        } else {\n          streamController.cancelCall.reject(wrapReason(data.reason));\n        }\n        this._deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!streamSink) {\n          break;\n        }\n\n        new Promise(function (resolve) {\n          resolve(\n            streamSink.onCancel && streamSink.onCancel(wrapReason(data.reason))\n          );\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\n        streamSink.isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _deleteStreamController(streamController, streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled([\n      streamController.startCall && streamController.startCall.promise,\n      streamController.pullCall && streamController.pullCall.promise,\n      streamController.cancelCall && streamController.cancelCall.promise,\n    ]);\n    delete this.streamControllers[streamId];\n  }\n\n  /**\n   * Sends raw message to the comObj.\n   * @param {Object} message - Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   * @private\n   */\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  constructor({ parsedData, rawData }) {\n    this._metadataMap = parsedData;\n    this._data = rawData;\n  }\n\n  getRaw() {\n    return this._data;\n  }\n\n  get(name) {\n    return this._metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this._metadataMap);\n  }\n\n  has(name) {\n    return this._metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectFromMap, warn } from \"../shared/util.js\";\n\nclass OptionalContentGroup {\n  constructor(name, intent) {\n    this.visible = true;\n    this.name = name;\n    this.intent = intent;\n  }\n}\n\nclass OptionalContentConfig {\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n    this._order = null;\n    this._groups = new Map();\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this._order = data.order;\n    for (const group of data.groups) {\n      this._groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this._groups) {\n        group.visible = false;\n      }\n    }\n\n    for (const on of data.on) {\n      this._groups.get(on).visible = true;\n    }\n\n    for (const off of data.off) {\n      this._groups.get(off).visible = false;\n    }\n  }\n\n  _evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this._evaluateVisibilityExpression(element);\n      } else if (this._groups.has(element)) {\n        state = this._groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (this._groups.size === 0) {\n      return true;\n    }\n    if (!group) {\n      warn(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!this._groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this._groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this._evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this._groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this._groups.get(id).visible = !!visible;\n  }\n\n  getOrder() {\n    if (!this._groups.size) {\n      return null;\n    }\n    if (this._order) {\n      return this._order.slice();\n    }\n    return Array.from(this._groups.keys());\n  }\n\n  getGroups() {\n    return this._groups.size > 0 ? objectFromMap(this._groups) : null;\n  }\n\n  getGroup(id) {\n    return this._groups.get(id) || null;\n  }\n}\n\nexport { OptionalContentConfig };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, createPromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(params, pdfDataRangeTransport) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = params.progressiveDone || false;\n    this._contentDispositionFilename =\n      params.contentDispositionFilename || null;\n\n    const initialData = params.initialData;\n    if (initialData?.length > 0) {\n      const buffer = new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !params.disableStream;\n    this._isRangeSupported = !params.disableRange;\n    this._contentLength = params.length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData(args) {\n    const buffer = new Uint8Array(args.chunk).buffer;\n    if (args.begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== args.begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      const firstReader = this._rangeReaders[0];\n      if (firstReader?.onProgress) {\n        firstReader.onProgress({ loaded: evt.loaded });\n      }\n    } else {\n      const fullReader = this._fullRequestReader;\n      if (fullReader?.onProgress) {\n        fullReader.onProgress({ loaded: evt.loaded, total: evt.total });\n      }\n    }\n  }\n\n  _onProgressiveDone() {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.progressiveDone();\n    }\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass XfaText {\n  /**\n   * Walk an XFA tree and create an array of text nodes that is compatible\n   * with a regular PDFs TextContent. Currently, only TextItem.str is supported,\n   * all other fields and styles haven't been implemented.\n   *\n   * @param {Object} xfa - An XFA fake DOM object.\n   *\n   * @returns {TextContent}\n   */\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null),\n    };\n    function walk(node) {\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node?.attributes?.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str,\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n\n  /**\n   * @param {string} name - DOM node name. (lower case)\n   *\n   * @returns {boolean} true if the DOM node should have a corresponding text\n   * node.\n   */\n  static shouldBuildText(name) {\n    return !(\n      name === \"textarea\" ||\n      name === \"input\" ||\n      name === \"option\" ||\n      name === \"select\"\n    );\n  }\n}\n\nexport { XfaText };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationType,\n  assert,\n  shadow,\n  stringToPDFString,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  PDFDateString,\n} from \"./display_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst GetElementsByNameSet = new WeakSet();\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {PDFPage} page\n * @property {PageViewport} viewport\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [fieldObjects]\n * @property {Object} [mouseState]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n    this._mouseState = parameters.mouseState;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement}\n   */\n  _createContainer(ignoreBorder = false) {\n    const data = this.data,\n      page = this.page,\n      viewport = this.viewport;\n    const container = document.createElement(\"section\");\n    let width = data.rect[2] - data.rect[0];\n    let height = data.rect[3] - data.rect[1];\n\n    container.setAttribute(\"data-annotation-id\", data.id);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n    container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n      if (data.borderStyle.style !== AnnotationBorderStyleType.UNDERLINE) {\n        // Underline styles only have a bottom border, so we do not need\n        // to adjust for all borders. This yields a similar result as\n        // Adobe Acrobat/Reader.\n        width -= 2 * data.borderStyle.width;\n        height -= 2 * data.borderStyle.width;\n      }\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      const borderColor = data.borderColor || data.color || null;\n      if (borderColor) {\n        container.style.borderColor = Util.makeHexColor(\n          data.color[0] | 0,\n          data.color[1] | 0,\n          data.color[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${rect[0]}px`;\n    container.style.top = `${rect[1]}px`;\n    container.style.width = `${width}px`;\n    container.style.height = `${height}px`;\n    return container;\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _createQuadrilaterals(ignoreBorder = false) {\n    if (!this.data.quadPoints) {\n      return null;\n    }\n\n    const quadrilaterals = [];\n    const savedRect = this.data.rect;\n    for (const quadPoint of this.data.quadPoints) {\n      this.data.rect = [\n        quadPoint[2].x,\n        quadPoint[2].y,\n        quadPoint[1].x,\n        quadPoint[1].y,\n      ];\n      quadrilaterals.push(this._createContainer(ignoreBorder));\n    }\n    this.data.rect = savedRect;\n    return quadrilaterals;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @param {HTMLDivElement|HTMLImageElement|null} trigger\n   * @param {Object} data\n   * @memberof AnnotationElement\n   */\n  _createPopup(trigger, data) {\n    let container = this.container;\n    if (this.quadrilaterals) {\n      trigger = trigger || this.quadrilaterals;\n      container = this.quadrilaterals[0];\n    }\n\n    // If no trigger element is specified, create it.\n    if (!trigger) {\n      trigger = document.createElement(\"div\");\n      trigger.style.height = container.style.height;\n      trigger.style.width = container.style.width;\n      container.appendChild(trigger);\n    }\n\n    const popupElement = new PopupElement({\n      container,\n      trigger,\n      color: data.color,\n      titleObj: data.titleObj,\n      modificationDate: data.modificationDate,\n      contentsObj: data.contentsObj,\n      hideWrapper: true,\n    });\n    const popup = popupElement.render();\n\n    // Position the popup next to the annotation's container.\n    popup.style.left = container.style.width;\n\n    container.appendChild(popup);\n  }\n\n  /**\n   * Render the quadrilaterals of the annotation.\n   *\n   * @private\n   * @param {string} className\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _renderQuadrilaterals(className) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(this.quadrilaterals, \"Missing quadrilaterals during rendering\");\n    }\n\n    for (const quadrilateral of this.quadrilaterals) {\n      quadrilateral.className = className;\n    }\n    return this.quadrilaterals;\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement|Array<HTMLSectionElement>}\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n\n  /**\n   * @private\n   * @returns {Array}\n   */\n  _getElementsByName(name, skipId = null) {\n    const fields = [];\n\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const { page, id, exportValues } of fieldObj) {\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue =\n            typeof exportValues === \"string\" ? exportValues : null;\n\n          const domElement = document.getElementById(id);\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({ id, exportValue, domElement });\n        }\n      }\n      return fields;\n    }\n    // Fallback to a regular DOM lookup, to ensure that the standalone\n    // viewer components won't break.\n    for (const domElement of document.getElementsByName(name)) {\n      const { id, exportValue } = domElement;\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({ id, exportValue, domElement });\n    }\n    return fields;\n  }\n\n  static get platform() {\n    const platform = typeof navigator !== \"undefined\" ? navigator.platform : \"\";\n\n    return shadow(this, \"platform\", {\n      isWin: platform.includes(\"Win\"),\n      isMac: platform.includes(\"Mac\"),\n    });\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.url ||\n      parameters.data.dest ||\n      parameters.data.action ||\n      parameters.data.isTooltipOnly ||\n      parameters.data.resetForm ||\n      (parameters.data.actions &&\n        (parameters.data.actions.Action ||\n          parameters.data.actions[\"Mouse Up\"] ||\n          parameters.data.actions[\"Mouse Down\"]))\n    );\n    super(parameters, { isRenderable, createQuadrilaterals: true });\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n\n    if (data.url) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"LinkAnnotationElement.render - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(link, data.url, data.newWindow);\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n    } else {\n      let hasClickAction = false;\n      if (\n        data.actions &&\n        (data.actions.Action ||\n          data.actions[\"Mouse Up\"] ||\n          data.actions[\"Mouse Down\"]) &&\n        this.enableScripting &&\n        this.hasJSActions\n      ) {\n        hasClickAction = true;\n        this._bindJSAction(link, data);\n      }\n\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n      } else if (!hasClickAction) {\n        this._bindLink(link, \"\");\n      }\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"linkAnnotation\").map(\n        (quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        }\n      );\n    }\n\n    this.container.className = \"linkAnnotation\";\n    this.container.appendChild(link);\n    return this.container;\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      link.className = \"internalLink\";\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    link.className = \"internalLink\";\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    link.className = \"internalLink\";\n  }\n\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    link.className = \"internalLink\";\n\n    if (!this._fieldObjects) {\n      warn(\n        `_bindResetFormAction - \"resetForm\" action not supported, ` +\n          \"ensure that the `fieldObjects` parameter is provided.\"\n      );\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n\n    link.onclick = () => {\n      if (otherClickAction) {\n        otherClickAction();\n      }\n\n      const {\n        fields: resetFormFields,\n        refs: resetFormRefs,\n        include,\n      } = resetForm;\n\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const { id } of fields) {\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const { id } = field;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value, valueAsString: value });\n            break;\n          }\n          case \"checkbox\":\n          case \"radiobutton\": {\n            const value = field.defaultValue === field.exportValues;\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"combobox\":\n          case \"listbox\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          default:\n            continue;\n        }\n        const domElement = document.getElementById(id);\n        if (!domElement || !GetElementsByNameSet.has(domElement)) {\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n\n      if (this.enableScripting) {\n        // Update the values in the sandbox.\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\",\n          },\n        });\n      }\n\n      return false;\n    };\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.className = \"textAnnotation\";\n\n    const image = document.createElement(\"img\");\n    image.style.height = this.container.style.height;\n    image.style.width = this.container.style.width;\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.hasPopup) {\n      this._createPopup(image, this.data);\n    }\n\n    this.container.appendChild(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  _getKeyModifier(event) {\n    const { isWin, isMac } = AnnotationElement.platform;\n    return (isWin && event.ctrlKey) || (isMac && event.metaKey);\n  }\n\n  _setEventListener(element, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non mouse event\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: event.target.checked,\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        this._setEventListener(element, baseName, eventName, getter);\n      }\n    }\n  }\n\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor =\n      color === null\n        ? \"transparent\"\n        : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      event.target.style[styleName] = ColorConverters[`${color[0]}_HTML`](\n        color.slice(1)\n      );\n    };\n\n    const commonActions = {\n      display: event => {\n        const hidden = event.detail.display % 2 === 1;\n        event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden,\n          print: event.detail.display === 0 || event.detail.display === 3,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          print: event.detail.print,\n        });\n      },\n      hidden: event => {\n        event.target.style.visibility = event.detail.hidden\n          ? \"hidden\"\n          : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden: event.detail.hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        if (event.detail.readonly) {\n          event.target.setAttribute(\"readonly\", \"\");\n        } else {\n          event.target.removeAttribute(\"readonly\");\n        }\n      },\n      required: event => {\n        if (event.detail.required) {\n          event.target.setAttribute(\"required\", \"\");\n        } else {\n          event.target.removeAttribute(\"required\");\n        }\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n    };\n\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      if (action) {\n        action(jsEvent);\n      }\n    }\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(\n      base.name,\n      /* skipId = */ base.id\n    )) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, { [keyInStorage]: value });\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.className = \"textWidgetAnnotation\";\n\n    let element = null;\n    if (this.renderForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n        valueAsString: this.data.fieldValue,\n      });\n      const textContent = storedData.valueAsString || storedData.value || \"\";\n      const elementData = {\n        userValue: null,\n        formattedValue: null,\n        beforeInputSelectionRange: null,\n        beforeInputValue: null,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = textContent;\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", textContent);\n      }\n      GetElementsByNameSet.add(element);\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n\n      elementData.userValue = textContent;\n      element.setAttribute(\"id\", id);\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n      });\n\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue || \"\";\n        element.value = elementData.userValue = defaultValue;\n        delete elementData.formattedValue;\n      });\n\n      let blurListener = event => {\n        if (elementData.formattedValue) {\n          event.target.value = elementData.formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n        elementData.beforeInputSelectionRange = null;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.userValue) {\n            event.target.value = elementData.userValue;\n          }\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value || \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              if (!elementData.formattedValue) {\n                event.target.value = elementData.userValue;\n              }\n            },\n            valueAsString(event) {\n              elementData.formattedValue = event.detail.valueAsString || \"\";\n              if (event.target !== document.activeElement) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = elementData.formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue: elementData.formattedValue,\n              });\n            },\n            selRange(event) {\n              const [selStart, selEnd] = event.detail.selRange;\n              if (selStart >= 0 && selEnd < event.target.value.length) {\n                event.target.setSelectionRange(selStart, selEnd);\n              }\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          // if the key is one of Escape, Enter or Tab\n          // then the data are committed\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\") {\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          // Save the entered value\n          elementData.userValue = event.target.value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value: event.target.value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (this._mouseState.isDown) {\n            // Focus out using the mouse: data are committed\n            elementData.userValue = event.target.value;\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: event.target.value,\n                willCommit: true,\n                commitKey: 1,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n        element.addEventListener(\"mousedown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          elementData.beforeInputSelectionRange = null;\n        });\n        element.addEventListener(\"keyup\", event => {\n          // keyup is triggered after input\n          if (event.target.selectionStart === event.target.selectionEnd) {\n            elementData.beforeInputSelectionRange = null;\n          }\n        });\n        element.addEventListener(\"select\", event => {\n          elementData.beforeInputSelectionRange = [\n            event.target.selectionStart,\n            event.target.selectionEnd,\n          ];\n        });\n\n        if (this.data.actions?.Keystroke) {\n          // We should use beforeinput but this\n          // event isn't available in Firefox\n          element.addEventListener(\"input\", event => {\n            let selStart = -1;\n            let selEnd = -1;\n            if (elementData.beforeInputSelectionRange) {\n              [selStart, selEnd] = elementData.beforeInputSelectionRange;\n            }\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: elementData.beforeInputValue,\n                change: event.data,\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      if (this.data.maxLen !== null) {\n        element.maxLength = this.data.maxLen;\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / this.data.maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontSize, fontColor } = this.data.defaultAppearanceData;\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n    if (fontSize) {\n      style.fontSize = `${fontSize}px`;\n    }\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.className = \"buttonWidgetAnnotation checkBox\";\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const checkbox of this._getElementsByName(name, /* skipId = */ id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, { value: curChecked });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"buttonWidgetAnnotation radioButton\";\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.disabled = data.readOnly;\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const radio of this._getElementsByName(name, /* skipId = */ id)) {\n        storage.setValue(radio.id, { value: false });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked =\n        defaultValue !== null &&\n        defaultValue !== undefined &&\n        defaultValue === data.buttonValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, { value: curChecked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.className = \"buttonWidgetAnnotation pushButton\";\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.className = \"choiceWidgetAnnotation\";\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    // For printing/saving we currently only support choice widgets with one\n    // option selection. Therefore, listboxes (#12189) and comboboxes (#12224)\n    // are not properly printed/saved yet, so we only store the first item in\n    // the field value array instead of the entire array. Once support for those\n    // two field types is implemented, we should use the same pattern as the\n    // other interactive widgets where the return value of `getValue`\n    // is used and the full array of field values is stored.\n    storage.getValue(id, {\n      value:\n        this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined,\n    });\n\n    let { fontSize } = this.data.defaultAppearanceData;\n    if (!fontSize) {\n      fontSize = 9;\n    }\n    const fontSizeStyle = `calc(${fontSize}px * var(--zoom-factor))`;\n\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.disabled = this.data.readOnly;\n    selectElement.name = this.data.fieldName;\n    selectElement.setAttribute(\"id\", id);\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n\n    selectElement.style.fontSize = `${fontSize}px`;\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (this.data.combo) {\n        optionElement.style.fontSize = fontSizeStyle;\n      }\n      if (this.data.fieldValue.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n      }\n      selectElement.appendChild(optionElement);\n    }\n\n    const getValue = (event, isExport) => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const options = event.target.options;\n      if (!event.target.multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n            selectElement.insertBefore(\n              optionElement,\n              selectElement.children[index]\n            );\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.appendChild(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(event, /* isExport */ true);\n        const value = getValue(event, /* isExport */ false);\n        storage.setValue(id, { value: exportValue });\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value,\n            changeEx: exportValue,\n            willCommit: true,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n        ],\n        event => event.target.checked\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(event) });\n      });\n    }\n\n    this._setBackgroundColor(selectElement);\n\n    this.container.appendChild(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.titleObj?.str || parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    // Do not render popup annotations for parent elements with these types as\n    // they create the popups themselves (because of custom trigger divs).\n    const IGNORE_TYPES = [\n      \"Line\",\n      \"Square\",\n      \"Circle\",\n      \"PolyLine\",\n      \"Polygon\",\n      \"Ink\",\n    ];\n\n    this.container.className = \"popupAnnotation\";\n\n    if (IGNORE_TYPES.includes(this.data.parentType)) {\n      return this.container;\n    }\n\n    const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n    const parentElements = this.layer.querySelectorAll(selector);\n    if (parentElements.length === 0) {\n      return this.container;\n    }\n\n    const popup = new PopupElement({\n      container: this.container,\n      trigger: Array.from(parentElements),\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n    });\n\n    // Position the popup next to the parent annotation's container.\n    // PDF viewers ignore a popup annotation's rectangle.\n    const page = this.page;\n    const rect = Util.normalizeRect([\n      this.data.parentRect[0],\n      page.view[3] - this.data.parentRect[1] + page.view[1],\n      this.data.parentRect[2],\n      page.view[3] - this.data.parentRect[3] + page.view[1],\n    ]);\n    const popupLeft =\n      rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n    const popupTop = rect[1];\n\n    this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n    this.container.style.left = `${popupLeft}px`;\n    this.container.style.top = `${popupTop}px`;\n\n    this.container.appendChild(popup.render());\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  constructor(parameters) {\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.titleObj = parameters.titleObj;\n    this.modificationDate = parameters.modificationDate;\n    this.contentsObj = parameters.contentsObj;\n    this.hideWrapper = parameters.hideWrapper || false;\n\n    this.pinned = false;\n  }\n\n  render() {\n    const BACKGROUND_ENLIGHT = 0.7;\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"popupWrapper\";\n\n    // For Popup annotations we hide the entire section because it contains\n    // only the popup. However, for Text annotations without a separate Popup\n    // annotation, we cannot hide the entire container as the image would\n    // disappear too. In that special case, hiding the wrapper suffices.\n    this.hideElement = this.hideWrapper ? wrapper : this.container;\n    this.hideElement.hidden = true;\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"popup\";\n\n    const color = this.color;\n    if (color) {\n      // Enlighten the color.\n      const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n      const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n      const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n      popup.style.backgroundColor = Util.makeHexColor(r | 0, g | 0, b | 0);\n    }\n\n    const title = document.createElement(\"h1\");\n    title.dir = this.titleObj.dir;\n    title.textContent = this.titleObj.str;\n    popup.appendChild(title);\n\n    // The modification date is shown in the popup instead of the creation\n    // date if it is available and can be parsed correctly, which is\n    // consistent with other viewers such as Adobe Acrobat.\n    const dateObject = PDFDateString.toDateObject(this.modificationDate);\n    if (dateObject) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.textContent = \"{{date}}, {{time}}\";\n      modificationDate.dataset.l10nId = \"annotation_date_string\";\n      modificationDate.dataset.l10nArgs = JSON.stringify({\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n      popup.appendChild(modificationDate);\n    }\n\n    const contents = this._formatContents(this.contentsObj);\n    popup.appendChild(contents);\n\n    if (!Array.isArray(this.trigger)) {\n      this.trigger = [this.trigger];\n    }\n\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this._toggle.bind(this));\n      element.addEventListener(\"mouseover\", this._show.bind(this, false));\n      element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n    }\n    popup.addEventListener(\"click\", this._hide.bind(this, true));\n\n    wrapper.appendChild(popup);\n    return wrapper;\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {Object<string, string>} contentsObj\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents({ str, dir }) {\n    const p = document.createElement(\"p\");\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.appendChild(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.appendChild(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   *\n   * @private\n   * @memberof PopupElement\n   */\n  _toggle() {\n    if (this.pinned) {\n      this._hide(true);\n    } else {\n      this._show(true);\n    }\n  }\n\n  /**\n   * Show the popup.\n   *\n   * @private\n   * @param {boolean} pin\n   * @memberof PopupElement\n   */\n  _show(pin = false) {\n    if (pin) {\n      this.pinned = true;\n    }\n    if (this.hideElement.hidden) {\n      this.hideElement.hidden = false;\n      this.container.style.zIndex += 1;\n    }\n  }\n\n  /**\n   * Hide the popup.\n   *\n   * @private\n   * @param {boolean} unpin\n   * @memberof PopupElement\n   */\n  _hide(unpin = true) {\n    if (unpin) {\n      this.pinned = false;\n    }\n    if (!this.hideElement.hidden && !this.pinned) {\n      this.hideElement.hidden = true;\n      this.container.style.zIndex -= 1;\n    }\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"freeTextAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"lineAnnotation\";\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n\n    svg.appendChild(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    this._createPopup(line, data);\n\n    return this.container;\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"squareAnnotation\";\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    this._createPopup(square, data);\n\n    return this.container;\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"circleAnnotation\";\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    this._createPopup(circle, data);\n\n    return this.container;\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    this._createPopup(polyline, data);\n\n    return this.container;\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"caretAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"none\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      this._createPopup(polyline, data);\n\n      svg.appendChild(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"highlightAnnotation\");\n    }\n\n    this.container.className = \"highlightAnnotation\";\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"underlineAnnotation\");\n    }\n\n    this.container.className = \"underlineAnnotation\";\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"squigglyAnnotation\");\n    }\n\n    this.container.className = \"squigglyAnnotation\";\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n    }\n\n    this.container.className = \"strikeoutAnnotation\";\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.titleObj?.str ||\n      parameters.data.contentsObj?.str\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"stampAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      id: stringToPDFString(filename),\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.className = \"fileAttachmentAnnotation\";\n\n    const trigger = document.createElement(\"div\");\n    trigger.style.height = this.container.style.height;\n    trigger.style.width = this.container.style.width;\n    trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n    if (\n      !this.data.hasPopup &&\n      (this.data.titleObj?.str || this.data.contentsObj?.str)\n    ) {\n      this._createPopup(trigger, this.data);\n    }\n\n    this.container.appendChild(trigger);\n    return this.container;\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   *\n   * @private\n   * @memberof FileAttachmentAnnotationElement\n   */\n  _download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPage} page\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n */\n\nclass AnnotationLayer {\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static render(parameters) {\n    const sortedAnnotations = [],\n      popupAnnotations = [];\n    // Ensure that Popup annotations are handled last, since they're dependant\n    // upon the parent annotation having already been rendered (please refer to\n    // the `PopupAnnotationElement.render` method); fixes issue 11362.\n    for (const data of parameters.annotations) {\n      if (!data) {\n        continue;\n      }\n      if (data.annotationType === AnnotationType.POPUP) {\n        popupAnnotations.push(data);\n        continue;\n      }\n      sortedAnnotations.push(data);\n    }\n    if (popupAnnotations.length) {\n      sortedAnnotations.push(...popupAnnotations);\n    }\n\n    for (const data of sortedAnnotations) {\n      const element = AnnotationElementFactory.create({\n        data,\n        layer: parameters.div,\n        page: parameters.page,\n        viewport: parameters.viewport,\n        linkService: parameters.linkService,\n        downloadManager: parameters.downloadManager,\n        imageResourcesPath: parameters.imageResourcesPath || \"\",\n        renderForms: parameters.renderForms !== false,\n        svgFactory: new DOMSVGFactory(),\n        annotationStorage:\n          parameters.annotationStorage || new AnnotationStorage(),\n        enableScripting: parameters.enableScripting,\n        hasJSActions: parameters.hasJSActions,\n        fieldObjects: parameters.fieldObjects,\n        mouseState: parameters.mouseState || { isDown: false },\n      });\n      if (element.isRenderable) {\n        const rendered = element.render();\n        if (data.hidden) {\n          rendered.style.visibility = \"hidden\";\n        }\n        if (Array.isArray(rendered)) {\n          for (const renderedElement of rendered) {\n            parameters.div.appendChild(renderedElement);\n          }\n        } else {\n          if (element instanceof PopupAnnotationElement) {\n            // Popup annotation elements should not be on top of other\n            // annotation elements to prevent interfering with mouse events.\n            parameters.div.prepend(rendered);\n          } else {\n            parameters.div.appendChild(rendered);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    for (const data of parameters.annotations) {\n      const elements = parameters.div.querySelectorAll(\n        `[data-annotation-id=\"${data.id}\"]`\n      );\n      if (elements) {\n        for (const element of elements) {\n          element.style.transform = transform;\n        }\n      }\n    }\n    parameters.div.hidden = false;\n  }\n}\n\nexport { AnnotationLayer };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_HTML([r, g, b]) {\n    const R = makeColorComp(r);\n    const G = makeColorComp(g);\n    const B = makeColorComp(b);\n    return `#${R}${G}${B}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    return this.RGB_HTML(this.CMYK_RGB(components));\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  createPromiseCapability,\n  Util,\n} from \"../shared/util.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {import(\"./api\").TextContent} [textContent] - Text content to\n *   render (the object is returned by the page's `getTextContent` method).\n * @property {ReadableStream} [textContentStream] - Text content stream to\n *   render (the stream is returned by the page's `streamTextContent` method).\n * @property {HTMLElement} container - HTML element that will contain text runs.\n * @property {import(\"./display_utils\").PageViewport} viewport - The target\n *   viewport to properly layout the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that are correspond\n *   to the text items of the textContent input. This is output and shall be\n *   initially be set to empty array.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *    the `str` property of the text items of textContent input. This is output\n *   and shall be initially be set to empty array.\n * @property {number} [timeout] - Delay in milliseconds before rendering of the\n *   text runs occurs.\n * @property {boolean} [enhanceTextSelection] - Whether to turn on the text\n *   selection enhancement.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\nconst AllWhitespaceRegexp = /^\\s+$/g;\n\nfunction getAscent(fontFamily, ctx) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  ctx.save();\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    ctx.restore();\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.restore();\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles, ctx) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = task._enhanceTextSelection\n    ? {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n        originalTransform: null,\n        paddingBottom: 0,\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        scale: 1,\n      }\n    : {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n      };\n\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._viewport.transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  textDiv.style.left = `${left}px`;\n  textDiv.style.top = `${top}px`;\n  textDiv.style.fontSize = `${fontHeight}px`;\n  textDiv.style.fontFamily = style.fontFamily;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (\n    geom.str.length > 1 ||\n    (task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str))\n  ) {\n    shouldScaleText = true;\n  } else if (geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    if (style.vertical) {\n      textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n    } else {\n      textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n    }\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._textContentStream) {\n    task._layoutText(textDiv);\n  }\n\n  if (task._enhanceTextSelection && textDivProperties.hasText) {\n    let angleCos = 1,\n      angleSin = 0;\n    if (angle !== 0) {\n      angleCos = Math.cos(angle);\n      angleSin = Math.sin(angle);\n    }\n    const divWidth =\n      (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n    const divHeight = fontHeight;\n\n    let m, b;\n    if (angle !== 0) {\n      m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n      b = Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n    } else {\n      b = [left, top, left + divWidth, top + divHeight];\n    }\n\n    task._bounds.push({\n      left: b[0],\n      top: b[1],\n      right: b[2],\n      bottom: b[3],\n      div: textDiv,\n      size: [divWidth, divHeight],\n      m,\n    });\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    task._renderingDone = true;\n    capability.resolve();\n    return;\n  }\n\n  if (!task._textContentStream) {\n    for (let i = 0; i < textDivsLength; i++) {\n      task._layoutText(textDivs[i]);\n    }\n  }\n\n  task._renderingDone = true;\n  capability.resolve();\n}\n\nfunction findPositiveMin(ts, offset, count) {\n  let result = 0;\n  for (let i = 0; i < count; i++) {\n    const t = ts[offset++];\n    if (t > 0) {\n      result = result ? Math.min(t, result) : t;\n    }\n  }\n  return result;\n}\n\nfunction expand(task) {\n  const bounds = task._bounds;\n  const viewport = task._viewport;\n\n  const expanded = expandBounds(viewport.width, viewport.height, bounds);\n  for (let i = 0; i < expanded.length; i++) {\n    const div = bounds[i].div;\n    const divProperties = task._textDivProperties.get(div);\n    if (divProperties.angle === 0) {\n      divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n      divProperties.paddingTop = bounds[i].top - expanded[i].top;\n      divProperties.paddingRight = expanded[i].right - bounds[i].right;\n      divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n      task._textDivProperties.set(div, divProperties);\n      continue;\n    }\n    // Box is rotated -- trying to find padding so rotated div will not\n    // exceed its expanded bounds.\n    const e = expanded[i],\n      b = bounds[i];\n    const m = b.m,\n      c = m[0],\n      s = m[1];\n    // Finding intersections with expanded box.\n    const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n    const ts = new Float64Array(64);\n    for (let j = 0, jj = points.length; j < jj; j++) {\n      const t = Util.applyTransform(points[j], m);\n      ts[j + 0] = c && (e.left - t[0]) / c;\n      ts[j + 4] = s && (e.top - t[1]) / s;\n      ts[j + 8] = c && (e.right - t[0]) / c;\n      ts[j + 12] = s && (e.bottom - t[1]) / s;\n\n      ts[j + 16] = s && (e.left - t[0]) / -s;\n      ts[j + 20] = c && (e.top - t[1]) / c;\n      ts[j + 24] = s && (e.right - t[0]) / -s;\n      ts[j + 28] = c && (e.bottom - t[1]) / c;\n\n      ts[j + 32] = c && (e.left - t[0]) / -c;\n      ts[j + 36] = s && (e.top - t[1]) / -s;\n      ts[j + 40] = c && (e.right - t[0]) / -c;\n      ts[j + 44] = s && (e.bottom - t[1]) / -s;\n\n      ts[j + 48] = s && (e.left - t[0]) / s;\n      ts[j + 52] = c && (e.top - t[1]) / -c;\n      ts[j + 56] = s && (e.right - t[0]) / s;\n      ts[j + 60] = c && (e.bottom - t[1]) / -c;\n    }\n    // Not based on math, but to simplify calculations, using cos and sin\n    // absolute values to not exceed the box (it can but insignificantly).\n    const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n    divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n    divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n    divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n    divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n    task._textDivProperties.set(div, divProperties);\n  }\n}\n\nfunction expandBounds(width, height, boxes) {\n  const bounds = boxes.map(function (box, i) {\n    return {\n      x1: box.left,\n      y1: box.top,\n      x2: box.right,\n      y2: box.bottom,\n      index: i,\n      x1New: undefined,\n      x2New: undefined,\n    };\n  });\n  expandBoundsLTR(width, bounds);\n\n  const expanded = new Array(boxes.length);\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i] = {\n      left: b.x1New,\n      top: 0,\n      right: b.x2New,\n      bottom: 0,\n    };\n  }\n\n  // Rotating on 90 degrees and extending extended boxes. Reusing the bounds\n  // array and objects.\n  boxes.map(function (box, i) {\n    const e = expanded[i],\n      b = bounds[i];\n    b.x1 = box.top;\n    b.y1 = width - e.right;\n    b.x2 = box.bottom;\n    b.y2 = width - e.left;\n    b.index = i;\n    b.x1New = undefined;\n    b.x2New = undefined;\n  });\n  expandBoundsLTR(height, bounds);\n\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i].top = b.x1New;\n    expanded[i].bottom = b.x2New;\n  }\n  return expanded;\n}\n\nfunction expandBoundsLTR(width, bounds) {\n  // Sorting by x1 coordinate and walk by the bounds in the same order.\n  bounds.sort(function (a, b) {\n    return a.x1 - b.x1 || a.index - b.index;\n  });\n\n  // First we see on the horizon is a fake boundary.\n  const fakeBoundary = {\n    x1: -Infinity,\n    y1: -Infinity,\n    x2: 0,\n    y2: Infinity,\n    index: -1,\n    x1New: 0,\n    x2New: 0,\n  };\n  const horizon = [\n    {\n      start: -Infinity,\n      end: Infinity,\n      boundary: fakeBoundary,\n    },\n  ];\n\n  for (const boundary of bounds) {\n    // Searching for the affected part of horizon.\n    // TODO red-black tree or simple binary search\n    let i = 0;\n    while (i < horizon.length && horizon[i].end <= boundary.y1) {\n      i++;\n    }\n    let j = horizon.length - 1;\n    while (j >= 0 && horizon[j].start >= boundary.y2) {\n      j--;\n    }\n\n    let horizonPart, affectedBoundary;\n    let q,\n      k,\n      maxXNew = -Infinity;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      let xNew;\n      if (affectedBoundary.x2 > boundary.x1) {\n        // In the middle of the previous element, new x shall be at the\n        // boundary start. Extending if further if the affected boundary\n        // placed on top of the current one.\n        xNew =\n          affectedBoundary.index > boundary.index\n            ? affectedBoundary.x1New\n            : boundary.x1;\n      } else if (affectedBoundary.x2New === undefined) {\n        // We have some space in between, new x in middle will be a fair\n        // choice.\n        xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n      } else {\n        // Affected boundary has x2new set, using it as new x.\n        xNew = affectedBoundary.x2New;\n      }\n      if (xNew > maxXNew) {\n        maxXNew = xNew;\n      }\n    }\n\n    // Set new x1 for current boundary.\n    boundary.x1New = maxXNew;\n\n    // Adjusts new x2 for the affected boundaries.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New === undefined) {\n        // Was not set yet, choosing new x if possible.\n        if (affectedBoundary.x2 > boundary.x1) {\n          // Current and affected boundaries intersect. If affected boundary\n          // is placed on top of the current, shrinking the affected.\n          if (affectedBoundary.index > boundary.index) {\n            affectedBoundary.x2New = affectedBoundary.x2;\n          }\n        } else {\n          affectedBoundary.x2New = maxXNew;\n        }\n      } else if (affectedBoundary.x2New > maxXNew) {\n        // Affected boundary is touching new x, pushing it back.\n        affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n      }\n    }\n\n    // Fixing the horizon.\n    const changedHorizon = [];\n    let lastBoundary = null;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      // Checking which boundary will be visible.\n      const useBoundary =\n        affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n      if (lastBoundary === useBoundary) {\n        // Merging with previous.\n        changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n      } else {\n        changedHorizon.push({\n          start: horizonPart.start,\n          end: horizonPart.end,\n          boundary: useBoundary,\n        });\n        lastBoundary = useBoundary;\n      }\n    }\n    if (horizon[i].start < boundary.y1) {\n      changedHorizon[0].start = boundary.y1;\n      changedHorizon.unshift({\n        start: horizon[i].start,\n        end: boundary.y1,\n        boundary: horizon[i].boundary,\n      });\n    }\n    if (boundary.y2 < horizon[j].end) {\n      changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n      changedHorizon.push({\n        start: boundary.y2,\n        end: horizon[j].end,\n        boundary: horizon[j].boundary,\n      });\n    }\n\n    // Set x2 new of boundary that is no longer visible (see overlapping case\n    // above).\n    // TODO more efficient, e.g. via reference counting.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New !== undefined) {\n        continue;\n      }\n      let used = false;\n      for (\n        k = i - 1;\n        !used && k >= 0 && horizon[k].start >= affectedBoundary.y1;\n        k--\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (\n        k = j + 1;\n        !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2;\n        k++\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (k = 0; !used && k < changedHorizon.length; k++) {\n        used = changedHorizon[k].boundary === affectedBoundary;\n      }\n      if (!used) {\n        affectedBoundary.x2New = maxXNew;\n      }\n    }\n\n    Array.prototype.splice.apply(\n      horizon,\n      [i, j - i + 1].concat(changedHorizon)\n    );\n  }\n\n  // Set new x2 for all unset boundaries.\n  for (const horizonPart of horizon) {\n    const affectedBoundary = horizonPart.boundary;\n    if (affectedBoundary.x2New === undefined) {\n      affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n    }\n  }\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContent,\n    textContentStream,\n    container,\n    viewport,\n    textDivs,\n    textContentItemsStr,\n    enhanceTextSelection,\n  }) {\n    this._textContent = textContent;\n    this._textContentStream = textContentStream;\n    this._container = container;\n    this._document = container.ownerDocument;\n    this._viewport = viewport;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._enhanceTextSelection = !!enhanceTextSelection;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._layoutTextLastFontSize = null;\n    this._layoutTextLastFontFamily = null;\n    this._layoutTextCtx = null;\n    this._textDivProperties = new WeakMap();\n    this._renderingDone = false;\n    this._canceled = false;\n    this._capability = createPromiseCapability();\n    this._renderTimer = null;\n    this._bounds = [];\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        if (!this._enhanceTextSelection) {\n          // The `textDiv` properties are no longer needed.\n          this._textDivProperties = null;\n        }\n\n        if (this._layoutTextCtx) {\n          // Zeroing the width and height cause Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      })\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader\n        .cancel(new AbortException(\"TextLayer task cancelled.\"))\n        .catch(() => {\n          // Avoid \"Uncaught promise\" messages in the console.\n        });\n      this._reader = null;\n    }\n    if (this._renderTimer !== null) {\n      clearTimeout(this._renderTimer);\n      this._renderTimer = null;\n    }\n    this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i].str === undefined) {\n        if (\n          items[i].type === \"beginMarkedContentProps\" ||\n          items[i].type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (items[i].id !== null) {\n            this._container.setAttribute(\"id\", `${items[i].id}`);\n          }\n          parent.appendChild(this._container);\n        } else if (items[i].type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(items[i].str);\n      appendText(this, items[i], styleCache, this._layoutTextCtx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = this._textDivProperties.get(textDiv);\n\n    let transform = \"\";\n    if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n      const { fontSize, fontFamily } = textDiv.style;\n\n      // Only build font string and set to context if different from last.\n      if (\n        fontSize !== this._layoutTextLastFontSize ||\n        fontFamily !== this._layoutTextLastFontFamily\n      ) {\n        this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n        this._layoutTextLastFontSize = fontSize;\n        this._layoutTextLastFontFamily = fontFamily;\n      }\n      // Only measure the width for multi-char text divs, see `appendText`.\n      const { width } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n      if (width > 0) {\n        const scale = textDivProperties.canvasWidth / width;\n        if (this._enhanceTextSelection) {\n          textDivProperties.scale = scale;\n        }\n        transform = `scaleX(${scale})`;\n      }\n    }\n    if (textDivProperties.angle !== 0) {\n      transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n    }\n    if (transform.length > 0) {\n      if (this._enhanceTextSelection) {\n        textDivProperties.originalTransform = transform;\n      }\n      textDiv.style.transform = transform;\n    }\n\n    if (textDivProperties.hasText) {\n      this._container.appendChild(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.appendChild(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render(timeout = 0) {\n    const capability = createPromiseCapability();\n    let styleCache = Object.create(null);\n\n    // The temporary canvas is used to measure text length in the DOM.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n    ) {\n      canvas.mozOpaque = true;\n    }\n    this._layoutTextCtx = canvas.getContext(\"2d\", { alpha: false });\n\n    if (this._textContent) {\n      const textItems = this._textContent.items;\n      const textStyles = this._textContent.styles;\n      this._processItems(textItems, textStyles);\n      capability.resolve();\n    } else if (this._textContentStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentStream.getReader();\n      pump();\n    } else {\n      throw new Error(\n        'Neither \"textContent\" nor \"textContentStream\" parameters specified.'\n      );\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      if (!timeout) {\n        // Render right away\n        render(this);\n      } else {\n        // Schedule\n        this._renderTimer = setTimeout(() => {\n          render(this);\n          this._renderTimer = null;\n        }, timeout);\n      }\n    }, this._capability.reject);\n  }\n\n  /**\n   * @param {boolean} [expandDivs]\n   */\n  expandTextDivs(expandDivs = false) {\n    if (!this._enhanceTextSelection || !this._renderingDone) {\n      return;\n    }\n    if (this._bounds !== null) {\n      expand(this);\n      this._bounds = null;\n    }\n    const transformBuf = [],\n      paddingBuf = [];\n\n    for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n      const div = this._textDivs[i];\n      const divProps = this._textDivProperties.get(div);\n\n      if (!divProps.hasText) {\n        continue;\n      }\n      if (expandDivs) {\n        transformBuf.length = 0;\n        paddingBuf.length = 0;\n\n        if (divProps.originalTransform) {\n          transformBuf.push(divProps.originalTransform);\n        }\n        if (divProps.paddingTop > 0) {\n          paddingBuf.push(`${divProps.paddingTop}px`);\n          transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingRight > 0) {\n          paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingBottom > 0) {\n          paddingBuf.push(`${divProps.paddingBottom}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingLeft > 0) {\n          paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n          transformBuf.push(\n            `translateX(${-divProps.paddingLeft / divProps.scale}px)`\n          );\n        } else {\n          paddingBuf.push(0);\n        }\n\n        div.style.padding = paddingBuf.join(\" \");\n        if (transformBuf.length) {\n          div.style.transform = transformBuf.join(\" \");\n        }\n      } else {\n        div.style.padding = null;\n        div.style.transform = divProps.originalTransform;\n      }\n    }\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} renderParameters\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(renderParameters) {\n  const task = new TextLayerRenderTask({\n    textContent: renderParameters.textContent,\n    textContentStream: renderParameters.textContentStream,\n    container: renderParameters.container,\n    viewport: renderParameters.viewport,\n    textDivs: renderParameters.textDivs,\n    textContentItemsStr: renderParameters.textContentItemsStr,\n    enhanceTextSelection: renderParameters.enhanceTextSelection,\n  });\n  task._render(renderParameters.timeout);\n  return task;\n}\n\nexport { renderTextLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  createObjectURL,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNum,\n  OPS,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { DOMSVGFactory } from \"./display_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n/** @type {any} */\nlet SVGGraphics = class {\n  constructor() {\n    unreachable(\"Not implemented: SVGGraphics\");\n  }\n};\n\nif (\n  typeof PDFJSDev === \"undefined\" ||\n  PDFJSDev.test(\"!PRODUCTION || GENERIC\")\n) {\n  const SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\",\n  };\n  const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  const convertImgDataToPng = (function () {\n    const PNG_HEADER = new Uint8Array([\n      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n    ]);\n    const CHUNK_WRAPPER_SIZE = 12;\n\n    const crcTable = new Int32Array(256);\n    for (let i = 0; i < 256; i++) {\n      let c = i;\n      for (let h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ ((c >> 1) & 0x7fffffff);\n        } else {\n          c = (c >> 1) & 0x7fffffff;\n        }\n      }\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      let crc = -1;\n      for (let i = start; i < end; i++) {\n        const a = (crc ^ data[i]) & 0xff;\n        const b = crcTable[a];\n        crc = (crc >>> 8) ^ b;\n      }\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      let p = offset;\n      const len = body.length;\n\n      data[p] = (len >> 24) & 0xff;\n      data[p + 1] = (len >> 16) & 0xff;\n      data[p + 2] = (len >> 8) & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n\n      data.set(body, p);\n      p += body.length;\n\n      const crc = crc32(data, offset + 4, p);\n      data[p] = (crc >> 24) & 0xff;\n      data[p + 1] = (crc >> 16) & 0xff;\n      data[p + 2] = (crc >> 8) & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      let a = 1;\n      let b = 0;\n      for (let i = start; i < end; ++i) {\n        a = (a + (data[i] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n      return (b << 16) | a;\n    }\n\n    /**\n     * @param {Uint8Array} literals The input data.\n     * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n     *   This is the required format for compressed streams in the PNG format:\n     *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n     */\n    function deflateSync(literals) {\n      if (!isNodeJS) {\n        // zlib is certainly not available outside of Node.js. We can either use\n        // the pako library for client-side DEFLATE compression, or use the\n        // canvas API of the browser to obtain a more optimal PNG file.\n        return deflateSyncUncompressed(literals);\n      }\n      try {\n        // NOTE: This implementation is far from perfect, but already way better\n        // than not applying any compression.\n        //\n        // A better algorithm will try to choose a good predictor/filter and\n        // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n        //\n        // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n        // Node v3.0.0   Buffer inherits from Uint8Array.\n        // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n        let input;\n        // eslint-disable-next-line no-undef\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          // eslint-disable-next-line no-undef\n          input = Buffer.from(literals);\n        }\n        const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n          level: 9,\n        });\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        warn(\n          \"Not compressing PNG because zlib.deflateSync is unavailable: \" + e\n        );\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n    function deflateSyncUncompressed(literals) {\n      let len = literals.length;\n      const maxBlockLength = 0xffff;\n\n      const deflateBlocks = Math.ceil(len / maxBlockLength);\n      const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      let pi = 0;\n      idat[pi++] = 0x78; // compression method and flags\n      idat[pi++] = 0x9c; // flags\n\n      let pos = 0;\n      while (len > maxBlockLength) {\n        // writing non-final DEFLATE blocks type 0 and length of 65535\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      // writing non-final DEFLATE blocks type 0\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = (len >> 8) & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n\n      const adler = adler32(literals, 0, literals.length); // checksum\n      idat[pi++] = (adler >> 24) & 0xff;\n      idat[pi++] = (adler >> 16) & 0xff;\n      idat[pi++] = (adler >> 8) & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      const width = imgData.width;\n      const height = imgData.height;\n      let bitDepth, colorType, lineSize;\n      const bytes = imgData.data;\n\n      switch (kind) {\n        case ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = (width + 7) >> 3;\n          break;\n        case ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n        case ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      // prefix every row with predictor 0\n      const literals = new Uint8Array((1 + lineSize) * height);\n      let offsetLiterals = 0,\n        offsetBytes = 0;\n      for (let y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0; // no prediction\n        literals.set(\n          bytes.subarray(offsetBytes, offsetBytes + lineSize),\n          offsetLiterals\n        );\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n        // inverting for image masks\n        offsetLiterals = 0;\n        for (let y = 0; y < height; y++) {\n          offsetLiterals++; // skipping predictor\n          for (let i = 0; i < lineSize; i++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      const ihdr = new Uint8Array([\n        (width >> 24) & 0xff,\n        (width >> 16) & 0xff,\n        (width >> 8) & 0xff,\n        width & 0xff,\n        (height >> 24) & 0xff,\n        (height >> 16) & 0xff,\n        (height >> 8) & 0xff,\n        height & 0xff,\n        bitDepth, // bit depth\n        colorType, // color type\n        0x00, // compression method\n        0x00, // filter method\n        0x00, // interlace method\n      ]);\n      const idat = deflateSync(literals);\n\n      // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n      const pngLength =\n        PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      const data = new Uint8Array(pngLength);\n      let offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n      return createObjectURL(data, \"image/png\", forceDataSchema);\n    }\n\n    // eslint-disable-next-line no-shadow\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      const kind =\n        imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  })();\n\n  class SVGExtraState {\n    constructor() {\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n\n      this.textMatrix = IDENTITY_MATRIX;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n\n      // Current point (in user coordinates)\n      this.x = 0;\n      this.y = 0;\n\n      // Start of text line (in text coordinates)\n      this.lineX = 0;\n      this.lineY = 0;\n\n      // Character and word spacing\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n\n      // Default foreground and background colors\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n\n      this.dashArray = [];\n      this.dashPhase = 0;\n\n      this.dependencies = [];\n\n      // Clipping\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n\n      this.maskId = \"\";\n    }\n\n    clone() {\n      return Object.create(this);\n    }\n\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function opListToTree(opList) {\n    let opTree = [];\n    const tmp = [];\n\n    for (const opListElement of opList) {\n      if (opListElement.fn === \"save\") {\n        opTree.push({ fnId: 92, fn: \"group\", items: [] });\n        tmp.push(opTree);\n        opTree = opTree[opTree.length - 1].items;\n        continue;\n      }\n\n      if (opListElement.fn === \"restore\") {\n        opTree = tmp.pop();\n      } else {\n        opTree.push(opListElement);\n      }\n    }\n    return opTree;\n  }\n\n  /**\n   * Format a float number as a string.\n   *\n   * @param value {number} - The float number to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n    const s = value.toFixed(10);\n    let i = s.length - 1;\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    // Remove trailing zeros.\n    do {\n      i--;\n    } while (s[i] === \"0\");\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  }\n\n  /**\n   * Format a transform matrix as a string. The standard rotation, scale and\n   * translation matrices are replaced by their shorter forms, and for\n   * identity matrices an empty string is returned to save memory.\n   *\n   * @param m {Array} - The transform matrix to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n        return `scale(${pf(m[0])} ${pf(m[3])})`;\n      }\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        const a = (Math.acos(m[0]) * 180) / Math.PI;\n        return `rotate(${pf(a)})`;\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return `translate(${pf(m[4])} ${pf(m[5])})`;\n      }\n    }\n    return (\n      `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n      `${pf(m[5])})`\n    );\n  }\n\n  // The counts below are relevant for all pages, so they have to be global\n  // instead of being members of `SVGGraphics` (which is recreated for\n  // each page).\n  let clipCount = 0;\n  let maskCount = 0;\n  let shadingCount = 0;\n\n  SVGGraphics = class {\n    constructor(commonObjs, objs, forceDataSchema = false) {\n      this.svgFactory = new DOMSVGFactory();\n\n      this.current = new SVGExtraState();\n      this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n\n      // In `src/shared/util.js` the operator names are mapped to IDs.\n      // The list below represents the reverse of that, i.e., it maps IDs\n      // to operator names.\n      this._operatorIdMapping = [];\n      for (const op in OPS) {\n        this._operatorIdMapping[OPS[op]] = op;\n      }\n    }\n\n    save() {\n      this.transformStack.push(this.transformMatrix);\n      const old = this.current;\n      this.extraStack.push(old);\n      this.current = old.clone();\n    }\n\n    restore() {\n      this.transformMatrix = this.transformStack.pop();\n      this.current = this.extraStack.pop();\n      this.pendingClip = null;\n      this.tgrp = null;\n    }\n\n    group(items) {\n      this.save();\n      this.executeOpTree(items);\n      this.restore();\n    }\n\n    loadDependencies(operatorList) {\n      const fnArray = operatorList.fnArray;\n      const argsArray = operatorList.argsArray;\n\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        if (fnArray[i] !== OPS.dependency) {\n          continue;\n        }\n\n        for (const obj of argsArray[i]) {\n          const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n          const promise = new Promise(resolve => {\n            objsPool.get(obj, resolve);\n          });\n          this.current.dependencies.push(promise);\n        }\n      }\n      return Promise.all(this.current.dependencies);\n    }\n\n    transform(a, b, c, d, e, f) {\n      const transformMatrix = [a, b, c, d, e, f];\n      this.transformMatrix = Util.transform(\n        this.transformMatrix,\n        transformMatrix\n      );\n      this.tgrp = null;\n    }\n\n    getSVG(operatorList, viewport) {\n      this.viewport = viewport;\n\n      const svgElement = this._initialize(viewport);\n      return this.loadDependencies(operatorList).then(() => {\n        this.transformMatrix = IDENTITY_MATRIX;\n        this.executeOpTree(this.convertOpList(operatorList));\n        return svgElement;\n      });\n    }\n\n    convertOpList(operatorList) {\n      const operatorIdMapping = this._operatorIdMapping;\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      const opList = [];\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        const fnId = fnArray[i];\n        opList.push({\n          fnId,\n          fn: operatorIdMapping[fnId],\n          args: argsArray[i],\n        });\n      }\n      return opListToTree(opList);\n    }\n\n    executeOpTree(opTree) {\n      for (const opTreeElement of opTree) {\n        const fn = opTreeElement.fn;\n        const fnId = opTreeElement.fnId;\n        const args = opTreeElement.args;\n\n        switch (fnId | 0) {\n          case OPS.beginText:\n            this.beginText();\n            break;\n          case OPS.dependency:\n            // Handled in `loadDependencies`, so no warning should be shown.\n            break;\n          case OPS.setLeading:\n            this.setLeading(args);\n            break;\n          case OPS.setLeadingMoveText:\n            this.setLeadingMoveText(args[0], args[1]);\n            break;\n          case OPS.setFont:\n            this.setFont(args);\n            break;\n          case OPS.showText:\n            this.showText(args[0]);\n            break;\n          case OPS.showSpacedText:\n            this.showText(args[0]);\n            break;\n          case OPS.endText:\n            this.endText();\n            break;\n          case OPS.moveText:\n            this.moveText(args[0], args[1]);\n            break;\n          case OPS.setCharSpacing:\n            this.setCharSpacing(args[0]);\n            break;\n          case OPS.setWordSpacing:\n            this.setWordSpacing(args[0]);\n            break;\n          case OPS.setHScale:\n            this.setHScale(args[0]);\n            break;\n          case OPS.setTextMatrix:\n            this.setTextMatrix(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.setTextRise:\n            this.setTextRise(args[0]);\n            break;\n          case OPS.setTextRenderingMode:\n            this.setTextRenderingMode(args[0]);\n            break;\n          case OPS.setLineWidth:\n            this.setLineWidth(args[0]);\n            break;\n          case OPS.setLineJoin:\n            this.setLineJoin(args[0]);\n            break;\n          case OPS.setLineCap:\n            this.setLineCap(args[0]);\n            break;\n          case OPS.setMiterLimit:\n            this.setMiterLimit(args[0]);\n            break;\n          case OPS.setFillRGBColor:\n            this.setFillRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeRGBColor:\n            this.setStrokeRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeColorN:\n            this.setStrokeColorN(args);\n            break;\n          case OPS.setFillColorN:\n            this.setFillColorN(args);\n            break;\n          case OPS.shadingFill:\n            this.shadingFill(args[0]);\n            break;\n          case OPS.setDash:\n            this.setDash(args[0], args[1]);\n            break;\n          case OPS.setRenderingIntent:\n            this.setRenderingIntent(args[0]);\n            break;\n          case OPS.setFlatness:\n            this.setFlatness(args[0]);\n            break;\n          case OPS.setGState:\n            this.setGState(args[0]);\n            break;\n          case OPS.fill:\n            this.fill();\n            break;\n          case OPS.eoFill:\n            this.eoFill();\n            break;\n          case OPS.stroke:\n            this.stroke();\n            break;\n          case OPS.fillStroke:\n            this.fillStroke();\n            break;\n          case OPS.eoFillStroke:\n            this.eoFillStroke();\n            break;\n          case OPS.clip:\n            this.clip(\"nonzero\");\n            break;\n          case OPS.eoClip:\n            this.clip(\"evenodd\");\n            break;\n          case OPS.paintSolidColorImageMask:\n            this.paintSolidColorImageMask();\n            break;\n          case OPS.paintImageXObject:\n            this.paintImageXObject(args[0]);\n            break;\n          case OPS.paintInlineImageXObject:\n            this.paintInlineImageXObject(args[0]);\n            break;\n          case OPS.paintImageMaskXObject:\n            this.paintImageMaskXObject(args[0]);\n            break;\n          case OPS.paintFormXObjectBegin:\n            this.paintFormXObjectBegin(args[0], args[1]);\n            break;\n          case OPS.paintFormXObjectEnd:\n            this.paintFormXObjectEnd();\n            break;\n          case OPS.closePath:\n            this.closePath();\n            break;\n          case OPS.closeStroke:\n            this.closeStroke();\n            break;\n          case OPS.closeFillStroke:\n            this.closeFillStroke();\n            break;\n          case OPS.closeEOFillStroke:\n            this.closeEOFillStroke();\n            break;\n          case OPS.nextLine:\n            this.nextLine();\n            break;\n          case OPS.transform:\n            this.transform(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.constructPath:\n            this.constructPath(args[0], args[1]);\n            break;\n          case OPS.endPath:\n            this.endPath();\n            break;\n          case 92:\n            this.group(opTreeElement.items);\n            break;\n          default:\n            warn(`Unimplemented operator ${fn}`);\n            break;\n        }\n      }\n    }\n\n    setWordSpacing(wordSpacing) {\n      this.current.wordSpacing = wordSpacing;\n    }\n\n    setCharSpacing(charSpacing) {\n      this.current.charSpacing = charSpacing;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      const current = this.current;\n      current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n      current.textMatrixScale = Math.hypot(a, b);\n\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtElement.appendChild(current.tspan);\n    }\n\n    beginText() {\n      const current = this.current;\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n      current.textMatrix = IDENTITY_MATRIX;\n      current.lineMatrix = IDENTITY_MATRIX;\n      current.textMatrixScale = 1;\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    moveText(x, y) {\n      const current = this.current;\n      current.x = current.lineX += x;\n      current.y = current.lineY += y;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return;\n      }\n\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      let x = 0;\n      for (const glyph of glyphs) {\n        if (glyph === null) {\n          // Word break\n          x += fontDirection * wordSpacing;\n          continue;\n        } else if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          let vx;\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n          vx = -vx * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (glyph.isInFont || font.missingFile) {\n          current.xcoords.push(current.x + scaledX);\n          if (vertical) {\n            current.ycoords.push(-current.y + scaledY);\n          }\n          current.tspan.textContent += character;\n        } else {\n          // TODO: To assist with text selection, we should replace the missing\n          // character with a space character if charWidth is not zero.\n          // But we cannot just do \"character = ' '\", because the ' ' character\n          // might actually map to a different glyph.\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n      }\n      current.tspan.setAttributeNS(\n        null,\n        \"x\",\n        current.xcoords.map(pf).join(\" \")\n      );\n      if (vertical) {\n        current.tspan.setAttributeNS(\n          null,\n          \"y\",\n          current.ycoords.map(pf).join(\" \")\n        );\n      } else {\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n        current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n      }\n      if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n        current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n      }\n\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n          current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n        }\n        if (current.fillAlpha < 1) {\n          current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        }\n      } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n        // Workaround for Firefox: We must set fill=\"transparent\" because\n        // fill=\"none\" would generate an empty clipping path.\n        current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n      } else {\n        current.tspan.setAttributeNS(null, \"fill\", \"none\");\n      }\n\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        const lineWidthScale = 1 / (current.textMatrixScale || 1);\n        this._setStrokeAttributes(current.tspan, lineWidthScale);\n      }\n\n      // Include the text rise in the text matrix since the `pm` function\n      // creates the SVG element's `translate` entry (work on a copy to avoid\n      // altering the original text matrix).\n      let textMatrix = current.textMatrix;\n      if (current.textRise !== 0) {\n        textMatrix = textMatrix.slice();\n        textMatrix[5] += current.textRise;\n      }\n\n      current.txtElement.setAttributeNS(\n        null,\n        \"transform\",\n        `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n      );\n      current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n      current.txtElement.appendChild(current.tspan);\n      current.txtgrp.appendChild(current.txtElement);\n\n      this._ensureTransformGroup().appendChild(current.txtElement);\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    addFontStyle(fontObj) {\n      if (!fontObj.data) {\n        throw new Error(\n          \"addFontStyle: No font data available, \" +\n            'ensure that the \"fontExtraProperties\" API parameter is set.'\n        );\n      }\n      if (!this.cssStyle) {\n        this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n        this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n        this.defs.appendChild(this.cssStyle);\n      }\n\n      const url = createObjectURL(\n        fontObj.data,\n        fontObj.mimetype,\n        this.forceDataSchema\n      );\n      this.cssStyle.textContent +=\n        `@font-face { font-family: \"${fontObj.loadedName}\";` +\n        ` src: url(${url}); }\\n`;\n    }\n\n    setFont(details) {\n      const current = this.current;\n      const fontObj = this.commonObjs.get(details[0]);\n      let size = details[1];\n      current.font = fontObj;\n\n      if (\n        this.embedFonts &&\n        !fontObj.missingFile &&\n        !this.embeddedFonts[fontObj.loadedName]\n      ) {\n        this.addFontStyle(fontObj);\n        this.embeddedFonts[fontObj.loadedName] = fontObj;\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      current.fontSize = size;\n      current.fontFamily = fontObj.loadedName;\n      current.fontWeight = bold;\n      current.fontStyle = italic;\n\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    endText() {\n      const current = this.current;\n      if (\n        current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n        current.txtElement?.hasChildNodes()\n      ) {\n        // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n        current.element = current.txtElement;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    // Path properties\n    setLineWidth(width) {\n      if (width > 0) {\n        this.current.lineWidth = width;\n      }\n    }\n\n    setLineCap(style) {\n      this.current.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.current.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.current.miterLimit = limit;\n    }\n\n    setStrokeAlpha(strokeAlpha) {\n      this.current.strokeAlpha = strokeAlpha;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n\n    setFillAlpha(fillAlpha) {\n      this.current.fillAlpha = fillAlpha;\n    }\n\n    setFillRGBColor(r, g, b) {\n      this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      this.current.xcoords = [];\n      this.current.ycoords = [];\n    }\n\n    setStrokeColorN(args) {\n      this.current.strokeColor = this._makeColorN_Pattern(args);\n    }\n\n    setFillColorN(args) {\n      this.current.fillColor = this._makeColorN_Pattern(args);\n    }\n\n    shadingFill(args) {\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const inv = Util.inverseTransform(this.transformMatrix);\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", x0);\n      rect.setAttributeNS(null, \"y\", y0);\n      rect.setAttributeNS(null, \"width\", x1 - x0);\n      rect.setAttributeNS(null, \"height\", y1 - y0);\n      rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n      if (this.current.fillAlpha < 1) {\n        rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n      }\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    /**\n     * @private\n     */\n    _makeColorN_Pattern(args) {\n      if (args[0] === \"TilingPattern\") {\n        return this._makeTilingPattern(args);\n      }\n      return this._makeShadingPattern(args);\n    }\n\n    /**\n     * @private\n     */\n    _makeTilingPattern(args) {\n      const color = args[1];\n      const operatorList = args[2];\n      const matrix = args[3] || IDENTITY_MATRIX;\n      const [x0, y0, x1, y1] = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n      const paintType = args[7];\n\n      const tilingId = `shading${shadingCount++}`;\n      const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n        ...Util.applyTransform([x0, y0], matrix),\n        ...Util.applyTransform([x1, y1], matrix),\n      ]);\n      const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n      const txstep = xstep * xscale;\n      const tystep = ystep * yscale;\n\n      const tiling = this.svgFactory.createElement(\"svg:pattern\");\n      tiling.setAttributeNS(null, \"id\", tilingId);\n      tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n      tiling.setAttributeNS(null, \"width\", txstep);\n      tiling.setAttributeNS(null, \"height\", tystep);\n      tiling.setAttributeNS(null, \"x\", `${tx0}`);\n      tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n      // Save current state.\n      const svg = this.svg;\n      const transformMatrix = this.transformMatrix;\n      const fillColor = this.current.fillColor;\n      const strokeColor = this.current.strokeColor;\n\n      const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n      this.svg = bbox;\n      this.transformMatrix = matrix;\n      if (paintType === 2) {\n        const cssColor = Util.makeHexColor(...color);\n        this.current.fillColor = cssColor;\n        this.current.strokeColor = cssColor;\n      }\n      this.executeOpTree(this.convertOpList(operatorList));\n\n      // Restore saved state.\n      this.svg = svg;\n      this.transformMatrix = transformMatrix;\n      this.current.fillColor = fillColor;\n      this.current.strokeColor = strokeColor;\n\n      tiling.appendChild(bbox.childNodes[0]);\n      this.defs.appendChild(tiling);\n      return `url(#${tilingId})`;\n    }\n\n    /**\n     * @private\n     */\n    _makeShadingPattern(args) {\n      switch (args[0]) {\n        case \"RadialAxial\":\n          const shadingId = `shading${shadingCount++}`;\n          const colorStops = args[3];\n          let gradient;\n\n          switch (args[1]) {\n            case \"axial\":\n              const point0 = args[4];\n              const point1 = args[5];\n              gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"x1\", point0[0]);\n              gradient.setAttributeNS(null, \"y1\", point0[1]);\n              gradient.setAttributeNS(null, \"x2\", point1[0]);\n              gradient.setAttributeNS(null, \"y2\", point1[1]);\n              break;\n            case \"radial\":\n              const focalPoint = args[4];\n              const circlePoint = args[5];\n              const focalRadius = args[6];\n              const circleRadius = args[7];\n              gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n              gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n              gradient.setAttributeNS(null, \"r\", circleRadius);\n              gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n              gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n              gradient.setAttributeNS(null, \"fr\", focalRadius);\n              break;\n            default:\n              throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n          }\n          for (const colorStop of colorStops) {\n            const stop = this.svgFactory.createElement(\"svg:stop\");\n            stop.setAttributeNS(null, \"offset\", colorStop[0]);\n            stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n            gradient.appendChild(stop);\n          }\n          this.defs.appendChild(gradient);\n          return `url(#${shadingId})`;\n        case \"Mesh\":\n          warn(\"Unimplemented pattern Mesh\");\n          return null;\n        case \"Dummy\":\n          return \"hotpink\";\n        default:\n          throw new Error(`Unknown IR type: ${args[0]}`);\n      }\n    }\n\n    setDash(dashArray, dashPhase) {\n      this.current.dashArray = dashArray;\n      this.current.dashPhase = dashPhase;\n    }\n\n    constructPath(ops, args) {\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let d = [];\n      let j = 0;\n\n      for (const op of ops) {\n        switch (op | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            d.push(\n              \"M\",\n              pf(x),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(yh),\n              \"L\",\n              pf(x),\n              pf(yh),\n              \"Z\"\n            );\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"M\", pf(x), pf(y));\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"L\", pf(x), pf(y));\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3]),\n              pf(x),\n              pf(y)\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            d.push(\n              \"C\",\n              pf(x),\n              pf(y),\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3])\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(x),\n              pf(y),\n              pf(x),\n              pf(y)\n            );\n            j += 4;\n            break;\n          case OPS.closePath:\n            d.push(\"Z\");\n            break;\n        }\n      }\n\n      d = d.join(\" \");\n\n      if (\n        current.path &&\n        ops.length > 0 &&\n        ops[0] !== OPS.rectangle &&\n        ops[0] !== OPS.moveTo\n      ) {\n        // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n        // probably been divided into two OPS.constructPath operators by\n        // OperatorList. Append the commands to the previous path element.\n        d = current.path.getAttributeNS(null, \"d\") + d;\n      } else {\n        current.path = this.svgFactory.createElement(\"svg:path\");\n        this._ensureTransformGroup().appendChild(current.path);\n      }\n\n      current.path.setAttributeNS(null, \"d\", d);\n      current.path.setAttributeNS(null, \"fill\", \"none\");\n\n      // Saving a reference in current.element so that it can be addressed\n      // in 'fill' and 'stroke'\n      current.element = current.path;\n      current.setCurrentPoint(x, y);\n    }\n\n    endPath() {\n      const current = this.current;\n\n      // Painting operators end a path.\n      current.path = null;\n\n      if (!this.pendingClip) {\n        return;\n      }\n      if (!current.element) {\n        this.pendingClip = null;\n        return;\n      }\n\n      // Add the current path to a clipping path.\n      const clipId = `clippath${clipCount++}`;\n      const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n      clipPath.setAttributeNS(null, \"id\", clipId);\n      clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n      // A deep clone is needed when text is used as a clipping path.\n      const clipElement = current.element.cloneNode(true);\n      if (this.pendingClip === \"evenodd\") {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n      } else {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n      }\n      this.pendingClip = null;\n      clipPath.appendChild(clipElement);\n      this.defs.appendChild(clipPath);\n\n      if (current.activeClipUrl) {\n        // The previous clipping group content can go out of order -- resetting\n        // cached clipGroups.\n        current.clipGroup = null;\n        for (const prev of this.extraStack) {\n          prev.clipGroup = null;\n        }\n        // Intersect with the previous clipping path.\n        clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n      }\n      current.activeClipUrl = `url(#${clipId})`;\n\n      this.tgrp = null;\n    }\n\n    clip(type) {\n      this.pendingClip = type;\n    }\n\n    closePath() {\n      const current = this.current;\n      if (current.path) {\n        const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n        current.path.setAttributeNS(null, \"d\", d);\n      }\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setTextRise(textRise) {\n      this.current.textRise = textRise;\n    }\n\n    setTextRenderingMode(textRenderingMode) {\n      this.current.textRenderingMode = textRenderingMode;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value);\n            break;\n          case \"CA\":\n            this.setStrokeAlpha(value);\n            break;\n          case \"ca\":\n            this.setFillAlpha(value);\n            break;\n          default:\n            warn(`Unimplemented graphic state operator ${key}`);\n            break;\n        }\n      }\n    }\n\n    fill() {\n      const current = this.current;\n      if (current.element) {\n        current.element.setAttributeNS(null, \"fill\", current.fillColor);\n        current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        this.endPath();\n      }\n    }\n\n    stroke() {\n      const current = this.current;\n      if (current.element) {\n        this._setStrokeAttributes(current.element);\n        current.element.setAttributeNS(null, \"fill\", \"none\");\n        this.endPath();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setStrokeAttributes(element, lineWidthScale = 1) {\n      const current = this.current;\n      let dashArray = current.dashArray;\n      if (lineWidthScale !== 1 && dashArray.length > 0) {\n        dashArray = dashArray.map(function (value) {\n          return lineWidthScale * value;\n        });\n      }\n      element.setAttributeNS(null, \"stroke\", current.strokeColor);\n      element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n      element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n      element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n      element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n      element.setAttributeNS(\n        null,\n        \"stroke-width\",\n        pf(lineWidthScale * current.lineWidth) + \"px\"\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dasharray\",\n        dashArray.map(pf).join(\" \")\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dashoffset\",\n        pf(lineWidthScale * current.dashPhase) + \"px\"\n      );\n    }\n\n    eoFill() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fill();\n    }\n\n    fillStroke() {\n      // Order is important since stroke wants fill to be none.\n      // First stroke, then if fill needed, it will be overwritten.\n      this.stroke();\n      this.fill();\n    }\n\n    eoFillStroke() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fillStroke();\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.closePath();\n      this.eoFillStroke();\n    }\n\n    paintSolidColorImageMask() {\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", \"1px\");\n      rect.setAttributeNS(null, \"height\", \"1px\");\n      rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    paintImageXObject(objId) {\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(`Dependent image with object ID ${objId} is not ready yet`);\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintInlineImageXObject(imgData, mask) {\n      const width = imgData.width;\n      const height = imgData.height;\n\n      const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", \"0\");\n      cliprect.setAttributeNS(null, \"y\", \"0\");\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n\n      const imgEl = this.svgFactory.createElement(\"svg:image\");\n      imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n      imgEl.setAttributeNS(null, \"x\", \"0\");\n      imgEl.setAttributeNS(null, \"y\", pf(-height));\n      imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n      imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n      imgEl.setAttributeNS(\n        null,\n        \"transform\",\n        `scale(${pf(1 / width)} ${pf(-1 / height)})`\n      );\n      if (mask) {\n        mask.appendChild(imgEl);\n      } else {\n        this._ensureTransformGroup().appendChild(imgEl);\n      }\n    }\n\n    paintImageMaskXObject(imgData) {\n      const current = this.current;\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = current.fillColor;\n\n      current.maskId = `mask${maskCount++}`;\n      const mask = this.svgFactory.createElement(\"svg:mask\");\n      mask.setAttributeNS(null, \"id\", current.maskId);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", pf(width));\n      rect.setAttributeNS(null, \"height\", pf(height));\n      rect.setAttributeNS(null, \"fill\", fillColor);\n      rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n      this.defs.appendChild(mask);\n      this._ensureTransformGroup().appendChild(rect);\n\n      this.paintInlineImageXObject(imgData, mask);\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform(\n          matrix[0],\n          matrix[1],\n          matrix[2],\n          matrix[3],\n          matrix[4],\n          matrix[5]\n        );\n      }\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", bbox[0]);\n        cliprect.setAttributeNS(null, \"y\", bbox[1]);\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {}\n\n    /**\n     * @private\n     */\n    _initialize(viewport) {\n      const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n      // Create the definitions element.\n      const definitions = this.svgFactory.createElement(\"svg:defs\");\n      svg.appendChild(definitions);\n      this.defs = definitions;\n\n      // Create the root group element, which acts a container for all other\n      // groups and applies the viewport transform.\n      const rootGroup = this.svgFactory.createElement(\"svg:g\");\n      rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n      svg.appendChild(rootGroup);\n\n      // For the construction of the SVG image we are only interested in the\n      // root group, so we expose it as the entry point of the SVG image for\n      // the other code in this class.\n      this.svg = rootGroup;\n\n      return svg;\n    }\n\n    /**\n     * @private\n     */\n    _ensureClipGroup() {\n      if (!this.current.clipGroup) {\n        const clipGroup = this.svgFactory.createElement(\"svg:g\");\n        clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n        this.svg.appendChild(clipGroup);\n        this.current.clipGroup = clipGroup;\n      }\n      return this.current.clipGroup;\n    }\n\n    /**\n     * @private\n     */\n    _ensureTransformGroup() {\n      if (!this.tgrp) {\n        this.tgrp = this.svgFactory.createElement(\"svg:g\");\n        this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        if (this.current.activeClipUrl) {\n          this._ensureClipGroup().appendChild(this.tgrp);\n        } else {\n          this.svg.appendChild(this.tgrp);\n        }\n      }\n      return this.tgrp;\n    }\n  };\n}\n\nexport { SVGGraphics };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { warn } from \"../shared/util.js\";\nimport { XfaText } from \"./xfa_text.js\";\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            // The checked attribute may have been set when opening the file,\n            // unset through the UI and we're here because of printing.\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked\n                ? event.target.getAttribute(\"xfaOn\")\n                : event.target.getAttribute(\"xfaOff\"),\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes({ html, element, storage = null, intent, linkService }) {\n    const { attributes } = element;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      // We don't need to add dataId in the html object but it can\n      // be useful to know its value when writing printing tests:\n      // in this case, don't skip dataId to have its value.\n      if (value === null || value === undefined || key === \"dataId\") {\n        continue;\n      }\n\n      if (key !== \"style\") {\n        if (key === \"textContent\") {\n          html.textContent = value;\n        } else if (key === \"class\") {\n          html.setAttribute(key, value.join(\" \"));\n        } else {\n          if (isHTMLAnchorElement && (key === \"href\" || key === \"newWindow\")) {\n            continue; // Handled below.\n          }\n          html.setAttribute(key, value);\n        }\n      } else {\n        Object.assign(html.style, value);\n      }\n    }\n\n    if (isHTMLAnchorElement) {\n      if (\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        !linkService.addLinkAttributes\n      ) {\n        warn(\n          \"XfaLayer.setAttribute - missing `addLinkAttributes`-method on the `linkService`-instance.\"\n        );\n      }\n      linkService.addLinkAttributes?.(\n        html,\n        attributes.href,\n        attributes.newWindow\n      );\n    }\n\n    // Set the value after the others to be sure overwrite\n    // any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfa;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService,\n      });\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.appendChild(rootHtml);\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    rootDiv.style.transform = transform;\n\n    // Set defaults.\n    rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n\n    // Text nodes used for the text highlighter.\n    const textDivs = [];\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack[stack.length - 1];\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack[stack.length - 1][1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.appendChild(node);\n        continue;\n      }\n\n      let childHtml;\n      if (child?.attributes?.xmlns) {\n        childHtml = document.createElementNS(child.attributes.xmlns, name);\n      } else {\n        childHtml = document.createElement(name);\n      }\n\n      html.appendChild(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService,\n        });\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.appendChild(node);\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n\n    return {\n      textDivs,\n    };\n  }\n\n  /**\n   * Update the xfa layer.\n   *\n   * @public\n   * @param {XfaLayerParameters} parameters\n   * @memberof XfaLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fs = __non_webpack_require__(\"fs\");\nconst http = __non_webpack_require__(\"http\");\nconst https = __non_webpack_require__(\"https\");\nconst url = __non_webpack_require__(\"url\");\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    this._headersCapability = createPromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  assert(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Support UTF-8 decoding when TextDecoder is unsupported.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch (e) {\n        // TextDecoder constructor threw - unrecognized encoding.\n        // Or TextDecoder API is not available (in IE / Edge).\n        if (/^utf-?8$/i.test(encoding)) {\n          // UTF-8 is commonly used, try to support it in another way:\n          try {\n            value = decodeURIComponent(escape(value));\n            needsEncodingFixup = false;\n          } catch (err) {}\n        }\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replace(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch (e) {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  createPromiseCapability,\n  stringToBytes,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  const array = stringToBytes(data);\n  return array.buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args = {}) {\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || Object.create(null);\n    this.withCredentials = args.withCredentials || false;\n    this.getXhr =\n      args.getXhr ||\n      function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = this.getXhr();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = { xhr });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n    pendingRequest.onProgress?.(evt);\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else {\n      pendingRequest.onError?.(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: data.chunk, done: false });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersReceivedCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(evt) {\n    this.onProgress?.({\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength,\n    });\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    this.onClosed?.(this);\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      this.onProgress?.({ loaded: evt.loaded });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController?.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (typeof value === \"undefined\") {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = createPromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(this._readCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\nexport { PDFFetchStream };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable sort-exports/sort-exports */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").PDFDocumentLoadingTask} PDFDocumentLoadingTask */\n/** @typedef {import(\"./display/api\").PDFDocumentProxy} PDFDocumentProxy */\n/** @typedef {import(\"./display/api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display/api\").RenderTask} RenderTask */\n\nimport {\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n} from \"./display/display_utils.js\";\nimport {\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport {\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n} from \"./display/api.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { isNodeJS } from \"./shared/is_node.js\";\nimport { renderTextLayer } from \"./display/text_layer.js\";\nimport { SVGGraphics } from \"./display/svg.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n  const streamsPromise = Promise.all([\n    import(\"pdfjs/display/network.js\"),\n    import(\"pdfjs/display/fetch_stream.js\"),\n  ]);\n\n  setPDFNetworkStreamFactory(async params => {\n    const [{ PDFNetworkStream }, { PDFFetchStream }] = await streamsPromise;\n    if (isValidFetchUrl(params.url)) {\n      return new PDFFetchStream(params);\n    }\n    return new PDFNetworkStream(params);\n  });\n} else if (PDFJSDev.test(\"GENERIC || CHROME\")) {\n  if (PDFJSDev.test(\"GENERIC\") && isNodeJS) {\n    const { PDFNodeStream } = require(\"./display/node_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      return new PDFNodeStream(params);\n    });\n  } else {\n    const { PDFNetworkStream } = require(\"./display/network.js\");\n    const { PDFFetchStream } = require(\"./display/fetch_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      if (isValidFetchUrl(params.url)) {\n        return new PDFFetchStream(params);\n      }\n      return new PDFNetworkStream(params);\n    });\n  }\n}\n\nexport {\n  // From \"./display/display_utils.js\":\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isPdfFile,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  getXfaPageViewport,\n  // From \"./shared/util.js\":\n  AnnotationMode,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n  // From \"./display/api.js\":\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  version,\n  // From \"./display/annotation_layer.js\":\n  AnnotationLayer,\n  // From \"./display/worker_options.js\":\n  GlobalWorkerOptions,\n  // From \"./display/text_layer.js\":\n  renderTextLayer,\n  // From \"./display/svg.js\":\n  SVGGraphics,\n  // From \"./display/xfa_layer.js\":\n  XfaLayer,\n};\n"]},"metadata":{},"sourceType":"script"}